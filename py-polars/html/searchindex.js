Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 101, 114, 117, 208, 210, 237, 240, 250, 526, 599], "refer": [0, 88, 89, 91, 205, 237, 398, 454, 526, 769, 830, 866], "input": [0, 54, 88, 89, 91, 375, 383, 434, 477, 495, 502, 503, 506, 526, 535, 751, 810, 866], "output": [0, 24, 26, 27, 64, 91, 108, 117, 139, 140, 163, 166, 201, 237, 246, 250, 377, 378, 382, 472, 477, 502, 513, 526, 535, 556, 557, 566, 597, 599, 605, 614, 855, 866], "seri": [0, 1, 19, 45, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 81, 86, 107, 108, 110, 114, 117, 123, 131, 133, 135, 136, 141, 144, 145, 147, 149, 155, 156, 159, 171, 172, 178, 186, 190, 195, 196, 205, 206, 209, 237, 249, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 266, 270, 271, 278, 279, 282, 283, 287, 288, 292, 293, 305, 306, 308, 311, 314, 316, 318, 321, 325, 327, 330, 331, 334, 335, 343, 344, 349, 350, 354, 356, 358, 359, 360, 361, 362, 364, 365, 366, 376, 377, 394, 398, 399, 400, 401, 402, 404, 417, 420, 423, 424, 431, 448, 454, 458, 463, 464, 465, 466, 471, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 489, 495, 496, 499, 501, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 515, 516, 517, 518, 526, 535, 552, 579, 593, 594, 605, 859, 862, 865, 869, 870, 871], "datafram": [0, 1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 43, 45, 54, 55, 56, 57, 58, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 103, 104, 106, 108, 109, 235, 236, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 329, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485, 486, 489, 492, 493, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 526, 535, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 605, 613, 633, 649, 653, 668, 813, 815, 826, 827, 837, 846, 847, 855, 866], "lazyfram": [0, 1, 42, 44, 54, 55, 56, 57, 58, 61, 62, 99, 100, 101, 102, 103, 104, 106, 110, 153, 165, 237, 283, 347, 526, 535, 604, 872], "express": [0, 59, 61, 64, 108, 110, 111, 117, 129, 131, 138, 161, 166, 174, 184, 206, 208, 210, 237, 246, 247, 249, 250, 267, 283, 289, 290, 291, 294, 300, 302, 322, 341, 347, 354, 356, 360, 363, 368, 371, 376, 377, 378, 382, 383, 394, 395, 396, 401, 415, 416, 417, 419, 426, 439, 454, 460, 463, 469, 471, 474, 478, 481, 482, 486, 487, 488, 489, 493, 494, 495, 496, 497, 501, 502, 503, 506, 508, 510, 511, 512, 513, 515, 516, 519, 525, 535, 541, 549, 552, 573, 581, 582, 584, 593, 594, 595, 598, 599, 605, 633, 657, 658, 659, 667, 695, 787, 794, 815, 866], "extend": [0, 237, 344, 526, 535, 613, 718, 866], "function": [0, 55, 56, 57, 58, 59, 63, 88, 89, 91, 99, 109, 117, 126, 133, 158, 164, 165, 166, 197, 200, 210, 220, 237, 247, 250, 283, 300, 325, 338, 339, 340, 377, 378, 392, 404, 405, 406, 407, 408, 409, 411, 412, 413, 425, 467, 475, 477, 487, 488, 495, 496, 502, 510, 526, 535, 566, 570, 572, 599, 605, 614, 649, 667, 698, 712, 713, 714, 715, 775, 789, 790, 796, 801, 866], "data": [0, 1, 12, 15, 29, 45, 54, 55, 57, 62, 68, 69, 74, 75, 77, 78, 79, 80, 81, 82, 88, 89, 91, 92, 93, 96, 97, 98, 99, 106, 107, 109, 110, 111, 118, 119, 128, 137, 139, 151, 153, 165, 169, 175, 176, 182, 189, 193, 194, 235, 237, 286, 305, 326, 334, 355, 362, 364, 398, 414, 415, 425, 467, 469, 481, 513, 526, 535, 539, 540, 549, 556, 572, 598, 605, 613, 651, 656, 660, 672, 674, 707, 710, 769, 785, 786, 796, 801, 848, 849, 851, 853, 857, 865, 866], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 68, 77, 79, 82, 86, 88, 89, 90, 91, 93, 97, 99, 100, 105, 106, 107, 110, 113, 114, 117, 127, 133, 137, 139, 140, 141, 189, 193, 194, 196, 198, 199, 237, 250, 271, 283, 286, 287, 289, 290, 291, 306, 308, 311, 314, 316, 318, 321, 327, 335, 341, 352, 356, 358, 360, 361, 401, 449, 450, 451, 454, 467, 477, 482, 490, 491, 492, 494, 495, 501, 502, 526, 535, 541, 547, 549, 556, 557, 573, 582, 589, 590, 605, 637, 649, 651, 653, 657, 658, 659, 675, 677, 680, 686, 688, 691, 694, 700, 708, 710, 726, 728, 796, 825, 826, 827, 848, 849, 851, 858, 866], "config": [0, 206, 237, 535, 594, 605], "except": [0, 152, 237, 535, 562, 605, 849, 857, 866], "test": [0, 91, 535, 558, 565, 605], "util": [0, 535, 549, 605], "sql": [0, 42, 98, 151, 237, 535], "These": [1, 525], "allow": [1, 45, 68, 99, 101, 102, 103, 104, 110, 111, 152, 153, 176, 237, 322, 400, 415, 454, 526, 561, 562, 566, 595, 605, 695, 771, 786, 788, 830, 866], "you": [1, 28, 54, 78, 86, 88, 89, 91, 96, 99, 114, 117, 124, 128, 152, 161, 193, 197, 210, 220, 237, 250, 267, 289, 290, 291, 341, 347, 377, 400, 405, 406, 407, 408, 409, 411, 412, 413, 440, 443, 478, 487, 496, 526, 541, 546, 558, 562, 565, 582, 599, 605, 613, 633, 657, 658, 659, 771, 816, 819, 849, 857, 866], "regist": [1, 55, 56, 57, 58], "custom": [1, 55, 56, 57, 58, 117, 210, 237, 250, 283, 377, 404, 477, 502, 526, 566, 599, 605, 614, 649, 775, 866], "dedic": 1, "namespac": [1, 236, 240, 525, 535, 604], "underli": [1, 65, 72, 96, 110, 111, 128, 189, 237, 305, 306, 307, 310, 312, 313, 315, 317, 319, 320, 323, 324, 326, 332, 333, 334, 336, 400, 414, 526, 613, 674, 675, 676, 679, 681, 685, 687, 690, 692, 693, 696, 697, 699, 705, 706, 707, 709, 771, 785, 796, 844, 845, 849, 866], "polar": [1, 237, 525, 526, 535, 605, 866, 872, 873], "class": [1, 2, 3, 4, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 81, 108, 109, 193, 194, 237, 526, 535, 605, 848, 849, 866, 872], "without": [1, 63, 90, 93, 97, 100, 101, 200, 237, 300, 325, 405, 406, 407, 408, 409, 411, 412, 413, 512, 526, 667, 672, 698, 866], "requir": [1, 28, 81, 106, 107, 163, 164, 194, 198, 206, 237, 338, 339, 340, 420, 454, 469, 526, 589, 594, 605, 713, 714, 715, 795, 830, 849, 853, 866], "subclass": [1, 237], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 59, 62, 64, 124, 127, 129, 131, 138, 139, 140, 151, 161, 166, 174, 178, 184, 205, 206, 208, 237, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 526, 527, 530, 531, 532, 546, 548, 550, 552, 555, 556, 557, 561, 574, 579, 581, 584, 593, 594, 598, 605, 633, 667, 719, 794, 840, 866], "ar": [1, 14, 28, 45, 64, 70, 76, 77, 79, 81, 82, 88, 89, 90, 91, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113, 117, 124, 126, 129, 133, 139, 140, 152, 153, 158, 164, 174, 190, 194, 201, 237, 247, 283, 298, 299, 303, 304, 325, 330, 337, 358, 360, 361, 362, 364, 365, 366, 369, 398, 401, 402, 404, 410, 425, 427, 428, 440, 443, 461, 478, 479, 484, 513, 520, 522, 525, 526, 527, 530, 531, 532, 535, 546, 550, 556, 557, 558, 562, 565, 566, 570, 573, 595, 605, 611, 613, 649, 665, 666, 698, 703, 711, 712, 722, 725, 734, 737, 738, 739, 740, 741, 742, 747, 769, 773, 775, 781, 801, 816, 819, 838, 849, 857, 859, 862, 866, 869, 870, 871], "all": [1, 6, 11, 14, 19, 22, 29, 61, 62, 64, 77, 79, 81, 82, 83, 88, 89, 91, 92, 96, 99, 102, 103, 108, 109, 111, 124, 130, 147, 149, 153, 158, 160, 161, 169, 183, 192, 201, 237, 248, 249, 267, 271, 281, 283, 285, 294, 300, 341, 351, 352, 355, 358, 361, 365, 366, 368, 371, 373, 377, 378, 387, 391, 395, 398, 403, 420, 426, 433, 438, 439, 444, 445, 460, 472, 482, 494, 515, 526, 535, 541, 544, 546, 549, 551, 566, 570, 573, 582, 583, 595, 605, 633, 637, 647, 667, 732, 744, 769, 802, 809, 814, 815, 820, 821, 866], "support": [1, 28, 62, 77, 90, 91, 98, 100, 108, 111, 183, 206, 237, 279, 426, 448, 526, 583, 594, 605, 645, 802, 824, 866], "target": [1, 60, 437, 454, 813, 830], "thi": [1, 6, 22, 24, 26, 28, 44, 45, 54, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 117, 124, 126, 128, 133, 138, 139, 140, 141, 145, 147, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 164, 167, 168, 169, 176, 178, 181, 183, 185, 186, 189, 191, 193, 194, 197, 198, 200, 201, 202, 203, 207, 208, 210, 236, 237, 240, 247, 249, 250, 259, 261, 267, 271, 283, 287, 294, 300, 305, 306, 312, 322, 325, 331, 334, 341, 343, 344, 349, 354, 355, 356, 360, 371, 376, 377, 382, 383, 389, 390, 392, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 417, 419, 420, 421, 426, 427, 428, 441, 446, 454, 457, 458, 468, 469, 470, 471, 472, 475, 478, 483, 485, 487, 489, 494, 495, 496, 512, 516, 526, 535, 536, 538, 541, 546, 549, 555, 556, 557, 559, 562, 566, 570, 573, 579, 581, 582, 583, 589, 595, 596, 597, 599, 604, 605, 613, 614, 623, 626, 633, 637, 653, 667, 672, 674, 675, 681, 695, 698, 704, 707, 710, 712, 717, 718, 724, 725, 730, 731, 736, 737, 743, 745, 748, 752, 753, 754, 755, 757, 758, 759, 760, 761, 763, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 779, 782, 783, 784, 786, 789, 790, 791, 792, 794, 795, 796, 797, 802, 803, 805, 817, 822, 830, 833, 834, 837, 838, 845, 847, 848, 849, 850, 852, 853, 856, 857, 866], "featur": [1, 28, 45, 60, 237], "i": [1, 11, 24, 26, 27, 45, 54, 60, 61, 62, 63, 64, 67, 68, 70, 71, 77, 80, 81, 82, 85, 88, 89, 90, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 117, 124, 126, 134, 137, 138, 139, 140, 141, 145, 146, 148, 150, 152, 153, 156, 158, 161, 163, 165, 166, 174, 176, 183, 186, 189, 191, 197, 198, 200, 201, 206, 208, 210, 220, 236, 237, 240, 247, 248, 249, 250, 267, 269, 279, 283, 300, 322, 325, 330, 338, 339, 340, 343, 349, 352, 354, 356, 369, 377, 383, 392, 398, 400, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 421, 425, 426, 427, 428, 433, 437, 438, 439, 441, 446, 448, 451, 454, 457, 472, 478, 479, 483, 485, 487, 488, 489, 496, 501, 512, 516, 526, 541, 546, 549, 555, 556, 557, 560, 562, 564, 566, 570, 573, 582, 583, 589, 594, 597, 599, 605, 612, 613, 614, 633, 635, 645, 667, 695, 698, 703, 712, 713, 714, 715, 717, 725, 726, 729, 730, 731, 733, 743, 745, 746, 747, 769, 771, 773, 786, 787, 788, 789, 790, 791, 801, 802, 805, 809, 813, 814, 815, 817, 822, 824, 827, 833, 845, 849, 855, 856, 857, 866], "primarili": 1, "intend": 1, "us": [1, 8, 9, 11, 14, 19, 20, 24, 28, 45, 54, 64, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 114, 117, 129, 130, 133, 139, 140, 152, 156, 158, 160, 161, 165, 166, 174, 176, 184, 186, 197, 198, 201, 208, 210, 220, 237, 245, 250, 267, 283, 287, 300, 303, 304, 334, 337, 338, 339, 340, 341, 346, 347, 355, 369, 377, 381, 398, 400, 402, 405, 406, 407, 408, 409, 411, 412, 413, 415, 417, 420, 421, 425, 427, 428, 434, 435, 436, 440, 441, 446, 448, 450, 452, 454, 477, 478, 479, 482, 484, 487, 489, 496, 501, 503, 506, 511, 516, 525, 526, 541, 550, 551, 555, 556, 557, 558, 562, 564, 565, 570, 584, 589, 593, 599, 605, 614, 633, 649, 653, 667, 707, 711, 713, 714, 715, 719, 720, 725, 747, 769, 771, 773, 786, 789, 790, 791, 795, 801, 805, 810, 811, 816, 817, 822, 824, 826, 830, 840, 848, 849, 856, 857, 866], "librari": [1, 65, 72, 377, 526, 873], "author": 1, "domain": 1, "specif": [1, 22, 90, 98, 100, 110, 404, 454, 515, 526, 775, 830, 866], "capabl": 1, "which": [1, 14, 23, 24, 25, 26, 27, 28, 54, 55, 56, 57, 58, 88, 89, 90, 91, 98, 99, 100, 124, 128, 184, 198, 237, 247, 283, 358, 361, 362, 364, 365, 366, 383, 526, 546, 589, 597, 605, 613, 734, 738, 739, 740, 741, 742, 789, 866], "mai": [1, 28, 62, 63, 77, 88, 90, 92, 100, 101, 102, 117, 126, 128, 152, 180, 181, 200, 237, 278, 283, 300, 305, 312, 325, 341, 344, 405, 406, 407, 408, 409, 411, 412, 413, 418, 419, 454, 487, 488, 496, 510, 526, 562, 566, 580, 581, 596, 599, 605, 613, 644, 667, 674, 681, 698, 712, 718, 793, 794, 830, 866], "exist": [1, 90, 100, 110, 605], "belong": [1, 139, 237, 556, 605], "core": [1, 81, 194, 237], "cannot": [1, 88, 89, 117, 176, 210, 237, 250, 415, 450, 526, 582, 599, 605, 786, 826, 866], "overrid": [1, 78, 108, 109, 111, 237], "str": [1, 5, 7, 10, 11, 14, 15, 22, 23, 24, 25, 26, 27, 28, 31, 39, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 60, 63, 64, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 151, 152, 154, 155, 156, 157, 158, 159, 161, 163, 164, 166, 168, 170, 171, 172, 173, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 245, 246, 250, 264, 265, 269, 270, 271, 279, 282, 283, 302, 306, 322, 325, 328, 330, 331, 335, 341, 344, 345, 347, 349, 354, 360, 363, 378, 382, 384, 392, 395, 401, 403, 405, 406, 407, 408, 409, 411, 412, 413, 419, 420, 427, 428, 458, 459, 460, 463, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 526, 530, 541, 542, 543, 544, 545, 546, 548, 549, 552, 554, 555, 556, 557, 559, 561, 562, 570, 573, 575, 576, 577, 579, 581, 582, 583, 584, 589, 590, 594, 595, 596, 597, 599, 600, 601, 605, 610, 631, 637, 649, 651, 668, 675, 695, 698, 701, 703, 704, 708, 718, 720, 722, 752, 755, 759, 760, 761, 772, 789, 790, 834, 836, 847, 866, 869], "dt": [1, 54, 140, 237, 532, 557, 605, 871], "attempt": [1, 193, 237, 849, 866], "do": [1, 54, 61, 99, 128, 152, 189, 197, 200, 220, 237, 267, 300, 475, 526, 541, 562, 566, 573, 582, 605, 613, 633, 667, 849, 857, 866], "so": [1, 45, 99, 100, 137, 139, 140, 166, 237, 269, 479, 556, 557, 605, 635], "rais": [1, 10, 14, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 106, 107, 174, 237, 382, 394, 454, 501, 526, 830, 849, 857, 866], "an": [1, 55, 57, 58, 61, 64, 65, 68, 69, 72, 77, 88, 89, 91, 96, 98, 99, 102, 109, 110, 111, 117, 118, 119, 126, 129, 131, 133, 139, 140, 152, 161, 163, 166, 172, 174, 189, 193, 200, 210, 220, 237, 246, 247, 250, 267, 269, 283, 286, 289, 290, 291, 295, 296, 297, 298, 299, 300, 334, 347, 368, 377, 378, 383, 396, 404, 405, 406, 407, 408, 409, 411, 412, 413, 434, 438, 447, 453, 454, 463, 478, 482, 493, 501, 510, 512, 526, 535, 539, 540, 541, 549, 552, 556, 557, 562, 566, 573, 582, 584, 595, 599, 605, 633, 635, 651, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 707, 712, 775, 776, 777, 778, 779, 780, 782, 783, 784, 789, 790, 810, 814, 818, 823, 829, 830, 849, 857, 866], "attributeerror": 1, "howev": [1, 126, 237, 712, 866], "can": [1, 54, 64, 69, 88, 89, 91, 92, 99, 101, 102, 109, 110, 111, 117, 125, 133, 138, 139, 161, 166, 184, 197, 200, 208, 210, 237, 250, 267, 283, 300, 322, 341, 355, 387, 400, 405, 406, 407, 408, 409, 411, 412, 413, 417, 420, 425, 439, 472, 475, 478, 482, 489, 494, 503, 516, 525, 526, 541, 556, 584, 596, 599, 605, 614, 633, 649, 667, 695, 756, 771, 789, 790, 791, 795, 801, 815, 866], "other": [1, 14, 64, 88, 89, 91, 99, 106, 107, 124, 128, 134, 151, 152, 158, 174, 235, 237, 249, 264, 289, 290, 291, 302, 360, 428, 467, 526, 535, 546, 561, 562, 570, 595, 605, 613, 630, 657, 658, 659, 670, 737, 788, 851, 858, 865, 866], "onli": [1, 14, 22, 45, 54, 60, 62, 88, 89, 91, 92, 96, 99, 102, 103, 104, 110, 111, 117, 124, 138, 152, 156, 184, 186, 237, 245, 288, 289, 290, 291, 322, 350, 400, 470, 511, 515, 526, 541, 546, 558, 562, 565, 584, 605, 654, 657, 658, 659, 695, 723, 771, 845, 866], "gener": [1, 98, 108, 109, 110, 111, 176, 197, 237, 283, 415, 421, 526, 649, 786, 797, 866], "userwarn": 1, "pl": [1, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 526, 536, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 636, 637, 639, 644, 645, 648, 649, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 764, 765, 766, 768, 769, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 797, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 826, 827, 828, 830, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 866], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 55, 56, 57, 58, 109, 110, 111, 165, 197, 237, 572, 605], "__init__": [1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 108], "self": [1, 55, 56, 57, 58, 61, 392, 526, 541, 549, 573, 582, 605, 613, 789, 790, 858, 866], "_expr": [1, 56], "hello": [1, 349, 475, 526, 637], "return": [1, 22, 24, 26, 27, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 114, 117, 118, 122, 124, 125, 126, 127, 129, 130, 133, 142, 144, 150, 151, 153, 154, 160, 161, 163, 164, 165, 166, 174, 176, 187, 188, 194, 197, 198, 205, 208, 210, 213, 217, 223, 237, 247, 248, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 265, 269, 270, 271, 282, 292, 293, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 336, 343, 349, 353, 356, 358, 359, 360, 361, 362, 364, 365, 366, 372, 376, 383, 387, 401, 402, 415, 423, 424, 431, 433, 435, 437, 438, 439, 440, 441, 443, 446, 448, 449, 450, 451, 457, 462, 463, 464, 465, 466, 468, 470, 471, 472, 477, 478, 482, 490, 491, 492, 499, 501, 502, 512, 517, 519, 526, 541, 547, 549, 558, 564, 565, 566, 572, 573, 582, 588, 589, 597, 600, 601, 605, 610, 611, 612, 614, 621, 622, 624, 625, 628, 629, 631, 635, 636, 637, 648, 668, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 709, 712, 717, 722, 725, 727, 728, 732, 734, 735, 737, 738, 739, 740, 741, 742, 744, 746, 749, 756, 773, 774, 786, 788, 790, 807, 808, 809, 811, 813, 814, 815, 816, 817, 819, 822, 824, 825, 826, 827, 830, 833, 839, 841, 852, 854, 858, 866], "lit": [1, 86, 114, 368, 487, 489, 496, 516, 519, 526, 720, 866], "alia": [1, 54, 56, 58, 139, 140, 154, 199, 205, 206, 237, 250, 261, 267, 289, 290, 291, 295, 296, 297, 298, 299, 305, 307, 308, 309, 311, 314, 316, 318, 321, 322, 323, 325, 326, 327, 329, 330, 333, 334, 335, 347, 349, 354, 359, 360, 368, 371, 372, 385, 392, 393, 400, 416, 432, 433, 436, 438, 440, 443, 448, 450, 451, 452, 467, 468, 474, 480, 481, 483, 484, 489, 492, 493, 497, 511, 515, 516, 526, 556, 557, 559, 565, 590, 593, 594, 598, 605, 626, 633, 674, 675, 678, 695, 702, 707, 708, 749, 826, 827, 866], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 349, 526, 637], "select": [1, 54, 55, 56, 57, 59, 87, 88, 89, 90, 92, 96, 98, 99, 101, 117, 150, 152, 161, 165, 174, 183, 195, 199, 201, 237, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 357, 358, 360, 361, 363, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 446, 447, 449, 450, 451, 453, 455, 456, 458, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 477, 478, 480, 482, 483, 485, 486, 489, 492, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 526, 542, 559, 562, 572, 583, 590, 595, 597, 605, 633, 649, 789, 790, 802, 813, 815, 840, 866], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 55, 163, 208, 237, 349, 450, 451, 526, 826, 827], "splitfram": [1, 55], "df": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 55, 56, 59, 77, 78, 79, 80, 81, 82, 83, 98, 99, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485, 486, 489, 492, 493, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 526, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 596, 597, 599, 600, 601, 605, 633, 649, 653, 813, 815, 821, 826, 827, 847, 866], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 31, 54, 55, 57, 61, 63, 83, 85, 87, 88, 89, 90, 92, 96, 98, 99, 100, 109, 110, 111, 120, 125, 126, 127, 131, 136, 139, 144, 160, 163, 175, 184, 190, 191, 197, 198, 199, 200, 206, 209, 220, 237, 245, 264, 266, 267, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 341, 343, 349, 377, 383, 384, 392, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 419, 427, 428, 438, 449, 458, 459, 463, 482, 483, 489, 493, 503, 506, 515, 516, 526, 542, 545, 546, 547, 548, 552, 556, 570, 589, 590, 594, 595, 605, 627, 630, 632, 633, 635, 636, 637, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 655, 712, 717, 721, 724, 728, 737, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 814, 825, 836, 840, 848, 866], "with_row_count": [1, 237, 605, 790, 866], "name": [1, 12, 16, 18, 26, 44, 55, 56, 57, 58, 63, 64, 67, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 117, 120, 123, 124, 132, 135, 137, 151, 152, 158, 166, 170, 177, 190, 196, 197, 199, 205, 206, 207, 237, 246, 283, 325, 330, 341, 368, 378, 382, 384, 395, 458, 459, 460, 475, 476, 482, 486, 489, 494, 499, 500, 503, 506, 508, 509, 511, 513, 516, 517, 526, 542, 545, 561, 562, 570, 576, 578, 584, 590, 594, 596, 597, 598, 605, 610, 649, 656, 698, 703, 722, 772, 834, 836, 847, 850, 866], "n": [1, 9, 11, 19, 27, 31, 32, 55, 56, 57, 58, 64, 85, 86, 88, 89, 99, 114, 117, 128, 139, 142, 154, 163, 176, 187, 188, 194, 213, 223, 237, 266, 270, 282, 300, 301, 305, 309, 329, 334, 344, 353, 372, 393, 401, 415, 425, 450, 451, 462, 464, 468, 499, 511, 517, 526, 541, 556, 558, 565, 587, 588, 600, 601, 605, 613, 632, 636, 648, 667, 669, 674, 678, 702, 707, 718, 727, 749, 764, 786, 801, 805, 826, 827, 839, 841, 844, 852, 856, 866], "filter": [1, 55, 99, 101, 124, 148, 210, 237, 436, 452, 474, 478, 526, 546, 549, 559, 599, 605, 789, 866], "col": [1, 24, 54, 55, 56, 57, 59, 80, 82, 99, 109, 110, 117, 131, 138, 139, 140, 148, 150, 161, 165, 174, 178, 184, 199, 205, 206, 208, 237, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 347, 348, 349, 350, 354, 355, 356, 357, 359, 360, 362, 363, 364, 367, 368, 369, 370, 374, 375, 376, 379, 380, 381, 386, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 483, 484, 489, 492, 495, 497, 498, 503, 506, 509, 515, 516, 519, 526, 552, 555, 556, 557, 559, 572, 579, 584, 590, 593, 594, 595, 598, 605, 633, 649, 653, 695, 773, 789, 790, 813, 815, 830, 866], "2": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 77, 78, 79, 80, 81, 82, 83, 98, 99, 101, 105, 106, 107, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 244, 245, 246, 248, 249, 250, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 302, 308, 310, 311, 314, 316, 317, 318, 319, 321, 322, 324, 325, 326, 327, 330, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 431, 433, 436, 438, 439, 440, 443, 444, 445, 448, 450, 451, 452, 455, 456, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 480, 481, 482, 483, 484, 485, 486, 489, 492, 493, 494, 495, 497, 499, 501, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 526, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 605, 610, 613, 614, 616, 620, 621, 622, 623, 624, 625, 632, 633, 636, 637, 639, 644, 645, 648, 649, 653, 654, 655, 660, 661, 664, 665, 666, 667, 668, 670, 679, 683, 684, 690, 692, 697, 698, 699, 703, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 764, 765, 766, 768, 769, 772, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 797, 799, 801, 802, 803, 804, 805, 807, 809, 814, 815, 819, 820, 821, 826, 827, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 858, 866], "0": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 28, 54, 55, 56, 58, 59, 63, 83, 88, 89, 91, 92, 96, 98, 99, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 117, 118, 119, 121, 122, 125, 129, 130, 133, 134, 136, 137, 139, 141, 145, 150, 151, 153, 155, 156, 157, 159, 160, 161, 162, 164, 167, 168, 172, 176, 177, 178, 181, 183, 184, 185, 186, 192, 195, 197, 198, 200, 201, 202, 205, 206, 207, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 237, 240, 244, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 267, 269, 275, 283, 286, 288, 290, 291, 292, 293, 295, 300, 303, 304, 310, 314, 316, 317, 321, 326, 327, 338, 339, 340, 342, 345, 346, 350, 352, 355, 358, 361, 362, 364, 365, 366, 368, 369, 374, 375, 377, 379, 380, 381, 386, 389, 390, 391, 393, 394, 397, 398, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 420, 422, 423, 424, 425, 429, 430, 437, 457, 461, 465, 466, 467, 473, 478, 480, 481, 483, 486, 487, 489, 493, 496, 504, 505, 508, 509, 513, 516, 518, 519, 526, 539, 540, 545, 547, 550, 551, 556, 561, 564, 569, 573, 574, 578, 579, 581, 582, 584, 585, 591, 593, 594, 595, 596, 599, 605, 615, 616, 617, 618, 619, 620, 621, 623, 625, 633, 635, 651, 654, 656, 661, 662, 667, 668, 670, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 693, 694, 699, 700, 711, 713, 714, 715, 719, 723, 726, 734, 736, 738, 739, 740, 741, 742, 746, 747, 753, 754, 764, 768, 769, 775, 777, 778, 780, 781, 782, 784, 786, 798, 799, 800, 804, 805, 807, 813, 815, 833, 842, 843, 846, 850, 851, 856, 857, 866], "drop": [1, 117, 123, 124, 198, 237, 266, 301, 303, 304, 526, 546, 589, 605, 632, 669, 671, 866], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 11, 12, 15, 16, 18, 26, 45, 54, 55, 56, 57, 62, 63, 67, 71, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 102, 103, 104, 106, 110, 117, 122, 123, 124, 125, 126, 127, 132, 135, 137, 138, 139, 140, 144, 145, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 171, 172, 177, 178, 184, 185, 186, 190, 192, 195, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 220, 237, 247, 248, 250, 259, 261, 264, 283, 307, 310, 312, 313, 315, 317, 319, 320, 323, 324, 326, 332, 333, 336, 341, 347, 368, 382, 384, 392, 395, 399, 401, 405, 406, 407, 408, 409, 411, 412, 413, 420, 427, 428, 450, 451, 454, 460, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495, 496, 498, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517, 518, 519, 526, 545, 546, 547, 548, 555, 556, 557, 561, 562, 566, 567, 568, 569, 570, 571, 572, 574, 576, 578, 579, 584, 585, 586, 589, 590, 591, 593, 594, 595, 596, 597, 605, 611, 612, 630, 676, 679, 681, 685, 687, 690, 692, 693, 696, 697, 699, 705, 706, 709, 795, 826, 827, 847, 866], "txt": 1, "utf8": [1, 8, 14, 45, 88, 89, 99, 108, 125, 126, 133, 137, 177, 193, 237, 271, 343, 349, 431, 435, 437, 438, 439, 440, 448, 449, 450, 451, 454, 482, 484, 526, 547, 578, 605, 637, 701, 717, 745, 807, 811, 813, 814, 815, 816, 824, 825, 826, 827, 830, 849, 866], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 538, 540, 545, 546, 548, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 598, 599, 600, 601, 605], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 57, 140, 165, 237, 250, 267, 286, 287, 289, 290, 291, 352, 355, 356, 359, 362, 364, 365, 366, 368, 392, 393, 436, 440, 443, 444, 445, 448, 450, 451, 452, 454, 457, 459, 467, 478, 481, 483, 484, 489, 493, 515, 516, 519, 526, 557, 572, 605, 633, 653, 830], "tp": [1, 57], "cast": [1, 56, 57, 77, 113, 133, 139, 140, 165, 194, 237, 249, 287, 298, 299, 305, 306, 400, 439, 457, 461, 467, 484, 526, 556, 557, 572, 605, 653, 665, 666, 674, 675, 771, 815, 838, 847, 851, 866], "int64": [1, 26, 56, 57, 86, 114, 125, 133, 137, 139, 140, 165, 177, 189, 237, 298, 299, 308, 311, 314, 316, 318, 321, 327, 341, 400, 461, 467, 478, 482, 494, 526, 547, 556, 557, 572, 578, 597, 605, 665, 666, 677, 680, 686, 688, 691, 694, 700, 710, 771, 788, 838, 849, 850, 851, 866], "int8": [1, 57, 133, 237, 298, 299, 461, 526, 665, 666, 774, 838, 866], "int16": [1, 57, 298, 299, 461, 526, 665, 666, 838, 866], "int32": [1, 57, 79, 110, 111, 139, 140, 237, 286, 312, 336, 467, 526, 556, 557, 605, 681, 709, 851, 866], "1": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 99, 100, 101, 105, 106, 107, 108, 110, 111, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485, 486, 489, 490, 491, 492, 493, 494, 495, 497, 499, 501, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 526, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 635, 636, 639, 644, 645, 648, 649, 651, 653, 654, 655, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 764, 765, 766, 768, 769, 772, 773, 774, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 813, 815, 826, 827, 830, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 866], "b": [1, 23, 24, 25, 28, 45, 57, 62, 77, 78, 79, 80, 81, 82, 83, 91, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 246, 249, 250, 260, 264, 267, 271, 273, 285, 286, 287, 294, 302, 303, 304, 341, 343, 345, 346, 347, 351, 352, 355, 358, 361, 362, 363, 364, 365, 366, 368, 371, 373, 378, 387, 391, 395, 403, 420, 426, 444, 458, 459, 460, 470, 472, 474, 475, 480, 481, 482, 484, 485, 486, 489, 493, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 526, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 600, 601, 605, 613, 633, 653, 668, 670, 711, 712, 720, 737, 745, 772, 788, 820, 854, 866], "3": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 91, 99, 101, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 245, 246, 247, 250, 259, 260, 261, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 317, 319, 323, 324, 325, 326, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 371, 373, 374, 375, 376, 378, 387, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 427, 428, 429, 432, 434, 435, 436, 437, 440, 442, 443, 447, 448, 449, 450, 451, 452, 453, 458, 459, 460, 462, 463, 464, 468, 470, 471, 472, 474, 475, 480, 481, 482, 483, 484, 485, 486, 489, 493, 494, 495, 497, 499, 501, 503, 504, 505, 506, 508, 512, 513, 514, 515, 516, 517, 518, 519, 526, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 605, 610, 613, 614, 615, 617, 618, 619, 621, 622, 623, 624, 625, 632, 633, 636, 639, 644, 645, 648, 649, 651, 653, 654, 655, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 674, 675, 676, 677, 678, 679, 682, 683, 684, 686, 688, 689, 690, 692, 694, 696, 698, 699, 702, 703, 706, 707, 708, 710, 712, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 764, 765, 766, 768, 769, 772, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 797, 799, 800, 801, 802, 803, 805, 810, 811, 812, 813, 816, 819, 824, 828, 838, 839, 840, 841, 842, 843, 845, 846, 848, 849, 850, 853, 854, 855, 856, 858, 866], "4": [1, 11, 19, 23, 24, 25, 28, 45, 54, 55, 56, 57, 58, 59, 62, 64, 77, 78, 79, 80, 81, 82, 83, 99, 105, 106, 107, 111, 117, 118, 119, 121, 124, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 160, 161, 163, 165, 166, 167, 171, 175, 178, 179, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 244, 245, 249, 250, 260, 266, 267, 270, 278, 279, 282, 285, 286, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 307, 311, 317, 318, 319, 323, 324, 325, 326, 327, 330, 332, 333, 336, 342, 343, 345, 346, 350, 351, 353, 354, 355, 356, 365, 366, 368, 371, 373, 375, 378, 392, 394, 395, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 416, 418, 419, 422, 426, 427, 428, 429, 432, 440, 441, 443, 446, 448, 450, 451, 454, 460, 462, 463, 464, 467, 468, 480, 481, 482, 484, 485, 486, 489, 493, 495, 499, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 519, 526, 539, 540, 541, 544, 546, 548, 549, 550, 551, 553, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 596, 599, 600, 601, 605, 613, 616, 623, 632, 633, 636, 644, 645, 648, 654, 655, 657, 667, 668, 670, 679, 680, 685, 687, 690, 691, 692, 693, 697, 698, 699, 700, 701, 703, 705, 706, 717, 719, 720, 729, 732, 737, 739, 740, 741, 742, 744, 757, 764, 765, 766, 769, 778, 780, 781, 782, 783, 784, 786, 788, 798, 802, 803, 808, 816, 817, 819, 822, 824, 826, 827, 830, 840, 841, 851, 858, 866], "c": [1, 23, 24, 25, 28, 45, 55, 57, 79, 81, 91, 99, 109, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 189, 193, 194, 195, 197, 198, 200, 202, 203, 206, 211, 212, 213, 214, 215, 216, 218, 220, 222, 223, 237, 250, 264, 271, 273, 368, 420, 450, 454, 470, 472, 475, 480, 481, 482, 484, 485, 486, 489, 495, 497, 499, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 526, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 555, 556, 561, 564, 570, 573, 576, 577, 578, 579, 582, 583, 584, 593, 594, 595, 600, 601, 605, 668, 745, 826, 830, 854, 866], "5": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 28, 54, 55, 57, 58, 59, 62, 63, 77, 79, 80, 81, 82, 85, 86, 89, 105, 110, 111, 114, 117, 118, 119, 121, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 152, 153, 154, 156, 158, 160, 161, 166, 167, 168, 171, 175, 179, 187, 188, 189, 190, 191, 196, 198, 200, 201, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 245, 267, 270, 275, 281, 282, 286, 287, 288, 289, 290, 291, 300, 302, 308, 326, 327, 332, 335, 340, 341, 343, 344, 350, 353, 356, 359, 362, 364, 365, 366, 368, 373, 392, 393, 395, 397, 398, 402, 403, 404, 405, 406, 408, 412, 414, 416, 422, 433, 439, 440, 443, 457, 460, 462, 464, 468, 480, 483, 485, 486, 489, 492, 493, 494, 495, 499, 503, 504, 505, 506, 507, 508, 513, 514, 516, 517, 518, 526, 539, 540, 541, 544, 548, 549, 550, 551, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 568, 569, 570, 573, 580, 581, 582, 583, 585, 586, 587, 588, 592, 593, 594, 596, 599, 600, 601, 605, 613, 616, 620, 623, 633, 636, 639, 648, 653, 655, 657, 663, 667, 668, 670, 675, 676, 677, 699, 700, 705, 706, 708, 715, 718, 729, 757, 764, 765, 766, 768, 769, 775, 776, 777, 779, 780, 783, 786, 788, 798, 804, 809, 815, 816, 852, 858, 866], "6": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 77, 79, 80, 81, 82, 83, 117, 120, 122, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 150, 151, 154, 155, 156, 157, 158, 159, 162, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 199, 200, 201, 202, 203, 205, 206, 207, 208, 213, 220, 222, 223, 237, 250, 285, 286, 298, 299, 302, 322, 324, 326, 337, 343, 345, 346, 351, 353, 355, 373, 392, 396, 398, 399, 402, 405, 406, 407, 408, 409, 411, 412, 413, 416, 427, 428, 433, 440, 443, 462, 464, 475, 489, 493, 515, 516, 526, 541, 542, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 560, 561, 563, 565, 566, 570, 573, 576, 578, 579, 580, 581, 582, 583, 584, 587, 588, 590, 592, 593, 594, 596, 597, 600, 601, 605, 613, 655, 661, 665, 666, 668, 670, 695, 706, 717, 757, 769, 778, 780, 781, 782, 784, 788, 809, 816, 838, 866], "7": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 64, 120, 121, 122, 123, 125, 127, 131, 132, 134, 139, 140, 142, 144, 146, 151, 155, 156, 157, 159, 162, 164, 168, 170, 172, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 193, 194, 195, 200, 201, 202, 203, 237, 299, 307, 323, 325, 330, 333, 336, 342, 353, 355, 392, 402, 406, 412, 462, 464, 515, 526, 542, 545, 547, 548, 552, 556, 557, 558, 560, 561, 565, 574, 576, 578, 579, 584, 587, 588, 593, 597, 605, 620, 676, 681, 698, 703, 706, 783, 866], "float32": [1, 24, 57, 133, 237, 733, 866], "lazi": [1, 57, 62, 64, 86, 99, 110, 114, 152, 165, 208, 237, 250, 283, 392, 478, 526, 535, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 605], "register_series_namespac": [1, 55, 56, 57], "math": [1, 58, 661, 799, 842, 866], "mathshortcut": [1, 58], "": [1, 24, 58, 63, 88, 89, 111, 122, 124, 126, 138, 139, 145, 151, 152, 171, 172, 188, 208, 237, 266, 270, 271, 278, 279, 282, 309, 341, 369, 383, 387, 389, 390, 392, 393, 400, 404, 428, 440, 441, 443, 446, 448, 449, 451, 454, 457, 459, 489, 492, 494, 497, 503, 506, 508, 516, 526, 546, 555, 556, 562, 588, 598, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 636, 637, 639, 644, 645, 648, 651, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 670, 675, 678, 698, 703, 710, 712, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 757, 758, 760, 761, 764, 765, 766, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 797, 798, 799, 800, 802, 803, 805, 808, 809, 810, 811, 812, 814, 816, 817, 819, 820, 822, 824, 827, 828, 830, 833, 836, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 866], "_": [1, 54, 58, 450, 826], "squar": [1, 58, 210, 369, 429, 526, 599, 747, 804, 866], "cube": [1, 58], "s2": [1, 107, 133, 237, 613, 655, 670, 737, 757, 788, 858, 866], "renam": [1, 88, 89, 237, 246, 378, 385, 459, 526, 605, 836, 847, 866], "n2": 1, "in_plac": [1, 144, 182, 203, 237, 770, 772, 796, 803, 866], "true": [1, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 59, 61, 62, 64, 77, 81, 85, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 124, 130, 133, 134, 136, 137, 139, 145, 147, 148, 149, 152, 153, 156, 160, 161, 163, 166, 167, 184, 190, 197, 198, 199, 200, 201, 206, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 237, 245, 247, 248, 249, 250, 265, 286, 295, 296, 297, 298, 299, 325, 326, 330, 337, 338, 339, 340, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 400, 410, 415, 420, 425, 427, 428, 432, 434, 436, 439, 449, 450, 452, 454, 458, 459, 463, 468, 469, 472, 477, 478, 485, 511, 513, 515, 519, 526, 539, 540, 541, 543, 544, 546, 549, 551, 555, 556, 561, 562, 564, 566, 573, 582, 584, 589, 590, 594, 605, 611, 612, 613, 614, 624, 651, 655, 656, 698, 699, 703, 711, 713, 714, 715, 721, 725, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 757, 765, 766, 771, 781, 788, 801, 803, 808, 810, 812, 815, 825, 826, 828, 830, 849, 852, 857, 858, 866], "s3": [1, 90, 100, 101, 866], "n3": 1, "arg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 165, 194, 237, 497, 572, 605, 614, 849, 866], "ani": [2, 3, 4, 6, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 60, 78, 79, 80, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 104, 108, 110, 111, 117, 124, 128, 130, 131, 133, 150, 163, 164, 165, 174, 175, 190, 191, 193, 194, 200, 237, 250, 264, 267, 286, 326, 346, 360, 377, 385, 402, 404, 419, 427, 454, 463, 477, 495, 501, 513, 526, 546, 551, 572, 605, 613, 614, 630, 633, 670, 699, 720, 737, 746, 773, 775, 790, 830, 840, 848, 849, 866], "kwarg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 164, 165, 194, 206, 237, 572, 594, 605, 849, 866], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 526, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 866, 872], "method": [2, 3, 4, 6, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 88, 89, 91, 108, 124, 146, 161, 168, 221, 237, 247, 331, 355, 397, 398, 405, 406, 407, 408, 409, 411, 412, 413, 470, 509, 520, 522, 526, 527, 530, 531, 532, 535, 546, 560, 574, 605, 614, 704, 729, 768, 769, 780, 851, 859, 862, 866, 869, 870, 871], "A": [4, 24, 42, 61, 64, 83, 88, 89, 96, 99, 100, 133, 139, 152, 163, 166, 190, 192, 200, 201, 220, 237, 244, 283, 308, 311, 314, 316, 318, 321, 327, 358, 361, 362, 364, 377, 378, 383, 395, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 432, 433, 437, 438, 439, 457, 460, 482, 483, 493, 497, 526, 556, 562, 584, 605, 649, 677, 680, 686, 688, 691, 694, 700, 775, 776, 777, 779, 782, 783, 784, 808, 809, 813, 814, 815, 820, 821, 830, 833, 866], "encod": [4, 53, 88, 89, 99, 192, 237, 434, 810], "set": [4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20, 22, 24, 26, 27, 55, 64, 79, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 106, 107, 109, 110, 111, 120, 141, 152, 158, 176, 183, 197, 237, 250, 279, 283, 334, 335, 352, 360, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 421, 425, 426, 448, 526, 535, 542, 561, 562, 566, 570, 583, 597, 599, 605, 613, 614, 645, 707, 708, 722, 726, 737, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 790, 801, 802, 824, 849, 866], "string": [4, 5, 7, 9, 10, 14, 24, 26, 27, 31, 45, 53, 64, 88, 89, 99, 108, 109, 111, 113, 133, 139, 140, 152, 184, 200, 201, 237, 271, 287, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 431, 432, 435, 436, 438, 439, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 454, 457, 482, 484, 497, 503, 506, 526, 543, 544, 554, 556, 557, 562, 597, 605, 637, 653, 695, 698, 703, 806, 807, 808, 812, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 827, 828, 830, 831, 832, 833, 866], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 554, 575, 605], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "previous": 5, "save": [5, 535], "share": [5, 45, 126, 237, 712, 866], "option": [5, 6, 7, 54, 64, 78, 88, 90, 91, 92, 96, 100, 102, 104, 105, 108, 109, 110, 111, 124, 152, 158, 161, 190, 192, 197, 201, 206, 237, 369, 404, 405, 406, 407, 408, 409, 411, 412, 413, 425, 447, 448, 453, 475, 478, 501, 526, 535, 561, 562, 570, 594, 605, 747, 775, 776, 777, 778, 779, 780, 782, 783, 784, 790, 801, 818, 823, 824, 829, 847, 866], "paramet": [5, 9, 10, 11, 14, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 39, 42, 44, 46, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 117, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 152, 154, 156, 158, 160, 161, 163, 164, 165, 166, 168, 170, 171, 172, 174, 176, 178, 180, 181, 183, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 213, 220, 221, 223, 237, 246, 249, 250, 259, 261, 264, 265, 266, 267, 269, 270, 271, 278, 279, 282, 283, 285, 286, 287, 289, 290, 291, 295, 296, 297, 298, 299, 300, 301, 302, 305, 306, 309, 322, 325, 329, 330, 331, 334, 335, 337, 338, 339, 340, 341, 344, 346, 347, 351, 352, 353, 355, 356, 360, 369, 372, 374, 377, 378, 392, 393, 397, 398, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 462, 463, 468, 469, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 497, 499, 501, 502, 503, 508, 509, 510, 511, 512, 513, 515, 516, 517, 526, 541, 545, 546, 549, 550, 551, 552, 554, 555, 556, 557, 558, 561, 562, 565, 566, 570, 572, 573, 574, 575, 576, 579, 580, 581, 582, 583, 584, 587, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 610, 613, 614, 623, 626, 630, 631, 632, 633, 635, 636, 637, 644, 645, 648, 649, 651, 653, 657, 658, 659, 663, 664, 665, 666, 667, 669, 670, 674, 675, 678, 695, 698, 702, 703, 704, 707, 708, 711, 712, 713, 714, 715, 718, 719, 720, 721, 726, 727, 729, 747, 749, 764, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 797, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 836, 839, 840, 847, 848, 849, 852, 853, 855, 856, 857, 858, 866], "json": [5, 7, 26, 27, 94, 95, 103, 237, 439, 535, 554, 575, 597, 605, 815], "produc": [5, 110, 111, 382, 502], "reset": 6, "default": [6, 14, 22, 23, 24, 25, 26, 27, 28, 77, 78, 80, 81, 82, 86, 88, 89, 96, 99, 108, 109, 110, 111, 114, 126, 138, 140, 141, 152, 158, 166, 176, 207, 237, 279, 283, 287, 337, 352, 356, 374, 389, 390, 393, 398, 415, 421, 437, 448, 454, 478, 479, 501, 513, 526, 555, 557, 562, 570, 597, 605, 645, 649, 653, 711, 712, 726, 760, 761, 764, 769, 786, 805, 813, 824, 856, 866], "state": [6, 61, 72, 487, 535, 541, 549, 573, 582, 605], "note": [6, 14, 54, 64, 80, 82, 86, 88, 90, 96, 98, 100, 109, 110, 111, 114, 117, 129, 138, 139, 140, 151, 152, 161, 164, 165, 174, 191, 193, 197, 198, 201, 220, 237, 240, 267, 298, 299, 303, 304, 322, 325, 330, 362, 364, 405, 406, 407, 408, 409, 411, 412, 413, 425, 440, 443, 454, 461, 487, 496, 510, 526, 541, 549, 550, 556, 557, 558, 562, 565, 582, 589, 605, 633, 665, 666, 695, 789, 790, 796, 801, 816, 819, 838, 849, 866], "oper": [6, 45, 62, 68, 69, 77, 78, 79, 80, 81, 82, 88, 96, 117, 128, 133, 138, 145, 153, 161, 163, 165, 169, 189, 193, 194, 197, 200, 208, 220, 237, 245, 283, 295, 296, 297, 298, 299, 300, 368, 385, 398, 400, 475, 476, 493, 526, 549, 555, 558, 561, 565, 605, 613, 663, 664, 665, 666, 667, 769, 771, 845, 848, 849, 857, 866], "remov": [6, 122, 237, 240, 341, 442, 447, 453, 494, 526, 545, 605, 818, 823, 829], "from": [6, 24, 54, 64, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 122, 126, 128, 137, 139, 140, 152, 153, 158, 170, 174, 176, 178, 197, 198, 200, 201, 237, 295, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 341, 355, 369, 389, 390, 393, 415, 427, 428, 437, 454, 470, 472, 481, 482, 490, 491, 492, 494, 501, 513, 525, 526, 545, 546, 549, 554, 556, 557, 562, 570, 575, 576, 579, 589, 593, 595, 605, 613, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 712, 731, 747, 760, 761, 762, 764, 786, 813, 855, 858, 866], "environ": [6, 22], "local": [6, 90, 100, 331, 704, 765, 766, 866], "flag": [6, 108, 206, 237, 417, 526, 566, 594, 605, 791, 866], "back": [6, 54, 128, 237, 613, 866], "valu": [6, 9, 22, 24, 26, 39, 40, 52, 54, 62, 63, 79, 81, 88, 89, 98, 99, 101, 106, 107, 108, 109, 110, 111, 113, 117, 124, 128, 129, 130, 134, 137, 139, 140, 141, 146, 155, 156, 157, 158, 159, 161, 163, 166, 167, 168, 170, 176, 180, 181, 184, 185, 186, 190, 200, 201, 202, 211, 212, 214, 215, 216, 218, 219, 220, 224, 225, 226, 227, 228, 229, 230, 237, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 268, 269, 270, 272, 274, 275, 276, 278, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 300, 301, 303, 304, 307, 319, 323, 332, 338, 339, 340, 342, 344, 345, 346, 348, 350, 351, 352, 354, 355, 357, 358, 359, 361, 362, 364, 365, 366, 367, 370, 371, 375, 376, 377, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 397, 398, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 423, 424, 425, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 444, 445, 448, 450, 451, 452, 457, 461, 463, 464, 465, 466, 468, 469, 470, 471, 472, 481, 484, 485, 487, 488, 489, 495, 496, 501, 503, 504, 505, 506, 507, 510, 511, 516, 519, 526, 546, 550, 551, 556, 557, 559, 560, 567, 568, 569, 570, 571, 574, 576, 580, 581, 584, 585, 586, 591, 597, 598, 605, 609, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 628, 629, 632, 634, 635, 636, 638, 640, 641, 642, 644, 648, 650, 653, 654, 657, 658, 659, 661, 662, 667, 668, 669, 671, 672, 676, 692, 696, 705, 712, 713, 714, 715, 718, 719, 720, 722, 723, 725, 726, 729, 732, 734, 735, 737, 738, 739, 740, 741, 742, 744, 752, 753, 755, 756, 758, 760, 761, 762, 763, 764, 767, 768, 769, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 788, 789, 790, 793, 794, 799, 800, 801, 807, 809, 810, 811, 812, 813, 814, 815, 816, 819, 820, 821, 824, 826, 827, 828, 833, 838, 840, 841, 842, 843, 851, 854, 855, 857, 858, 866], "exampl": [6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 481, 482, 483, 484, 485, 486, 489, 492, 493, 494, 495, 497, 499, 501, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 526, 535, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 632, 633, 636, 637, 639, 644, 645, 648, 649, 651, 653, 654, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 752, 753, 754, 755, 756, 757, 758, 764, 765, 766, 768, 769, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 793, 797, 798, 799, 800, 802, 803, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 826, 827, 828, 830, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 866], "current": [7, 22, 118, 119, 206, 237, 283, 325, 393, 526, 535, 539, 540, 594, 605, 656, 660, 698, 764, 866], "activ": [8, 12, 13, 15, 16, 17, 18, 21, 267, 633], "bool": [8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 39, 54, 59, 61, 62, 77, 81, 88, 89, 92, 94, 96, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 118, 119, 130, 131, 133, 134, 136, 138, 139, 144, 145, 147, 148, 149, 152, 163, 166, 176, 182, 184, 190, 194, 197, 198, 199, 201, 203, 206, 212, 214, 215, 218, 237, 247, 248, 249, 259, 261, 265, 267, 280, 286, 295, 296, 297, 298, 299, 300, 326, 337, 338, 339, 340, 344, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 377, 398, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 419, 420, 425, 427, 428, 432, 434, 436, 444, 445, 449, 450, 452, 454, 458, 459, 468, 469, 472, 477, 478, 479, 481, 487, 501, 511, 513, 515, 519, 526, 539, 541, 543, 549, 551, 552, 555, 556, 561, 562, 566, 573, 582, 584, 589, 590, 594, 597, 605, 611, 612, 613, 614, 623, 626, 631, 633, 646, 651, 656, 663, 664, 665, 666, 667, 699, 711, 713, 714, 715, 718, 721, 722, 725, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 765, 766, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 790, 791, 796, 801, 803, 808, 810, 812, 820, 821, 825, 826, 828, 830, 848, 849, 852, 853, 855, 857, 866], "ascii": [8, 14, 441, 443, 446, 457, 817, 819, 822, 833], "charact": [8, 9, 14, 20, 24, 88, 89, 99, 237, 322, 349, 440, 441, 446, 447, 449, 450, 453, 457, 526, 573, 605, 695, 816, 817, 818, 822, 823, 825, 826, 829, 833], "print": [8, 9, 11, 13, 19, 105, 125, 137, 138, 153, 237, 354, 526, 559, 605, 737, 775, 866], "tabl": [8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 44, 77, 88, 89, 90, 99, 100, 166, 189, 194, 200, 220, 237], "outlin": 8, "fals": [8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 26, 28, 54, 59, 61, 64, 88, 89, 91, 92, 96, 99, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 149, 152, 153, 156, 160, 161, 163, 166, 167, 176, 182, 184, 190, 194, 197, 198, 201, 203, 206, 211, 212, 214, 215, 216, 218, 222, 237, 247, 248, 259, 261, 265, 267, 280, 295, 296, 297, 298, 299, 300, 326, 337, 338, 339, 340, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 377, 398, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 420, 425, 427, 428, 432, 434, 436, 444, 445, 449, 450, 452, 454, 468, 469, 472, 478, 479, 487, 501, 511, 513, 515, 519, 526, 539, 540, 541, 543, 549, 555, 556, 561, 562, 564, 566, 573, 582, 584, 594, 605, 613, 623, 626, 633, 646, 651, 655, 656, 663, 664, 665, 666, 667, 699, 711, 713, 714, 715, 721, 730, 732, 734, 737, 738, 739, 740, 741, 742, 744, 747, 757, 765, 766, 769, 770, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 791, 796, 801, 803, 808, 810, 812, 820, 821, 825, 826, 828, 830, 848, 849, 852, 853, 855, 857, 858, 866], "revert": 8, "abc": [8, 12, 13, 15, 16, 17, 18, 19, 444, 820], "xyz": [8, 12, 13, 15, 16, 17, 18, 19, 433, 438, 809, 814, 847, 866], "shape": [8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 83, 86, 99, 101, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 176, 178, 180, 181, 183, 184, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 237, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 481, 482, 483, 484, 485, 486, 489, 492, 493, 494, 495, 497, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 515, 516, 517, 518, 519, 526, 539, 541, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 599, 600, 601, 605, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 632, 633, 636, 637, 639, 644, 645, 648, 649, 651, 653, 654, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 714, 715, 717, 718, 719, 720, 721, 723, 726, 727, 729, 732, 734, 737, 738, 739, 740, 741, 742, 744, 746, 749, 756, 764, 765, 766, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 793, 797, 798, 799, 800, 802, 803, 804, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 824, 826, 827, 828, 830, 839, 840, 841, 842, 843, 846, 847, 851, 853, 854, 855, 858, 866], "f64": [8, 10, 12, 13, 15, 16, 17, 18, 19, 54, 56, 58, 63, 101, 110, 118, 119, 121, 122, 124, 125, 129, 130, 133, 136, 145, 151, 152, 156, 157, 164, 167, 168, 183, 184, 185, 198, 202, 205, 206, 212, 214, 215, 216, 217, 218, 221, 222, 237, 244, 251, 252, 253, 254, 255, 256, 275, 286, 288, 292, 293, 300, 303, 304, 326, 337, 338, 339, 340, 341, 342, 350, 355, 362, 364, 365, 366, 368, 369, 374, 375, 379, 380, 381, 386, 389, 390, 393, 394, 397, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 423, 424, 425, 429, 430, 465, 466, 473, 480, 481, 483, 486, 494, 504, 505, 508, 513, 514, 518, 526, 539, 545, 546, 550, 551, 561, 562, 568, 569, 574, 584, 585, 591, 593, 594, 595, 605, 615, 616, 617, 618, 619, 620, 654, 661, 662, 667, 668, 699, 714, 715, 719, 723, 764, 775, 777, 778, 780, 781, 782, 784, 785, 799, 800, 804, 842, 843, 866], "int": [9, 11, 19, 20, 24, 28, 39, 56, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 117, 126, 129, 130, 132, 141, 142, 143, 145, 152, 154, 155, 156, 159, 160, 161, 172, 174, 176, 179, 180, 181, 183, 185, 186, 187, 188, 195, 200, 202, 204, 207, 213, 223, 237, 265, 266, 269, 270, 278, 279, 282, 283, 285, 289, 290, 291, 300, 301, 338, 339, 340, 344, 345, 346, 351, 352, 353, 356, 372, 393, 394, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 421, 426, 430, 437, 441, 446, 448, 450, 451, 457, 458, 459, 462, 463, 464, 468, 473, 478, 481, 485, 489, 490, 491, 492, 499, 503, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 518, 526, 549, 550, 551, 558, 562, 565, 573, 580, 581, 583, 585, 587, 588, 591, 592, 596, 600, 601, 605, 621, 622, 631, 632, 635, 636, 644, 645, 648, 649, 651, 655, 657, 658, 659, 667, 669, 712, 713, 714, 715, 718, 719, 720, 726, 727, 748, 749, 752, 753, 755, 757, 758, 760, 761, 762, 763, 764, 767, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 792, 793, 794, 797, 802, 805, 813, 817, 822, 824, 826, 827, 833, 838, 839, 840, 841, 852, 856, 866], "number": [9, 11, 19, 20, 24, 28, 54, 73, 85, 86, 88, 89, 91, 99, 103, 109, 110, 114, 126, 127, 129, 130, 142, 153, 154, 160, 161, 176, 180, 181, 187, 200, 211, 213, 223, 237, 266, 270, 278, 282, 283, 285, 294, 300, 301, 310, 312, 317, 319, 326, 332, 333, 336, 338, 339, 340, 344, 346, 351, 353, 362, 364, 371, 372, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 421, 440, 443, 450, 451, 462, 468, 485, 499, 513, 517, 526, 548, 549, 550, 551, 558, 565, 573, 580, 581, 587, 600, 601, 605, 632, 636, 644, 648, 649, 667, 669, 679, 681, 690, 692, 699, 705, 706, 709, 712, 713, 714, 715, 718, 720, 727, 736, 749, 757, 758, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 793, 794, 797, 805, 816, 819, 826, 827, 839, 852, 856, 866], "format": [10, 14, 24, 26, 87, 88, 89, 94, 99, 101, 127, 158, 235, 237, 325, 328, 330, 454, 548, 554, 570, 597, 605, 701, 830, 865], "liter": [10, 14, 59, 64, 91, 111, 155, 156, 159, 160, 163, 178, 186, 190, 237, 247, 248, 368, 399, 432, 444, 445, 478, 490, 491, 501, 511, 515, 519, 526, 551, 579, 605, 611, 612, 789, 790, 808, 820, 821, 866], "left": [10, 64, 106, 107, 139, 140, 151, 152, 237, 338, 339, 340, 355, 405, 406, 407, 408, 409, 411, 412, 413, 441, 457, 467, 481, 487, 488, 496, 510, 526, 556, 557, 561, 562, 605, 713, 714, 715, 817, 833, 851, 866], "center": [10, 338, 339, 340, 404, 405, 406, 407, 408, 409, 411, 412, 413, 526, 713, 714, 715, 775, 776, 777, 778, 779, 780, 782, 783, 784, 866], "right": [10, 12, 64, 88, 89, 106, 107, 139, 140, 151, 152, 237, 338, 339, 340, 405, 406, 407, 408, 409, 411, 412, 413, 425, 446, 481, 526, 556, 557, 561, 562, 605, 713, 714, 715, 801, 822, 866], "cell": 10, "align": [10, 54, 457, 833], "keyerror": [10, 14], "recognis": [10, 14, 108], "column_abc": 10, "column_xyz": 10, "If": [11, 24, 26, 27, 28, 45, 60, 63, 64, 78, 80, 81, 82, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 117, 128, 139, 140, 152, 158, 161, 163, 176, 183, 193, 194, 197, 220, 237, 250, 279, 283, 289, 290, 291, 347, 369, 377, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 417, 421, 425, 426, 427, 428, 440, 443, 448, 449, 450, 451, 454, 468, 475, 477, 478, 479, 485, 487, 496, 501, 513, 526, 556, 557, 561, 562, 566, 570, 583, 597, 599, 605, 613, 614, 645, 657, 658, 659, 725, 747, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 791, 801, 802, 816, 819, 824, 825, 826, 827, 830, 845, 849, 852, 857, 866], "rang": [11, 63, 64, 98, 126, 139, 237, 307, 319, 323, 324, 325, 330, 332, 355, 478, 483, 490, 491, 526, 556, 605, 676, 692, 696, 697, 698, 703, 705, 712, 764, 866], "100": [11, 88, 89, 99, 103, 457, 478, 776, 777, 779, 866], "98": [11, 145, 237, 427, 428, 463, 468, 526], "99": [11, 129, 130, 145, 148, 237, 245, 344, 346, 427, 428, 463, 468, 481, 526, 550, 551, 605, 711, 718, 866], "imove": [12, 331, 338, 339, 340, 405, 406, 408, 412, 526, 704, 713, 714, 715, 776, 777, 779, 783, 866], "inlin": 12, "parenthes": 12, "below": [13, 90, 100, 124, 138, 237, 355, 519, 526, 546, 605], "when": [13, 17, 28, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 92, 96, 99, 102, 103, 110, 111, 113, 117, 125, 126, 128, 130, 133, 139, 165, 174, 178, 237, 289, 290, 291, 338, 339, 340, 346, 377, 383, 454, 487, 496, 526, 551, 556, 579, 605, 613, 657, 658, 659, 712, 713, 714, 715, 720, 789, 790, 866], "displai": [13, 17], "ascii_ful": 14, "ascii_no_bord": 14, "ascii_borders_onli": 14, "ascii_borders_only_condens": 14, "ascii_horizontal_onli": 14, "ascii_markdown": 14, "utf8_ful": 14, "utf8_full_condens": 14, "utf8_no_bord": 14, "utf8_borders_onli": 14, "utf8_horizontal_onli": 14, "noth": [14, 433, 437, 438, 439, 809, 813, 814, 815], "style": [14, 166, 237], "border": 14, "line": [14, 88, 89, 91, 99, 137, 237], "dens": [14, 137, 237, 398, 526, 769, 866], "row": [14, 19, 24, 26, 28, 54, 55, 57, 70, 73, 76, 79, 80, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 109, 110, 117, 124, 128, 131, 133, 137, 139, 141, 142, 147, 149, 152, 153, 154, 158, 161, 183, 187, 188, 191, 198, 200, 207, 210, 213, 223, 237, 250, 343, 349, 353, 372, 393, 402, 426, 462, 487, 488, 496, 499, 503, 506, 510, 517, 526, 541, 546, 549, 552, 553, 556, 558, 562, 563, 565, 566, 570, 583, 587, 588, 589, 596, 599, 600, 601, 605, 613, 717, 727, 749, 764, 773, 802, 839, 866], "space": 14, "horizont": [14, 62, 133, 144, 200, 237, 484, 487, 488, 489, 493, 496, 503, 506, 510, 516], "markdown": 14, "compat": [14, 28, 100, 237, 605], "same": [14, 45, 54, 61, 106, 109, 117, 198, 210, 237, 244, 249, 250, 343, 349, 404, 405, 406, 407, 408, 409, 411, 412, 413, 482, 526, 589, 599, 605, 609, 613, 614, 717, 775, 776, 777, 778, 779, 780, 782, 783, 784, 858, 866], "No": 14, "The": [14, 28, 39, 46, 54, 60, 85, 88, 96, 98, 99, 100, 117, 139, 140, 141, 146, 152, 174, 199, 201, 210, 220, 237, 250, 283, 285, 307, 319, 322, 323, 325, 330, 332, 344, 349, 351, 352, 377, 398, 401, 404, 405, 406, 407, 408, 409, 411, 412, 413, 425, 428, 431, 434, 435, 440, 441, 446, 457, 479, 520, 522, 526, 527, 530, 531, 532, 539, 555, 556, 557, 558, 560, 562, 565, 566, 573, 590, 599, 605, 656, 676, 692, 695, 696, 698, 703, 705, 718, 726, 729, 769, 775, 776, 777, 778, 779, 780, 782, 783, 784, 801, 807, 810, 811, 816, 817, 822, 833, 859, 862, 866, 869, 870, 871], "one": [14, 54, 70, 111, 130, 131, 137, 139, 140, 158, 166, 174, 192, 196, 208, 209, 220, 237, 245, 346, 368, 404, 427, 428, 458, 463, 475, 503, 506, 515, 516, 526, 545, 551, 552, 556, 557, 570, 595, 605, 613, 720, 775, 834, 866], "more": [14, 26, 28, 54, 76, 90, 96, 100, 110, 111, 117, 138, 153, 158, 161, 164, 174, 176, 198, 210, 237, 250, 289, 290, 291, 368, 369, 377, 415, 425, 469, 503, 506, 516, 526, 555, 570, 589, 599, 605, 614, 657, 658, 659, 747, 786, 801, 853, 866, 873], "semigraph": 14, "box": [14, 117, 237], "draw": [14, 19, 20], "found": [14, 24, 71, 125, 237, 439, 454, 459, 815], "unicod": 14, "block": [14, 596, 605, 789, 790, 866], "http": [14, 437, 813, 873], "en": 14, "wikipedia": 14, "org": 14, "wiki": 14, "drawing_charact": 14, "box_draw": 14, "hide": [15, 16, 17, 18], "etc": [15, 80, 82, 88, 90, 92, 96, 100, 102, 104, 478, 789, 790, 866], "inform": [17, 60, 79, 90, 100, 164, 237, 289, 290, 291, 369, 425, 526, 573, 605, 657, 658, 659, 747, 801, 866], "separ": [18, 24, 197, 237, 271, 349, 484, 487, 488, 526, 637], "between": [18, 26, 62, 94, 108, 109, 110, 111, 168, 221, 237, 271, 286, 302, 356, 393, 397, 409, 431, 486, 508, 509, 513, 526, 574, 605, 637, 651, 670, 764, 768, 780, 807, 866], "set_tbl_column_data_type_inlin": 18, "max": [19, 28, 110, 111, 121, 130, 139, 140, 166, 237, 289, 290, 296, 346, 392, 398, 405, 417, 451, 526, 551, 556, 557, 598, 605, 657, 658, 663, 668, 720, 769, 776, 791, 827, 866], "both": [19, 24, 45, 64, 139, 140, 151, 152, 174, 237, 249, 356, 405, 406, 407, 408, 409, 411, 412, 413, 442, 447, 453, 526, 556, 557, 561, 562, 605], "element": [19, 86, 111, 114, 251, 252, 253, 254, 255, 256, 267, 292, 293, 295, 296, 297, 298, 299, 300, 342, 352, 360, 375, 393, 398, 401, 416, 422, 423, 424, 429, 450, 451, 465, 466, 468, 526, 614, 615, 616, 617, 618, 619, 620, 633, 661, 662, 663, 664, 665, 666, 667, 716, 721, 737, 751, 764, 769, 787, 798, 799, 800, 804, 805, 826, 827, 842, 843, 852, 853, 856, 866], "width": [20, 88, 89, 237, 441, 446, 457, 605, 817, 822, 833], "char": [20, 45, 443, 819], "enabl": [21, 417, 526, 791, 866], "addit": [21, 90, 100, 108, 109], "verbos": 21, "debug": [21, 541, 549, 566, 605], "log": [21, 56, 337, 468, 526, 711, 852, 866], "if_set": 22, "dict": [22, 28, 46, 55, 57, 60, 78, 79, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 110, 163, 164, 170, 177, 190, 191, 237, 576, 578, 605, 722, 866], "none": [22, 23, 24, 25, 26, 27, 28, 31, 40, 44, 54, 63, 64, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 121, 124, 129, 130, 137, 139, 140, 141, 146, 151, 152, 153, 156, 158, 161, 162, 174, 176, 181, 183, 190, 192, 197, 198, 199, 200, 201, 206, 237, 246, 249, 250, 260, 269, 279, 283, 285, 289, 290, 291, 294, 303, 304, 325, 330, 335, 338, 339, 340, 341, 344, 345, 346, 351, 352, 355, 362, 363, 364, 365, 366, 371, 377, 391, 393, 399, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 419, 420, 421, 422, 426, 431, 432, 434, 435, 436, 439, 440, 441, 442, 443, 446, 447, 448, 450, 451, 452, 453, 454, 457, 458, 459, 467, 475, 477, 478, 481, 484, 485, 491, 492, 494, 495, 501, 502, 511, 514, 515, 518, 526, 539, 540, 546, 550, 551, 556, 557, 560, 561, 562, 564, 566, 570, 581, 582, 583, 584, 589, 590, 594, 595, 597, 599, 605, 614, 621, 622, 635, 645, 649, 656, 657, 668, 670, 698, 703, 708, 711, 713, 714, 715, 718, 719, 720, 725, 726, 728, 729, 741, 742, 747, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 794, 797, 798, 801, 802, 805, 807, 808, 810, 811, 812, 815, 816, 817, 818, 819, 822, 823, 824, 826, 827, 828, 829, 830, 844, 847, 848, 851, 856, 857, 866], "show": [22, 124, 137, 153, 162, 237, 546, 573, 582, 605], "variabl": [22, 83, 158, 192, 237, 570, 605, 846, 866], "chang": [22, 54, 63, 88, 89, 101, 200, 201, 237, 300, 325, 393, 405, 406, 407, 408, 409, 411, 412, 413, 526, 667, 675, 698, 764, 796, 866], "restrict": [22, 451, 827], "dictionari": [22, 78, 79, 82, 88, 89, 93, 97, 99, 163, 190, 191, 237, 668, 722, 866], "includ": [22, 24, 60, 90, 100, 110, 126, 139, 197, 200, 237, 326, 356, 449, 450, 487, 526, 556, 605, 699, 712, 825, 826, 857, 866], "those": [22, 398, 526, 769, 866], "_have_": 22, "been": [22, 240, 398, 526, 769, 866], "set_stat": 22, "all_stat": 22, "file": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 128, 237, 549, 575, 597, 605, 613, 866], "binaryio": [23, 25, 87, 88, 91, 92, 93, 96, 97, 237], "bytesio": [23, 24, 25, 28, 87, 88, 89, 91, 92, 96, 237], "path": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 237, 417, 439, 526, 575, 597, 605, 791, 815, 866], "compress": [23, 25, 28, 237, 605], "avrocompress": [23, 237], "uncompress": [23, 25, 28, 92, 102, 237, 605], "write": [23, 24, 25, 26, 28, 237, 289, 290, 291, 526, 564, 582, 597, 605, 657, 658, 659, 866], "apach": [23, 28, 87, 237], "avro": [23, 87, 237, 535], "should": [23, 24, 25, 26, 27, 28, 86, 108, 109, 111, 114, 117, 139, 152, 210, 237, 245, 250, 267, 287, 300, 334, 362, 364, 404, 405, 406, 407, 408, 409, 411, 412, 413, 416, 425, 447, 453, 501, 526, 545, 556, 561, 562, 566, 582, 597, 599, 605, 614, 633, 653, 667, 707, 775, 776, 777, 778, 779, 780, 782, 783, 784, 787, 801, 818, 823, 829, 866], "written": [23, 24, 25, 26, 27, 28, 237, 597, 605], "snappi": [23, 28, 237, 605], "deflat": [23, 237], "import": [23, 24, 25, 28, 31, 64, 77, 80, 81, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 121, 137, 139, 152, 194, 200, 201, 237, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 492, 501, 556, 562, 566, 605, 661, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 731, 734, 738, 739, 740, 775, 799, 842, 866], "pathlib": [23, 24, 25, 26, 27, 28, 87, 91, 92, 93, 94, 95, 97, 99, 102, 103, 237, 575, 597, 605], "foo": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 151, 154, 155, 156, 157, 159, 162, 163, 164, 166, 168, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 197, 199, 202, 203, 204, 208, 220, 237, 246, 265, 268, 269, 272, 273, 289, 290, 291, 322, 349, 353, 354, 394, 402, 418, 419, 431, 433, 434, 435, 438, 442, 447, 449, 451, 453, 455, 456, 462, 464, 475, 478, 480, 482, 485, 486, 495, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 517, 518, 519, 526, 542, 545, 546, 547, 552, 559, 560, 561, 576, 578, 579, 584, 589, 590, 592, 594, 595, 597, 605, 637, 657, 695, 809, 810, 811, 814, 827, 866], "bar": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 142, 144, 145, 146, 148, 151, 154, 155, 156, 157, 159, 162, 163, 164, 166, 168, 170, 171, 172, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 199, 202, 203, 208, 220, 237, 246, 273, 354, 425, 434, 435, 449, 451, 475, 480, 482, 485, 486, 495, 499, 503, 504, 505, 506, 507, 508, 512, 513, 514, 517, 518, 519, 526, 542, 545, 546, 547, 552, 559, 560, 561, 576, 578, 579, 584, 589, 590, 592, 597, 605, 637, 801, 810, 811, 827, 866], "8": [23, 24, 25, 26, 27, 28, 38, 51, 53, 54, 55, 57, 58, 62, 105, 109, 110, 117, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 137, 142, 144, 151, 155, 156, 157, 159, 164, 168, 170, 172, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 193, 194, 195, 200, 202, 203, 206, 237, 249, 260, 266, 267, 294, 300, 303, 304, 355, 371, 392, 394, 395, 402, 403, 406, 407, 409, 411, 413, 420, 426, 441, 446, 454, 460, 464, 480, 485, 486, 489, 493, 495, 499, 503, 504, 505, 506, 507, 508, 513, 514, 515, 516, 517, 518, 526, 542, 545, 546, 547, 548, 552, 558, 561, 565, 566, 573, 576, 578, 579, 584, 587, 588, 593, 594, 597, 605, 632, 633, 667, 681, 764, 775, 778, 780, 781, 782, 784, 817, 822, 830, 866], "9": [23, 24, 25, 28, 54, 62, 117, 133, 140, 142, 146, 164, 178, 187, 200, 203, 205, 206, 208, 222, 237, 249, 260, 277, 280, 294, 299, 303, 304, 307, 323, 332, 333, 355, 360, 368, 371, 392, 402, 404, 406, 412, 422, 426, 464, 481, 483, 515, 526, 557, 558, 560, 565, 579, 584, 587, 593, 594, 605, 676, 685, 687, 693, 698, 699, 703, 705, 717, 737, 775, 783, 785, 798, 866], "ham": [23, 24, 25, 28, 83, 120, 122, 123, 124, 125, 131, 132, 134, 141, 142, 144, 151, 155, 156, 157, 159, 162, 164, 168, 170, 172, 174, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 192, 193, 194, 195, 202, 203, 237, 482, 542, 545, 546, 547, 552, 561, 576, 578, 579, 584, 589, 595, 605], "d": [23, 24, 25, 28, 45, 62, 101, 121, 137, 141, 142, 145, 151, 154, 187, 189, 200, 203, 206, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 237, 309, 349, 420, 433, 438, 450, 454, 481, 526, 561, 584, 594, 605, 678, 701, 809, 814, 826, 830], "e": [23, 24, 25, 28, 45, 88, 89, 91, 92, 96, 102, 104, 121, 137, 142, 154, 187, 189, 200, 206, 237, 337, 341, 349, 374, 417, 420, 425, 494, 526, 564, 594, 605, 711, 788, 791, 801, 849, 866], "dirpath": [23, 24, 25, 28, 99, 237], "new_fil": [23, 24, 25, 28, 237], "has_head": [24, 88, 89, 91, 99, 237], "sep": [24, 85, 88, 89, 99, 237, 484], "quot": [24, 88, 89, 99, 237], "batch_siz": [24, 88, 89, 103, 237], "1024": [24, 28, 88, 89, 103, 237, 605], "datetime_format": [24, 237], "date_format": [24, 237], "time_format": [24, 237], "float_precis": [24, 237], "null_valu": [24, 88, 89, 99, 237], "_io": [24, 87, 91, 92, 237], "comma": [24, 237], "csv": [24, 88, 89, 91, 99, 237, 535, 598], "result": [24, 26, 27, 54, 78, 80, 82, 98, 99, 101, 102, 104, 111, 128, 139, 150, 161, 181, 208, 237, 338, 339, 340, 369, 402, 404, 405, 406, 407, 408, 409, 411, 412, 413, 417, 419, 449, 450, 478, 487, 488, 489, 502, 516, 526, 538, 556, 566, 573, 581, 597, 605, 613, 713, 714, 715, 747, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 791, 794, 825, 826, 849, 866], "instead": [24, 26, 27, 86, 96, 110, 114, 117, 139, 161, 163, 237, 259, 261, 440, 478, 503, 506, 516, 526, 550, 555, 556, 597, 605, 623, 626, 789, 790, 816, 866], "whether": [24, 59, 64, 80, 82, 111, 139, 140, 237, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 605], "header": [24, 28, 88, 89, 91, 99, 125, 166, 197, 237, 605], "field": [24, 46, 199, 237, 283, 450, 451, 459, 487, 488, 590, 605, 649, 826, 827, 836], "symbol": [24, 237], "byte": [24, 39, 88, 89, 91, 92, 93, 96, 97, 99, 126, 237, 440, 443, 605, 712, 816, 819, 866], "process": [24, 237, 605], "per": [24, 109, 110, 137, 161, 162, 217, 219, 221, 224, 225, 226, 227, 228, 229, 230, 231, 237, 267, 269, 633, 635], "thread": [24, 85, 88, 89, 98, 112, 237, 267, 633], "specifi": [24, 54, 64, 71, 78, 80, 82, 110, 126, 130, 237, 338, 339, 340, 346, 401, 441, 446, 526, 551, 605, 712, 713, 714, 715, 720, 817, 822, 866], "defin": [24, 31, 64, 108, 109, 110, 117, 139, 140, 161, 165, 210, 237, 250, 405, 406, 407, 408, 409, 411, 412, 413, 477, 501, 526, 556, 557, 572, 599, 605, 614, 866], "chrono": [24, 237, 328, 454, 701, 830], "rust": [24, 28, 72, 92, 96, 117, 210, 237, 250, 526, 599], "crate": [24, 237], "fraction": [24, 106, 107, 176, 237, 326, 393, 415, 454, 526, 699, 764, 786, 866], "second": [24, 64, 139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 454, 479, 491, 492, 526, 556, 557, 562, 605, 695, 698, 703], "precis": [24, 237, 305, 454, 674], "infer": [24, 79, 80, 82, 88, 89, 91, 99, 103, 108, 117, 237, 402, 454, 526, 773, 866], "maximum": [24, 88, 89, 99, 109, 110, 111, 155, 237, 262, 289, 290, 379, 389, 398, 503, 526, 567, 605, 628, 657, 658, 682, 752, 760, 765, 769, 866], "timeunit": [24, 31, 32, 64, 237, 305, 329, 334, 674, 702, 707, 844, 866], "frame": [24, 54, 91, 110, 117, 161, 165, 194, 200, 237, 572, 605], "datetim": [24, 39, 64, 81, 121, 137, 139, 140, 152, 201, 237, 265, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 356, 405, 406, 407, 408, 409, 411, 412, 413, 454, 467, 481, 492, 501, 506, 526, 556, 557, 562, 605, 631, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 731, 752, 755, 760, 761, 790, 830, 844, 851, 866], "decim": [24, 39, 237, 414, 526, 785, 866], "place": [24, 123, 144, 145, 171, 180, 181, 184, 203, 237, 259, 261, 271, 278, 418, 419, 526, 580, 581, 584, 605, 623, 626, 637, 644, 770, 772, 793, 794, 803, 866], "appli": [24, 59, 62, 99, 108, 110, 111, 124, 133, 165, 208, 237, 307, 310, 312, 313, 315, 317, 319, 320, 323, 324, 326, 332, 333, 336, 339, 340, 377, 392, 404, 405, 406, 408, 412, 454, 475, 478, 487, 488, 496, 502, 510, 526, 546, 558, 565, 566, 572, 605, 676, 679, 681, 685, 687, 690, 692, 693, 696, 697, 699, 705, 706, 709, 714, 715, 775, 776, 777, 779, 783, 830, 866], "float64": [24, 86, 110, 114, 125, 126, 133, 137, 177, 237, 251, 252, 253, 254, 255, 256, 286, 292, 293, 326, 341, 362, 364, 423, 424, 465, 466, 481, 482, 494, 526, 547, 578, 605, 699], "datatyp": [24, 26, 39, 46, 52, 84, 86, 88, 89, 91, 93, 97, 111, 114, 133, 177, 237, 286, 341, 420, 454, 467, 477, 478, 482, 494, 501, 502, 526, 535, 547, 578, 597, 605, 614, 651, 668, 710, 728, 731, 743, 745, 795, 830, 851, 866], "repres": [24, 40, 52, 64, 77, 78, 80, 81, 82, 237, 362, 364, 482, 501, 526, 790, 805, 856, 866], "null": [24, 54, 62, 79, 88, 89, 99, 101, 121, 124, 130, 133, 134, 146, 151, 156, 157, 162, 168, 180, 181, 184, 185, 186, 190, 199, 202, 237, 246, 249, 259, 261, 266, 268, 269, 272, 278, 283, 285, 289, 290, 291, 294, 301, 303, 304, 308, 311, 314, 316, 318, 321, 327, 338, 339, 340, 341, 344, 345, 346, 347, 351, 355, 362, 363, 364, 365, 366, 371, 391, 393, 399, 404, 405, 406, 407, 408, 409, 411, 412, 413, 418, 419, 420, 422, 427, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 446, 448, 450, 451, 452, 457, 467, 474, 475, 481, 483, 484, 494, 501, 515, 526, 546, 551, 560, 561, 580, 581, 584, 590, 595, 597, 605, 614, 623, 626, 632, 644, 649, 657, 669, 672, 677, 680, 686, 688, 691, 694, 700, 713, 714, 715, 718, 720, 725, 741, 742, 763, 764, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 788, 793, 794, 798, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 822, 824, 826, 827, 828, 849, 851, 857, 866], "empti": [24, 69, 91, 118, 119, 148, 158, 237, 512, 539, 540, 570, 605, 656, 660, 733, 866], "ipccompress": [25, 237], "arrow": [25, 65, 77, 92, 102, 189, 220, 237, 845, 849, 866], "ipc": [25, 92, 93, 101, 102, 237, 535], "binari": [25, 237], "stream": [25, 61, 237, 541, 543, 549, 573, 582, 605], "feather": [25, 92, 102, 237, 535], "lz4": [25, 28, 237, 605], "zstd": [25, 28, 237, 605], "pretti": [26, 237], "row_ori": [26, 237], "json_lin": [26, 94, 237], "to_str": [26, 237, 597, 605], "io": [26, 27, 94, 95, 237, 575, 597, 605, 873], "iobas": [26, 27, 94, 95, 237, 575, 597, 605], "serial": [26, 27, 237], "represent": [26, 27, 237, 287, 307, 310, 312, 313, 315, 317, 319, 320, 323, 324, 326, 332, 333, 336, 467, 526, 543, 544, 564, 605, 653, 676, 679, 681, 685, 687, 690, 692, 693, 696, 697, 699, 705, 706, 709, 851, 866], "orient": [26, 55, 57, 80, 82, 237], "slower": [26, 80, 82, 117, 163, 201, 210, 237, 250, 526, 599], "common": [26, 237], "deprec": [26, 61, 94, 237, 240, 597, 605], "argument": [26, 28, 61, 88, 90, 94, 96, 100, 139, 140, 156, 164, 165, 166, 186, 194, 201, 237, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 572, 597, 605, 698, 703, 866], "toggl": [26, 94, 113, 237, 454, 830], "ndjson": [26, 94, 237], "ignor": [26, 61, 110, 111, 156, 186, 237, 266, 301, 389, 390, 526, 597, 605, 632, 669, 760, 761, 866], "write_ndjson": [26, 237], "newlin": [27, 95, 103, 237], "delimit": [27, 88, 89, 95, 99, 103, 237, 431, 807], "parquetcompress": [28, 237], "compression_level": [28, 237, 605], "statist": [28, 88, 89, 121, 237, 339, 340, 369, 405, 406, 407, 408, 409, 410, 411, 412, 413, 425, 526, 605, 668, 714, 715, 747, 781, 801, 866], "row_group_s": [28, 237, 605], "use_pyarrow": [28, 88, 92, 96, 237, 605, 848, 866], "pyarrow_opt": [28, 90, 96, 100, 237], "object": [28, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 109, 110, 111, 153, 194, 237, 501, 535, 540, 555, 559, 564, 575, 605, 627, 652, 673, 806, 845, 866], "parquet": [28, 96, 97, 104, 237, 535, 605], "gzip": [28, 237, 605], "lzo": [28, 237, 605], "brotli": [28, 237, 605], "choos": [28, 237, 605], "good": [28, 237, 605], "perform": [28, 69, 88, 89, 92, 96, 99, 102, 103, 104, 117, 139, 140, 152, 169, 210, 237, 250, 526, 556, 557, 562, 596, 599, 605], "fast": [28, 237, 417, 526, 605, 791, 866], "decompress": [28, 237, 605], "backward": [28, 130, 152, 237, 285, 346, 526, 551, 562, 605, 720, 866], "guarante": [28, 88, 89, 237, 549, 605], "deal": [28, 237, 398, 454, 526, 605, 769, 830, 866], "older": [28, 237, 605], "reader": [28, 85, 88, 89, 92, 96, 237, 536, 605], "level": [28, 99, 102, 103, 104, 110, 117, 133, 161, 237, 347, 526, 558, 565, 605], "higher": [28, 168, 221, 237, 397, 409, 509, 526, 574, 605, 768, 780, 866], "mean": [28, 83, 88, 89, 96, 99, 121, 130, 166, 192, 237, 343, 346, 349, 406, 425, 437, 480, 526, 551, 605, 668, 717, 720, 725, 777, 801, 813, 866], "smaller": [28, 126, 237, 549, 605, 712, 866], "disk": [28, 237, 582, 605], "min": [28, 110, 111, 121, 130, 139, 140, 166, 237, 289, 291, 297, 346, 398, 408, 512, 526, 551, 556, 557, 605, 657, 659, 664, 668, 720, 769, 779, 866], "11": [28, 138, 140, 237, 303, 304, 322, 325, 330, 355, 393, 412, 426, 457, 482, 516, 526, 541, 555, 557, 558, 565, 573, 587, 605, 614, 695, 698, 703, 775, 866], "22": [28, 237, 325, 330, 334, 454, 482, 605, 698, 703, 707, 830], "extra": [28, 88, 90, 91, 92, 96, 100, 102, 104, 128, 163, 237, 605, 613, 866], "comput": [28, 61, 62, 66, 126, 152, 198, 221, 237, 244, 251, 252, 253, 254, 255, 256, 274, 275, 276, 292, 293, 295, 296, 297, 298, 299, 302, 337, 342, 369, 374, 375, 387, 393, 396, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 422, 423, 424, 425, 429, 465, 466, 486, 493, 508, 513, 526, 559, 561, 562, 589, 595, 605, 609, 615, 616, 617, 618, 619, 620, 640, 641, 642, 661, 662, 663, 664, 665, 666, 670, 711, 712, 716, 747, 750, 751, 756, 764, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 798, 799, 800, 801, 804, 842, 843, 866], "size": [28, 88, 89, 109, 110, 111, 112, 126, 139, 200, 237, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 478, 526, 556, 605, 712, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 866], "group": [28, 138, 139, 140, 161, 163, 166, 200, 201, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 245, 250, 267, 392, 427, 428, 437, 463, 477, 526, 555, 556, 557, 598, 599, 600, 601, 605, 633, 813], "chunk": [28, 85, 88, 89, 99, 102, 103, 104, 110, 111, 128, 160, 237, 249, 399, 526, 605, 613, 655, 724, 757, 770, 845, 866], "reduc": [28, 88, 89, 96, 99, 102, 103, 104, 215, 216, 218, 222, 237, 420, 496, 526, 605, 753, 767, 795, 838, 866], "memori": [28, 62, 77, 80, 81, 82, 88, 89, 92, 96, 99, 102, 103, 104, 117, 128, 182, 210, 220, 237, 250, 399, 420, 526, 599, 605, 613, 770, 795, 796, 866], "pressur": [28, 96, 103, 104, 237, 420, 526, 605, 795, 866], "improv": [28, 92, 102, 237, 605], "speed": [28, 237, 605], "minimum": [28, 109, 110, 111, 133, 159, 237, 289, 291, 338, 339, 340, 386, 390, 398, 506, 526, 571, 605, 657, 659, 689, 713, 714, 715, 761, 766, 769, 866], "64": [28, 34, 37, 50, 56, 58, 237, 394, 526, 605, 764, 866], "implement": [28, 100, 117, 210, 237, 250, 526, 599, 789, 790, 866], "v": [28, 63, 126, 237, 416, 526, 787, 866], "At": [28, 237], "moment": [28, 164, 237, 369, 425, 526, 747, 801, 866], "pass": [28, 54, 64, 78, 91, 100, 109, 110, 111, 164, 165, 237, 309, 354, 526, 559, 566, 572, 582, 605, 614, 678, 866], "pyarrow": [28, 77, 81, 88, 90, 92, 96, 100, 101, 105, 189, 193, 194, 237, 536, 845, 848, 849, 866], "write_t": [28, 237], "base": [29, 124, 131, 139, 140, 220, 237, 337, 374, 375, 503, 506, 526, 535, 546, 552, 556, 557, 605, 711, 750, 751, 858, 866], "calendar": [30, 31, 139, 140, 152, 201, 237, 312, 322, 325, 330, 336, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 681, 695, 698, 703, 709], "date": [31, 39, 54, 64, 88, 89, 99, 101, 121, 137, 139, 140, 152, 194, 237, 265, 305, 307, 308, 309, 310, 311, 312, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 356, 405, 406, 407, 408, 409, 411, 412, 413, 454, 467, 481, 506, 526, 535, 556, 557, 562, 605, 631, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 731, 752, 755, 760, 761, 790, 830, 851, 866], "time": [31, 32, 39, 60, 61, 64, 99, 128, 139, 140, 152, 201, 237, 264, 265, 283, 305, 306, 309, 322, 329, 331, 334, 335, 454, 467, 468, 483, 484, 490, 491, 492, 511, 526, 535, 541, 556, 557, 562, 573, 605, 613, 630, 674, 675, 678, 695, 702, 704, 707, 708, 830, 844, 851, 852, 866], "time_unit": [31, 32, 64, 334, 707, 866], "u": [31, 32, 64, 305, 309, 329, 334, 454, 511, 674, 678, 702, 707, 844, 866], "time_zon": [31, 64], "m": [31, 32, 64, 163, 237, 305, 309, 329, 334, 454, 492, 674, 678, 701, 702, 707, 830, 844, 866], "unit": [31, 32, 64, 110, 111, 126, 237, 305, 309, 329, 334, 376, 383, 471, 526, 573, 605, 674, 678, 702, 707, 712, 844, 866], "timezon": [31, 64, 454, 830], "zoneinfo": 31, "run": [31, 61, 117, 153, 210, 237, 250, 267, 300, 511, 512, 526, 541, 549, 573, 582, 599, 605, 633, 667, 866, 872], "available_timezon": 31, "full": [31, 60, 88, 89, 90, 99, 100], "attribut": [31, 32, 39, 108, 237, 520, 522, 527, 530, 531, 532, 605, 859, 862, 866, 869, 870, 871], "delta": [32, 90, 100, 508, 513, 535, 805, 856, 866], "32": [33, 36, 49, 56, 105, 140, 150, 237, 420, 526, 557, 605, 670, 696, 764, 780, 866], "bit": [33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 400, 432, 526, 771, 808, 866], "float": [33, 34, 39, 63, 101, 106, 107, 108, 110, 111, 126, 129, 152, 168, 176, 181, 221, 237, 265, 288, 289, 290, 291, 303, 304, 326, 337, 338, 339, 340, 344, 345, 350, 355, 356, 358, 361, 362, 364, 365, 366, 374, 379, 386, 389, 390, 394, 397, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 419, 480, 481, 489, 503, 504, 505, 506, 509, 511, 514, 516, 518, 526, 550, 562, 574, 581, 582, 605, 631, 651, 654, 657, 658, 659, 670, 699, 711, 712, 713, 714, 715, 718, 719, 723, 736, 747, 750, 752, 753, 754, 755, 760, 761, 767, 768, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 789, 790, 801, 805, 838, 856, 866], "point": [33, 34, 100, 110, 111, 129, 139, 153, 176, 237, 288, 303, 304, 326, 345, 350, 362, 364, 414, 415, 526, 550, 556, 566, 605, 654, 699, 719, 723, 736, 785, 786, 866], "16": [35, 48, 56, 105, 139, 140, 205, 206, 237, 355, 406, 492, 493, 526, 556, 557, 582, 593, 594, 605, 698, 703, 764, 799, 842, 866], "sign": [35, 36, 37, 38, 322, 400, 457, 526, 695, 771, 833, 866], "integ": [35, 36, 37, 38, 48, 49, 50, 51, 109, 110, 139, 140, 237, 288, 326, 350, 400, 405, 406, 407, 408, 409, 410, 411, 412, 413, 478, 501, 526, 556, 557, 605, 621, 622, 654, 699, 723, 771, 781, 790, 866], "inner": [39, 45, 151, 237, 271, 302, 526, 561, 597, 605, 637, 670, 728, 866], "union": [39, 46, 54, 61, 62, 78, 84, 122, 124, 127, 138, 155, 156, 158, 159, 161, 163, 170, 178, 184, 186, 197, 199, 201, 206, 208, 237, 341, 360, 475, 476, 478, 479, 481, 482, 483, 484, 488, 489, 494, 502, 503, 506, 510, 512, 515, 516, 526, 541, 548, 549, 555, 573, 579, 582, 584, 594, 598, 605, 670, 737, 790, 866], "datatypeclass": [39, 46, 84, 478, 482], "timedelta": [39, 64, 139, 140, 201, 237, 307, 309, 310, 317, 319, 322, 323, 324, 325, 326, 329, 330, 332, 333, 336, 405, 406, 407, 408, 409, 411, 412, 413, 481, 526, 556, 557, 605, 682, 684, 689, 695, 698, 703, 752, 755, 760, 761, 866], "tupl": [39, 98, 117, 174, 175, 179, 237, 356, 402, 526, 573, 582, 605, 773, 792, 866], "nest": [39, 45, 126, 237, 535, 712, 866], "arrai": [39, 77, 80, 88, 89, 126, 189, 193, 237, 264, 273, 274, 275, 276, 277, 280, 281, 289, 290, 291, 295, 296, 297, 298, 299, 375, 405, 406, 408, 411, 412, 413, 417, 433, 435, 437, 438, 439, 483, 493, 526, 630, 639, 640, 641, 642, 643, 646, 647, 657, 658, 659, 663, 664, 665, 666, 670, 712, 751, 776, 777, 779, 782, 783, 784, 791, 796, 809, 811, 813, 814, 815, 845, 849, 857, 866], "within": [39, 106, 107, 152, 237, 562, 605], "wrap": [41, 100], "arbitrari": [41, 110], "python": [41, 64, 88, 89, 105, 117, 175, 210, 237, 250, 377, 477, 526, 599, 614, 682, 683, 684, 689, 848, 866], "queri": [42, 61, 92, 98, 99, 102, 103, 104, 128, 153, 165, 237, 283, 439, 541, 543, 544, 549, 558, 565, 573, 582, 596, 599, 605, 613, 815, 866, 872], "pars": [42, 88, 89, 91, 99, 102, 103, 454, 830], "given": [42, 44, 54, 63, 86, 88, 89, 99, 108, 109, 110, 111, 114, 117, 126, 165, 174, 180, 181, 237, 265, 278, 329, 337, 344, 374, 398, 401, 402, 405, 406, 408, 411, 412, 413, 418, 419, 438, 454, 468, 475, 526, 572, 580, 581, 605, 614, 631, 644, 702, 711, 712, 718, 750, 762, 769, 773, 776, 777, 779, 782, 783, 784, 793, 794, 814, 830, 852, 858, 866], "transform": [42, 117, 237, 377, 455, 456, 526], "lf": [44, 547, 552, 578, 592, 605], "under": [44, 55, 56, 57, 58, 520, 522, 527, 530, 531, 532, 859, 862, 869, 870, 871], "add": [44, 117, 128, 139, 206, 207, 237, 395, 460, 492, 519, 526, 556, 561, 593, 594, 595, 596, 605, 613, 866], "context": [45, 161, 237, 245, 250, 267, 347, 382, 427, 428, 472, 477, 485, 495, 512, 525, 526, 595, 605, 633], "manag": 45, "categor": [45, 83, 113, 151, 237, 287, 467, 526, 652, 653, 851, 866], "temporarili": [45, 139, 140, 237, 556, 557, 605], "cach": [45, 61, 92, 99, 102, 104, 113, 405, 406, 407, 408, 409, 411, 412, 413, 454, 526, 541, 549, 573, 582, 605, 830], "categori": [45, 63, 113, 287, 653], "until": [45, 153, 237], "finish": [45, 66, 128, 237, 613, 866], "global": [45, 110, 113], "invalid": [45, 88, 89, 99, 434, 439, 810, 815], "outermost": 45, "exit": 45, "df1": [45, 54, 62, 106, 128, 134, 203, 237], "color": [45, 210, 599], "red": [45, 210, 599], "green": [45, 210, 599], "blue": 45, "orang": [45, 120, 211, 212, 214, 215, 216, 218, 221, 222, 237], "uint8": [45, 108, 298, 299, 461, 526, 665, 666, 838, 866], "df2": [45, 54, 62, 106, 128, 134, 203, 237], "yellow": 45, "black": [45, 117, 237], "join": [45, 54, 61, 152, 237, 355, 392, 526, 541, 549, 562, 573, 582, 595, 605], "succe": [45, 88, 89, 99], "df_join": 45, "how": [45, 62, 79, 82, 98, 124, 151, 200, 237, 266, 287, 301, 355, 401, 434, 526, 546, 561, 605, 632, 653, 669, 810, 866], "cat": [45, 63, 432, 455, 456, 467, 484, 522, 526, 808, 862], "u8": [45, 83, 192, 237, 846, 866], "sequenc": [46, 54, 61, 62, 78, 79, 80, 82, 85, 109, 110, 111, 122, 124, 127, 128, 138, 139, 140, 151, 152, 158, 161, 163, 165, 166, 178, 184, 192, 197, 198, 199, 200, 201, 206, 208, 237, 341, 360, 377, 475, 476, 477, 479, 481, 482, 483, 484, 487, 488, 489, 494, 496, 502, 503, 506, 510, 512, 515, 516, 526, 548, 555, 556, 557, 561, 562, 572, 579, 584, 594, 598, 605, 613, 670, 737, 790, 866], "composit": 46, "make": [46, 62, 77, 81, 88, 89, 92, 96, 98, 102, 104, 138, 139, 140, 161, 169, 201, 237, 331, 339, 340, 401, 450, 457, 526, 555, 556, 557, 605, 704, 714, 715, 826, 833, 866], "up": [46, 152, 237, 288, 457, 526, 561, 562, 566, 605, 654, 833, 866], "dai": [47, 64, 139, 140, 152, 201, 237, 309, 319, 322, 323, 324, 325, 329, 330, 332, 333, 336, 405, 406, 407, 408, 409, 411, 412, 413, 490, 491, 492, 526, 556, 557, 562, 605, 695, 696, 698, 703, 706], "unsign": [48, 49, 50, 51, 400, 526, 771, 866], "could": [52, 66, 124, 139, 237, 286, 487, 496, 526, 546, 556, 605, 651, 866], "determin": [52, 54, 62, 79, 82, 88, 89, 91, 96, 104, 117, 133, 139, 140, 197, 201, 237, 283, 287, 382, 401, 405, 406, 407, 408, 409, 411, 412, 413, 425, 479, 526, 556, 557, 605, 649, 653, 801, 866], "static": [52, 599], "utf": 53, "intern": [54, 59, 64, 91, 190, 237, 478, 489, 503, 506, 511, 515, 516, 627, 652, 673, 806], "revers": [54, 126, 184, 237, 259, 261, 280, 295, 296, 297, 298, 299, 378, 395, 398, 417, 427, 428, 460, 468, 479, 526, 584, 605, 623, 626, 646, 663, 664, 665, 666, 769, 791, 803, 852, 866], "uniqu": [54, 108, 109, 111, 149, 161, 219, 237, 260, 359, 367, 388, 454, 470, 472, 507, 526, 605, 625, 668, 735, 744, 758, 830, 854, 855, 866], "kei": [54, 60, 139, 152, 163, 166, 170, 173, 220, 237, 556, 562, 576, 577, 605], "contain": [54, 60, 78, 81, 90, 100, 161, 166, 237, 360, 433, 436, 437, 438, 439, 451, 452, 526, 573, 605, 722, 757, 809, 812, 813, 814, 815, 827, 828, 845, 866], "have": [54, 88, 89, 91, 106, 110, 111, 113, 128, 169, 220, 237, 300, 338, 339, 340, 383, 398, 526, 582, 596, 605, 613, 667, 675, 713, 714, 715, 725, 769, 866], "inject": 54, "fill": [54, 62, 86, 114, 129, 130, 181, 200, 237, 285, 344, 345, 346, 351, 355, 405, 406, 408, 411, 412, 413, 419, 441, 446, 457, 497, 526, 550, 551, 581, 595, 605, 718, 719, 720, 762, 776, 777, 779, 782, 783, 784, 794, 817, 822, 833, 866], "non": [54, 158, 237, 393, 404, 405, 406, 407, 408, 409, 411, 412, 413, 433, 438, 481, 484, 526, 570, 605, 764, 775, 776, 777, 778, 779, 780, 782, 783, 784, 809, 814, 849, 866], "each": [54, 103, 106, 107, 109, 117, 137, 152, 210, 211, 213, 223, 237, 250, 270, 282, 325, 330, 349, 398, 438, 450, 451, 477, 526, 562, 573, 599, 600, 601, 605, 636, 648, 655, 698, 703, 769, 814, 826, 827, 866], "sort": [54, 55, 138, 139, 140, 152, 163, 165, 166, 201, 208, 213, 223, 237, 259, 261, 287, 347, 417, 428, 472, 474, 479, 526, 544, 556, 557, 562, 572, 573, 582, 600, 601, 605, 623, 626, 653, 791, 853, 855, 866], "origin": [54, 88, 89, 198, 237, 368, 400, 433, 437, 438, 439, 441, 446, 457, 526, 589, 605, 809, 813, 814, 815, 817, 822, 833], "order": [54, 106, 138, 139, 140, 163, 165, 166, 176, 198, 201, 237, 259, 261, 287, 398, 415, 416, 417, 427, 428, 459, 469, 470, 479, 526, 555, 556, 557, 584, 589, 605, 623, 626, 653, 769, 774, 786, 787, 791, 836, 853, 854, 866], "unless": [54, 78, 857, 866], "case": [54, 104, 117, 128, 139, 140, 237, 377, 382, 383, 519, 526, 556, 557, 605, 613, 866], "final": [54, 104, 549, 605], "doe": [54, 73, 80, 82, 88, 89, 90, 91, 99, 100, 101, 106, 107, 128, 237, 331, 334, 459, 470, 495, 526, 549, 555, 566, 605, 613, 704, 707, 725, 796, 857, 866], "receiv": [54, 117, 165, 237, 572, 605], "now": [54, 140, 237, 557, 605], "ha": [54, 100, 201, 237, 240, 250, 300, 368, 383, 468, 477, 526, 539, 599, 605, 656, 667, 725, 736, 852, 866], "whose": [54, 152, 166, 237, 341, 494, 526, 562, 605], "post": 54, "constrain": 54, "newli": 54, "descend": [54, 184, 237, 259, 261, 417, 526, 584, 605, 623, 626, 791, 866], "singl": [54, 62, 88, 89, 98, 99, 109, 124, 128, 135, 184, 208, 237, 322, 347, 377, 399, 402, 431, 447, 453, 474, 477, 482, 502, 511, 526, 546, 584, 598, 605, 613, 695, 770, 773, 807, 818, 823, 829, 845, 866], "boolean": [54, 59, 131, 133, 137, 206, 237, 247, 248, 265, 347, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 474, 526, 552, 594, 605, 611, 612, 624, 631, 721, 730, 732, 734, 735, 737, 738, 739, 740, 741, 742, 744, 765, 766, 789, 808, 858, 866], "associ": 54, "2022": [54, 64, 105, 121, 137, 237, 454, 492, 681, 830], "x": [54, 88, 89, 99, 109, 110, 126, 144, 147, 149, 151, 158, 237, 250, 264, 271, 352, 377, 401, 425, 450, 467, 489, 516, 526, 561, 566, 570, 583, 605, 610, 614, 720, 745, 801, 826, 851, 866], "y": [54, 109, 110, 126, 147, 149, 151, 158, 237, 264, 271, 401, 454, 489, 516, 526, 561, 570, 583, 605, 610, 701, 830, 866], "12": [54, 63, 64, 139, 140, 152, 201, 237, 298, 310, 319, 324, 325, 330, 336, 393, 420, 490, 491, 526, 556, 557, 558, 562, 565, 582, 587, 605, 614, 692, 698, 703, 785, 866], "df3": [54, 237], "09": [54, 140, 237, 557, 605, 676], "01": [54, 64, 121, 137, 139, 140, 201, 237, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 454, 492, 556, 557, 605, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 830], "02": [54, 64, 137, 139, 140, 201, 237, 305, 309, 310, 311, 317, 318, 319, 326, 327, 329, 332, 334, 414, 492, 526, 556, 557, 605, 674, 678, 679, 680, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707], "03": [54, 64, 139, 140, 201, 237, 305, 308, 309, 311, 318, 319, 325, 326, 327, 329, 330, 332, 334, 335, 556, 557, 605, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 687, 689, 691, 692, 693, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 708], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 88, 89, 99, 163, 198, 201, 237, 368, 481, 526, 589, 605], "easili": 54, "calcul": [54, 139, 237, 266, 301, 338, 339, 340, 369, 376, 410, 425, 471, 526, 556, 605, 632, 669, 713, 714, 715, 747, 781, 801, 805, 856, 866], "wise": [54, 124, 133, 237, 251, 252, 253, 254, 255, 256, 292, 293, 342, 375, 422, 423, 424, 465, 466, 487, 488, 496, 510, 526, 546, 605, 615, 616, 617, 618, 619, 620, 661, 662, 716, 751, 798, 799, 800, 842, 843, 866], "dot": [54, 526, 582, 605, 866], "product": [54, 164, 237, 298, 302, 526, 665, 670, 866], "fill_nul": [54, 129, 237, 454, 526, 550, 595, 605, 830, 866], "sum": [54, 126, 133, 138, 140, 150, 166, 208, 237, 250, 283, 298, 299, 337, 347, 392, 405, 406, 408, 411, 412, 413, 474, 475, 487, 489, 496, 506, 526, 541, 544, 549, 555, 557, 573, 582, 605, 665, 666, 711, 712, 776, 777, 779, 782, 783, 784, 866], "167": 54, "47": 54, "callabl": [55, 56, 57, 58, 99, 117, 133, 165, 210, 237, 250, 283, 377, 378, 404, 477, 487, 488, 496, 502, 510, 526, 566, 572, 599, 605, 614, 649, 775, 866], "decor": [55, 56, 57, 58, 110, 111], "access": [55, 56, 57, 58, 595, 605], "by_first_letter_of_column_nam": 55, "f": [55, 100, 117, 121, 124, 137, 154, 189, 197, 200, 210, 237, 250, 283, 377, 378, 420, 454, 477, 483, 487, 488, 496, 502, 510, 526, 546, 566, 594, 599, 605, 649, 830], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 432, 436, 812], "slice": [55, 61, 126, 237, 270, 282, 404, 405, 406, 407, 408, 409, 411, 412, 413, 526, 541, 549, 566, 573, 582, 605, 636, 648, 712, 775, 776, 777, 778, 779, 780, 782, 783, 784, 866], "to_seri": [55, 59, 237, 283, 649], "xx": [55, 57], "xy": [55, 57], "yy": [55, 57], "yz": [55, 57], "a1": [55, 57], "a2": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 285, 398, 526, 769, 866], "p": 56, "ceil": [56, 526, 866], "previou": [56, 393, 526, 764, 866], "floor": [56, 526, 866], "nearest": [56, 152, 168, 221, 237, 288, 350, 397, 409, 509, 526, 562, 574, 605, 654, 723, 768, 780, 866], "round": [56, 288, 350, 465, 526, 654, 723, 866], "24": [56, 117, 126, 140, 237, 298, 300, 311, 526, 557, 605, 667, 680, 866], "55": 56, "001": [56, 314, 316, 321, 492, 686, 688, 694], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "128": [56, 764, 866], "split_by_column_dtyp": 57, "dtype": [57, 79, 86, 88, 89, 99, 108, 109, 110, 111, 114, 139, 140, 152, 194, 237, 250, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 271, 286, 289, 290, 291, 292, 293, 298, 299, 308, 311, 314, 316, 318, 321, 327, 334, 341, 343, 349, 376, 377, 400, 401, 405, 406, 407, 408, 409, 411, 412, 413, 420, 423, 424, 431, 448, 461, 463, 465, 466, 467, 471, 472, 477, 478, 482, 483, 485, 494, 501, 502, 515, 526, 556, 557, 562, 605, 628, 629, 630, 637, 651, 656, 657, 658, 659, 665, 666, 677, 680, 686, 688, 691, 694, 700, 707, 712, 717, 728, 733, 774, 788, 795, 807, 824, 830, 838, 849, 850, 851, 866], "collect": [57, 61, 100, 101, 153, 189, 237, 250, 392, 478, 483, 511, 515, 526, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 558, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 599, 605], "i16": [57, 420, 526], "i32": [57, 79, 110, 178, 237, 286, 336, 420, 519, 526, 579, 605, 681, 709], "f32": [57, 237, 267, 398, 420, 493, 526, 633, 769, 866], "31": [58, 105, 307, 308, 319, 332, 454, 490, 491, 676, 677, 830], "42": [58, 140, 141, 237, 557, 605, 726, 866], "25": [58, 64, 139, 140, 152, 201, 205, 206, 237, 325, 330, 336, 556, 557, 562, 568, 591, 593, 594, 605, 698, 703, 711, 764, 866], "961": 58, "1764": 58, "4160": 58, "27": [58, 222, 324, 336, 394, 526], "125": [58, 764, 866], "condit": [59, 124, 131, 174, 237, 436, 452, 546, 552, 605], "eager": [59, 139, 200, 237, 478, 501, 511, 515, 525, 535, 556, 605], "indic": [59, 83, 87, 88, 89, 92, 96, 99, 108, 109, 111, 139, 140, 237, 358, 361, 362, 364, 365, 366, 405, 406, 407, 408, 409, 411, 412, 413, 416, 422, 463, 526, 556, 557, 605, 734, 738, 739, 740, 741, 742, 787, 798, 840, 866], "where": [59, 98, 124, 128, 158, 205, 237, 333, 337, 416, 425, 513, 519, 526, 570, 605, 613, 624, 706, 711, 787, 801, 805, 856, 858, 866], "evalu": [59, 129, 131, 152, 206, 237, 300, 354, 356, 360, 476, 478, 493, 515, 526, 552, 559, 561, 562, 593, 594, 605, 624, 667, 858, 866], "eagerli": [59, 511], "oppos": 59, "lazili": [59, 88, 89, 99, 100, 102, 103, 104], "u32": [59, 139, 162, 207, 211, 219, 222, 237, 245, 257, 258, 259, 260, 261, 262, 263, 273, 294, 295, 307, 310, 317, 319, 323, 324, 326, 332, 333, 371, 388, 391, 398, 416, 433, 440, 443, 467, 470, 485, 507, 526, 556, 596, 605, 623, 624, 625, 639, 651, 676, 679, 685, 687, 690, 692, 693, 696, 697, 699, 705, 706, 769, 809, 816, 819, 851, 854, 855, 866], "build": 60, "wa": 60, "compil": [60, 262, 263, 628, 629], "gate": 60, "info": [60, 90, 100, 105], "otherwis": [60, 178, 237, 289, 290, 291, 338, 339, 340, 400, 519, 526, 579, 605, 614, 657, 658, 659, 713, 714, 715, 771, 789, 790, 866], "version": [60, 90, 100, 105, 240, 510], "follow": [60, 88, 89, 90, 98, 99, 100, 117, 139, 140, 152, 165, 201, 237, 250, 322, 325, 330, 349, 398, 405, 406, 407, 408, 409, 411, 412, 413, 477, 520, 522, 526, 527, 530, 531, 532, 555, 556, 557, 562, 572, 605, 695, 698, 703, 769, 789, 790, 859, 862, 866, 869, 870, 871, 873], "depend": [60, 105, 250, 262, 263, 382, 398, 477, 495, 526, 628, 629, 769, 866], "host": [60, 88, 92, 96, 102, 104], "git": 60, "lazy_fram": 61, "type_coercion": [61, 541, 543, 549, 573, 582, 605], "predicate_pushdown": [61, 541, 543, 549, 566, 573, 582, 605], "projection_pushdown": [61, 541, 543, 549, 566, 573, 582, 605], "simplify_express": [61, 541, 543, 549, 573, 582, 605], "string_cach": 61, "no_optim": [61, 541, 549, 566, 573, 605], "slice_pushdown": [61, 541, 543, 549, 566, 573, 582, 605], "common_subplan_elimin": [61, 541, 543, 549, 573, 582, 605], "multipl": [61, 62, 88, 89, 99, 102, 104, 109, 111, 126, 128, 131, 139, 144, 163, 166, 184, 206, 208, 237, 341, 383, 387, 402, 405, 406, 407, 408, 409, 411, 412, 413, 428, 479, 487, 488, 494, 496, 502, 510, 519, 526, 545, 552, 556, 584, 594, 598, 605, 613, 712, 756, 773, 866], "graph": [61, 153, 237, 559, 595, 605], "parallel": [61, 62, 85, 96, 98, 104, 139, 152, 153, 165, 237, 267, 300, 526, 535, 556, 561, 562, 605, 633, 667, 866], "threadpool": 61, "coercion": [61, 401, 526, 541, 549, 573, 582, 605], "optim": [61, 96, 99, 102, 103, 104, 153, 165, 169, 237, 541, 543, 549, 566, 573, 582, 596, 605], "predic": [61, 99, 101, 102, 103, 104, 131, 174, 237, 347, 474, 519, 526, 541, 549, 552, 566, 573, 582, 596, 605, 721, 789, 790, 866], "pushdown": [61, 541, 549, 566, 573, 582, 596, 605, 789, 790, 866], "project": [61, 99, 100, 102, 103, 104, 250, 427, 428, 526, 541, 549, 566, 573, 582, 597, 605], "simplifi": [61, 541, 549, 573, 582, 605], "turn": [61, 88, 89, 99, 113, 349, 472, 526, 541, 549, 566, 573, 605], "off": [61, 88, 89, 99, 113, 472, 526, 541, 549, 566, 573, 605], "Will": [61, 197, 237, 503, 506, 541, 549, 573, 582, 605, 866], "try": [61, 74, 75, 88, 89, 91, 92, 96, 99, 102, 104, 541, 549, 573, 582, 605], "branch": [61, 541, 549, 573, 582, 605], "subplan": [61, 541, 549, 573, 582, 605], "occur": [61, 387, 398, 526, 541, 549, 573, 582, 605, 756, 769, 866], "part": [61, 77, 450, 451, 541, 549, 573, 582, 595, 605, 676, 679, 685, 687, 690, 692, 693, 699, 709, 826, 827], "fashion": [61, 151, 237, 541, 549, 573, 582, 605], "alpha": [61, 338, 339, 340, 526, 541, 549, 573, 582, 605, 713, 714, 715, 866], "item": [62, 176, 237, 265, 269, 271, 343, 349, 415, 451, 526, 631, 635, 637, 717, 786, 827, 866], "rechunk": [62, 77, 81, 88, 89, 92, 96, 99, 102, 103, 104, 128, 237, 526, 613, 655, 757, 866], "concatmethod": 62, "vertic": [62, 128, 200, 203, 237, 431, 503, 807], "aggreg": [62, 88, 89, 133, 138, 139, 155, 156, 157, 159, 161, 166, 167, 168, 185, 186, 200, 202, 208, 209, 212, 214, 220, 237, 245, 347, 373, 377, 392, 404, 405, 406, 407, 408, 409, 411, 412, 413, 472, 487, 488, 489, 496, 500, 503, 506, 510, 516, 526, 556, 566, 567, 568, 569, 571, 574, 585, 586, 591, 598, 605, 775, 776, 777, 779, 782, 783, 784, 866], "concaten": [62, 133, 237, 655, 757, 866], "sure": [62, 77, 81, 88, 89, 92, 98, 138, 169, 237, 478, 555, 605], "contigu": [62, 77, 81, 88, 89, 92, 99, 102, 103, 104, 169, 237], "diagon": [62, 197, 237], "strategi": [62, 88, 108, 109, 110, 111, 130, 139, 151, 152, 160, 237, 283, 346, 526, 551, 556, 561, 562, 605, 649, 720, 866], "vstack": [62, 128, 237], "find": [62, 132, 237, 416, 479, 526, 787, 866], "schema": [62, 74, 79, 88, 89, 93, 97, 99, 103, 110, 117, 118, 119, 125, 237, 283, 382, 539, 540, 547, 566, 597, 599, 605, 660, 866], "miss": [62, 129, 237, 285, 351, 355, 362, 364, 513, 526, 550, 605, 857, 866], "stack": [62, 144, 203, 237], "length": [62, 63, 86, 103, 109, 114, 139, 140, 183, 237, 279, 300, 325, 330, 383, 404, 405, 406, 407, 408, 409, 411, 412, 413, 426, 441, 443, 446, 448, 457, 478, 526, 556, 557, 573, 583, 605, 645, 655, 667, 698, 703, 748, 762, 775, 776, 777, 778, 779, 780, 782, 783, 784, 802, 817, 819, 822, 824, 833, 866], "don": [62, 200, 237, 267, 300, 477, 526, 633, 667, 788, 857, 866], "t": [62, 91, 99, 117, 200, 237, 267, 300, 337, 338, 339, 340, 454, 477, 519, 526, 633, 667, 711, 713, 714, 715, 788, 830, 857, 866], "match": [62, 73, 78, 80, 82, 106, 107, 130, 152, 174, 237, 432, 433, 436, 438, 439, 442, 444, 445, 447, 452, 453, 454, 551, 562, 605, 808, 809, 812, 814, 815, 818, 820, 821, 823, 828, 829, 830], "relev": 62, "execut": [62, 153, 237, 267, 538, 573, 605, 633], "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "bin": 63, "label": [63, 78, 80, 82, 237, 404, 405, 406, 407, 408, 409, 411, 412, 413, 526, 573, 605, 775, 776, 777, 778, 779, 780, 782, 783, 784, 866], "break_point_label": 63, "break_point": 63, "category_label": 63, "discret": [63, 266, 301, 337, 526, 632, 669, 711, 866], "creat": [63, 64, 77, 80, 82, 100, 109, 110, 111, 118, 119, 139, 140, 162, 166, 201, 237, 325, 330, 399, 448, 472, 478, 483, 490, 491, 492, 526, 539, 540, 543, 544, 556, 557, 605, 656, 660, 672, 698, 703, 762, 770, 824, 849, 866], "assign": [63, 109, 139, 237, 398, 450, 451, 526, 556, 605, 769, 826, 827, 866], "must": [63, 78, 80, 82, 90, 100, 106, 139, 140, 152, 174, 237, 283, 341, 377, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 566, 605, 866], "len": [63, 109, 110, 295, 402, 441, 446, 457, 526, 773, 817, 822, 833, 866], "breakpoint": 63, "experiment": [63, 101, 200, 206, 237, 300, 325, 405, 406, 407, 408, 409, 411, 412, 413, 526, 594, 605, 667, 698, 866], "being": [63, 88, 89, 99, 101, 200, 237, 300, 325, 405, 406, 407, 408, 409, 411, 412, 413, 493, 519, 526, 667, 698, 866], "consid": [63, 101, 134, 158, 200, 206, 208, 220, 237, 289, 290, 291, 300, 325, 405, 406, 407, 408, 409, 411, 412, 413, 427, 487, 496, 526, 558, 565, 570, 594, 605, 657, 658, 659, 667, 698, 788, 789, 790, 866], "break": [63, 101, 200, 237, 300, 325, 405, 406, 407, 408, 409, 411, 412, 413, 526, 667, 698, 866], "30": [63, 128, 139, 144, 165, 171, 172, 190, 206, 237, 257, 258, 259, 261, 301, 308, 324, 325, 330, 336, 352, 420, 526, 556, 572, 594, 605, 677, 698, 703], "inf": [63, 110, 111, 256, 358, 361, 526, 620, 734, 738, 764, 866], "low": [64, 139, 237, 326, 478, 556, 605], "high": [64, 139, 237, 326, 478, 556, 605], "interv": [64, 139, 140, 201, 237, 325, 326, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 605, 676, 678, 679, 685, 687, 690, 692, 693, 696, 697, 698, 699, 701, 702, 703, 705, 706, 709], "close": [64, 139, 140, 237, 405, 406, 407, 408, 409, 411, 412, 413, 425, 526, 556, 557, 605, 801, 866], "closedwindow": [64, 139, 140, 237, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 605], "lower": [64, 99, 139, 168, 221, 237, 356, 376, 397, 400, 409, 478, 509, 526, 549, 556, 574, 605, 768, 771, 780, 866], "bound": [64, 88, 89, 126, 139, 237, 269, 356, 376, 471, 478, 526, 556, 605, 635, 712, 866], "upper": [64, 88, 89, 126, 139, 237, 356, 471, 478, 526, 556, 605, 712, 866], "period": [64, 139, 140, 180, 181, 237, 278, 325, 330, 338, 339, 340, 393, 418, 419, 526, 556, 557, 580, 581, 605, 644, 698, 703, 713, 714, 715, 764, 793, 794, 866], "It": [64, 117, 165, 210, 237, 250, 283, 331, 382, 526, 566, 599, 605, 704, 789, 790, 866], "like": [64, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 151, 220, 237, 267, 385, 398, 526, 549, 575, 605, 633, 769, 866], "durat": [64, 152, 201, 237, 308, 311, 314, 316, 318, 321, 327, 334, 467, 526, 562, 605, 677, 680, 686, 688, 691, 694, 700, 707, 851, 866], "3d12h4m25": [64, 139, 140, 152, 201, 237, 325, 330, 556, 557, 562, 605, 698, 703], "hour": [64, 139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 491, 492, 526, 556, 557, 562, 605, 695, 698, 703], "minut": [64, 139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 491, 492, 526, 556, 557, 562, 605, 695, 698, 703], "tempor": [64, 139, 140, 237, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 605], "window": [64, 139, 140, 237, 300, 325, 330, 338, 339, 340, 392, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 483, 526, 556, 557, 605, 667, 698, 703, 713, 714, 715, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 866], "granular": 64, "finer": 64, "than": [64, 76, 80, 82, 88, 89, 101, 110, 111, 117, 138, 152, 174, 176, 200, 210, 237, 250, 368, 415, 425, 427, 441, 446, 451, 457, 503, 506, 513, 516, 526, 555, 562, 599, 605, 786, 801, 817, 822, 827, 833, 866], "1d": [64, 139, 140, 152, 201, 237, 305, 311, 318, 322, 325, 330, 334, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 674, 678, 680, 682, 683, 684, 689, 691, 695, 698, 701, 702, 703, 706, 707], "also": [64, 110, 111, 125, 138, 139, 140, 161, 184, 237, 306, 341, 355, 398, 405, 406, 407, 408, 409, 411, 412, 413, 487, 488, 496, 510, 525, 526, 556, 557, 584, 595, 605, 675, 769, 866], "permut": 64, "1mo": [64, 139, 140, 152, 201, 237, 308, 322, 325, 330, 335, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 675, 677, 692, 695, 696, 697, 698, 703, 705, 708], "dtrang": 64, "1985": 64, "00": [64, 139, 152, 201, 237, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 454, 492, 556, 562, 605, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 830], "04": [64, 101, 139, 201, 237, 307, 308, 311, 317, 318, 319, 323, 325, 326, 327, 332, 333, 334, 335, 454, 492, 556, 605, 675, 677, 680, 685, 687, 690, 691, 692, 693, 697, 699, 700, 701, 705, 706, 707, 708, 830], "05": [64, 101, 106, 107, 152, 201, 237, 308, 326, 335, 562, 605, 675, 676, 677, 698, 703, 706, 708], "07": [64, 307, 323, 325, 330, 333, 454, 676, 706, 830], "08": [64, 106, 107, 140, 237, 325, 454, 492, 557, 605, 698, 703, 830], "zone": [64, 306, 331, 335, 675, 704, 708], "america": [64, 675], "new_york": [64, 675], "\u03bc": [64, 139, 140, 152, 201, 237, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 556, 557, 562, 605, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709], "est": [64, 675], "encount": [65, 139, 237, 389, 390, 439, 487, 496, 513, 526, 556, 605, 760, 761, 815, 866], "error": [65, 88, 89, 99, 174, 237, 271, 286, 368, 434, 439, 454, 526, 599, 637, 651, 810, 815, 830, 866], "duplic": [67, 147, 151, 152, 198, 237, 357, 479, 526, 561, 562, 589, 605, 732, 866], "certain": [68, 145, 201, 237, 341, 494, 526, 541, 573, 605, 866], "structur": [69, 74, 75, 128, 165, 237, 572, 605, 613, 866], "least": [70, 110, 393, 472, 526, 764, 855, 866], "expect": [70, 73, 76, 250, 477, 526, 564, 566, 605], "unexpect": [72, 237], "caus": [72, 88, 89, 99, 128, 237, 613, 866], "panic": 72, "combin": [74, 75, 139, 140, 141, 152, 201, 208, 237, 556, 557, 562, 582, 605], "mismatch": 74, "incompat": 75, "lib": [77, 845, 866], "chunkedarrai": [77, 160, 237, 670, 866], "zero": [77, 87, 88, 89, 92, 96, 130, 174, 189, 237, 345, 346, 416, 425, 457, 526, 551, 605, 720, 801, 833, 845, 849, 866], "copi": [77, 118, 119, 189, 237, 457, 539, 540, 605, 610, 656, 660, 672, 833, 845, 849, 866], "most": [77, 383, 387, 393, 451, 472, 526, 756, 764, 827, 855, 866], "closest": 77, "construct": [77, 78, 79, 80, 81, 82, 237, 554, 575, 605, 866], "pa": [77, 100, 101, 237], "map": [78, 79, 88, 89, 92, 93, 96, 97, 99, 102, 117, 125, 170, 190, 237, 325, 330, 378, 472, 477, 526, 547, 576, 605, 698, 703], "clone": [78, 79, 80, 81, 82, 118, 193, 194, 237, 539, 605, 656, 848, 849, 857, 866], "two": [78, 80, 82, 98, 133, 158, 166, 196, 208, 209, 210, 220, 237, 245, 302, 427, 428, 463, 475, 486, 508, 513, 515, 526, 570, 599, 605, 670, 866], "dimension": [78, 80, 82, 237, 866], "alreadi": [78, 237, 267, 300, 526, 633, 667, 866], "present": [78, 110, 237, 360, 526, 857, 866], "dimens": [78, 80, 82, 237, 402, 526, 773, 866], "infer_schema_length": [79, 82, 88, 89, 91, 99, 103], "50": [79, 82, 128, 237, 289, 290, 291, 325, 330, 526, 657, 703, 866], "mani": [79, 82, 98, 128, 237, 613, 866], "scan": [79, 82, 88, 89, 96, 99, 100, 101, 102, 103, 104, 549, 558, 565, 605], "slow": [79, 82, 88, 89, 99, 191, 237, 300, 526, 667, 866], "partial": 79, "overwrit": [79, 88, 89, 99, 206, 237, 549, 593, 594, 605], "first": [79, 88, 89, 91, 98, 99, 103, 117, 137, 139, 142, 152, 154, 160, 165, 166, 197, 198, 201, 213, 220, 237, 259, 260, 261, 267, 269, 270, 300, 322, 325, 353, 359, 372, 437, 439, 444, 445, 479, 481, 487, 496, 499, 526, 541, 556, 558, 562, 565, 572, 589, 595, 600, 605, 623, 626, 633, 635, 636, 667, 668, 695, 698, 727, 735, 749, 813, 815, 820, 821, 866], "let": 79, "about": [79, 425, 526, 801, 866], "3rd": 79, "unknown": [79, 501], "np": [80, 237, 734, 738, 739, 740, 775, 866], "ndarrai": [80, 131, 193, 237, 463, 526, 670, 790, 840, 849, 866], "numpi": [80, 105, 131, 164, 193, 237, 389, 390, 463, 526, 734, 738, 739, 740, 760, 761, 775, 840, 849, 857, 866], "columnar": [80, 82, 175, 237], "column_0": [80, 82, 117, 197, 237], "column_1": [80, 82, 117, 197, 237], "interpret": [80, 82, 88, 89, 99, 237], "yield": [80, 82, 88, 89, 99, 126, 128, 197, 237, 613, 712, 866], "conclus": [80, 82, 237], "nan_to_non": 81, "panda": [81, 91, 98, 105, 194, 237, 467, 526, 850, 851, 866], "index": [81, 84, 105, 132, 139, 140, 145, 152, 166, 172, 174, 183, 195, 201, 207, 237, 245, 257, 258, 259, 260, 261, 262, 263, 269, 279, 322, 405, 406, 407, 408, 409, 411, 412, 413, 426, 437, 448, 463, 479, 526, 556, 557, 562, 583, 596, 605, 621, 622, 623, 624, 625, 626, 628, 629, 635, 645, 695, 762, 790, 802, 813, 824, 840, 866], "datetimeindex": [81, 670, 866], "instal": [81, 88, 89, 92, 96, 98, 100, 105, 164, 193, 194, 237, 582, 605, 849, 866], "nan": [81, 106, 107, 110, 129, 237, 303, 304, 345, 355, 362, 364, 365, 366, 379, 386, 389, 390, 513, 526, 550, 605, 616, 620, 671, 719, 739, 740, 760, 761, 775, 866], "convert": [81, 83, 90, 91, 98, 100, 175, 190, 191, 192, 193, 194, 196, 237, 283, 454, 649, 830, 837, 848, 849, 850, 857, 866], "pd": [81, 91, 98, 237, 467, 526, 851, 866], "pd_df": 81, "pd_seri": 81, "dummi": [83, 192, 237, 846, 866], "subset": [83, 124, 161, 192, 198, 237, 546, 589, 605], "to_dummi": [83, 237, 866], "foo_1": [83, 192, 237], "foo_2": [83, 192, 237], "bar_3": [83, 192, 237], "bar_4": [83, 192, 237], "ham_a": [83, 192, 237], "ham_b": [83, 192, 237], "get": [84, 93, 97, 112, 120, 125, 135, 136, 139, 140, 142, 143, 147, 149, 154, 160, 174, 177, 179, 183, 187, 192, 204, 213, 223, 225, 226, 227, 228, 229, 230, 231, 237, 245, 257, 258, 259, 260, 261, 268, 272, 273, 284, 295, 296, 297, 298, 299, 309, 348, 353, 357, 359, 367, 370, 372, 379, 380, 381, 382, 384, 386, 389, 390, 397, 426, 430, 440, 443, 461, 462, 469, 473, 495, 499, 503, 504, 505, 506, 514, 517, 518, 526, 542, 547, 553, 556, 557, 558, 563, 565, 578, 583, 587, 592, 600, 601, 605, 621, 622, 623, 624, 625, 626, 634, 638, 639, 650, 655, 663, 664, 665, 666, 678, 710, 722, 724, 727, 728, 732, 735, 744, 749, 752, 754, 755, 757, 759, 760, 761, 765, 766, 768, 802, 805, 816, 819, 839, 844, 845, 846, 853, 856, 857, 866], "uint32": [84, 105, 126, 237, 259, 261, 262, 263, 273, 307, 310, 313, 315, 317, 319, 320, 323, 324, 326, 332, 333, 401, 433, 440, 443, 463, 467, 526, 624, 628, 629, 639, 651, 676, 679, 685, 687, 690, 692, 693, 696, 697, 699, 705, 706, 712, 788, 809, 851, 866], "regular": [84, 201, 237, 341, 482, 494, 526], "uint64": [84, 141, 237, 262, 263, 352, 400, 526, 628, 629, 726, 771, 866], "bigidx": 84, "read": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 128, 237, 377, 526, 549, 554, 575, 605, 613, 866], "over": [85, 88, 89, 99, 110, 117, 128, 138, 197, 210, 220, 237, 250, 300, 346, 355, 377, 378, 404, 405, 406, 407, 408, 409, 411, 412, 413, 477, 487, 488, 496, 502, 510, 526, 599, 613, 614, 667, 775, 776, 777, 779, 783, 866], "avail": [85, 90, 100, 109, 236, 240, 398, 520, 522, 525, 526, 527, 530, 531, 532, 535, 536, 549, 604, 605, 769, 859, 862, 866, 869, 870, 871], "fetch": [85, 99, 153, 237, 539, 541, 558, 565, 590, 605], "ideal": [85, 220], "read_csv_batch": [85, 536], "tpch": [85, 89], "tables_scale_100": [85, 89], "lineitem": [85, 89, 98], "tbl": [85, 89], "parse_d": [85, 88, 89, 99], "polarsdatatyp": [86, 99, 108, 109, 110, 111, 114, 117, 125, 177, 237, 250, 286, 377, 526, 614, 651, 866], "new": [86, 114, 117, 122, 124, 144, 145, 161, 162, 170, 171, 188, 200, 205, 237, 246, 343, 349, 355, 378, 444, 445, 450, 451, 458, 459, 464, 526, 535, 576, 588, 599, 605, 610, 614, 672, 717, 762, 772, 820, 821, 826, 827, 834, 836, 841, 847, 858, 866], "In": [86, 90, 100, 104, 110, 111, 114, 117, 126, 128, 139, 140, 161, 237, 250, 382, 427, 428, 526, 556, 557, 605, 613, 712, 770, 866], "probabl": [86, 114, 337, 526, 711, 866], "n_row": [87, 88, 89, 92, 96, 99, 102, 103, 104, 549, 605], "accept": [87, 88, 89, 90, 92, 96, 184, 237], "start": [87, 88, 89, 92, 96, 99, 102, 103, 104, 138, 139, 153, 183, 201, 207, 237, 279, 307, 309, 310, 317, 319, 323, 324, 325, 326, 329, 330, 332, 333, 336, 341, 356, 426, 432, 436, 448, 452, 482, 487, 494, 496, 519, 526, 555, 556, 573, 583, 596, 605, 645, 674, 675, 676, 678, 679, 685, 687, 690, 692, 693, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709, 802, 812, 824, 828, 866], "stop": [87, 88, 89, 92, 96, 99, 102, 103, 104, 307, 309, 310, 317, 319, 323, 324, 325, 326, 329, 330, 332, 333, 336, 674, 675, 676, 678, 679, 685, 687, 690, 692, 693, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 708, 709], "after": [87, 88, 89, 92, 96, 99, 102, 103, 104, 128, 199, 236, 237, 240, 398, 457, 526, 590, 605, 613, 675, 769, 833, 866], "textio": 88, "new_column": [88, 89, 91], "comment_char": [88, 89, 99], "quote_char": [88, 89, 99], "skip_row": [88, 89, 99], "ignore_error": [88, 89, 99], "n_thread": [88, 89], "8192": 88, "csvencod": [88, 89, 99], "low_memori": [88, 89, 96, 99, 103, 104], "storage_opt": [88, 90, 92, 96, 100, 102, 104], "skip_rows_after_head": [88, 89, 99], "row_count_nam": [88, 89, 92, 96, 99, 102, 103, 104], "row_count_offset": [88, 89, 92, 96, 99, 102, 103, 104], "sample_s": [88, 89], "eol_char": [88, 89, 99], "By": [88, 89, 91, 152, 184, 237, 501, 562, 605, 805, 849, 856, 866], "we": [88, 89, 91, 99, 138, 152, 184, 237, 267, 501, 519, 562, 566, 584, 605, 614, 633, 866], "handler": [88, 89, 91], "g": [88, 89, 90, 91, 92, 96, 100, 102, 104, 200, 237, 341, 417, 420, 494, 526, 788, 791, 849, 866], "via": [88, 89, 91, 99, 102, 104, 206, 237, 594, 605], "builtin": [88, 89, 91], "open": [88, 89, 91, 92, 96, 102, 104], "stringio": [88, 89], "fsspec": [88, 89, 92, 96, 100, 102, 104, 105], "remot": [88, 89, 92, 96], "dataset": [88, 89, 99, 101, 369, 526, 535, 747, 866], "autogener": [88, 89, 99], "column_x": [88, 89, 99], "enumer": [88, 89, 99], "everi": [88, 89, 99, 139, 188, 191, 201, 237, 262, 263, 266, 269, 270, 279, 282, 295, 296, 297, 298, 299, 300, 325, 330, 343, 349, 464, 487, 488, 526, 549, 556, 588, 605, 628, 629, 632, 635, 636, 645, 648, 663, 664, 665, 666, 667, 698, 703, 717, 841, 866], "shorter": [88, 89], "remain": [88, 89, 99, 126, 138, 237, 250, 450, 451, 526, 555, 566, 605, 712, 826, 827, 866], "comment": [88, 89, 99], "instanc": [88, 89, 99, 110, 111, 128, 133, 237, 283, 286, 383, 405, 406, 407, 408, 409, 411, 412, 413, 487, 496, 526, 566, 596, 605, 613, 651, 866], "special": [88, 89, 99, 614, 866], "handl": [88, 89, 99, 101, 266, 301, 434, 457, 526, 632, 669, 810, 833, 866], "escap": [88, 89, 99], "dure": [88, 89, 99, 128, 237, 613, 866], "provid": [88, 89, 90, 98, 99, 100, 110, 111, 206, 237, 283, 434, 435, 437, 439, 535, 594, 599, 605, 810, 811, 813, 815, 873], "equal": [88, 89, 99, 106, 107, 113, 134, 139, 152, 237, 404, 405, 406, 407, 408, 409, 411, 412, 413, 440, 441, 446, 457, 478, 526, 556, 562, 605, 775, 776, 777, 778, 779, 780, 782, 783, 784, 788, 816, 817, 822, 833, 866], "some": [88, 89, 99, 124, 237, 546, 605, 737, 866], "check": [88, 89, 99, 106, 107, 134, 148, 150, 237, 247, 248, 265, 356, 360, 432, 436, 452, 526, 566, 605, 611, 612, 631, 730, 731, 733, 736, 737, 743, 745, 746, 788, 808, 812, 828, 866], "might": [88, 89, 99, 382, 470, 526], "issu": [88, 89, 91, 99, 298, 299, 461, 526, 665, 666, 838, 866], "automat": [88, 89, 98, 99, 110, 111, 237, 454, 830, 866], "alwai": [88, 117, 210, 237, 250, 382, 526, 566, 599, 605], "physic": [88, 89, 152, 237, 287, 467, 526, 538, 561, 562, 605, 653, 851, 866], "cpu": [88, 89], "your": [88, 89, 106, 107, 237, 541, 558, 565, 566, 605], "system": [88, 89], "done": [88, 89, 99, 101, 137, 152, 237, 249, 286, 441, 446, 526, 562, 584, 598, 605, 651, 817, 822, 866], "buffer": [88, 89, 126, 237, 712, 866], "onc": [88, 89, 91, 176, 237, 415, 526, 538, 605, 786, 866], "modifi": [88, 89, 99, 144, 203, 237, 306, 334, 675, 707, 772, 831, 832, 866], "multi": [88, 89], "lossi": [88, 89, 99], "replac": [88, 89, 99, 129, 130, 172, 197, 205, 237, 434, 445, 550, 593, 605, 789, 790, 810, 821, 866], "decod": [88, 89], "im": [88, 89], "usag": [88, 89, 99, 110, 111, 182, 237, 796, 866], "expens": [88, 89, 96, 99, 103, 104, 138, 197, 237, 555, 605, 613, 866], "nativ": [88, 92, 96, 117, 210, 237, 250, 526, 599], "parser": 88, "even": 88, "possibl": [88, 117, 210, 237, 250, 376, 382, 451, 471, 526, 599, 827, 866], "differ": [88, 101, 128, 139, 140, 197, 237, 266, 301, 306, 307, 322, 323, 332, 389, 390, 454, 470, 495, 503, 506, 526, 556, 557, 605, 613, 632, 669, 675, 676, 695, 696, 705, 760, 761, 788, 830, 866], "regard": [88, 513], "sens": [88, 92, 96, 102, 104, 139, 140, 201, 237, 556, 557, 605], "particular": [88, 92, 96, 102, 104, 126, 237, 712, 866], "storag": [88, 90, 92, 96, 100, 102, 104], "connect": [88, 92, 96, 98, 101, 102, 104, 536], "port": [88, 92, 96, 98, 102, 104], "usernam": [88, 92, 96, 98, 102, 104], "password": [88, 92, 96, 98, 102, 104], "skip": [88, 89, 91, 99, 200, 237, 614, 866], "insert": [88, 89, 92, 96, 99, 102, 103, 104, 145, 171, 197, 199, 237, 416, 431, 457, 526, 590, 605, 787, 807, 833, 866], "count": [88, 89, 92, 96, 99, 102, 103, 104, 121, 139, 140, 152, 161, 162, 166, 197, 201, 207, 210, 219, 237, 295, 322, 371, 388, 391, 405, 406, 407, 408, 409, 411, 412, 413, 433, 470, 472, 507, 526, 556, 557, 562, 596, 599, 605, 668, 695, 758, 763, 809, 854, 855, 866], "offset": [88, 89, 92, 96, 99, 102, 103, 104, 139, 140, 183, 201, 207, 237, 279, 322, 325, 330, 426, 448, 526, 556, 557, 583, 596, 605, 645, 695, 698, 703, 802, 824, 866], "row_count": [88, 89, 92, 96, 99, 102, 103, 104], "sampl": [88, 89, 210, 237, 425, 526, 599, 801, 866], "estim": [88, 89, 126, 237, 339, 340, 369, 526, 712, 714, 715, 747, 866], "alloc": [88, 89, 126, 169, 237, 712, 866], "need": [88, 89, 91, 106, 107, 139, 140, 182, 193, 237, 283, 420, 440, 526, 556, 557, 598, 605, 795, 816, 849, 866], "end": [88, 89, 96, 99, 139, 237, 279, 325, 341, 356, 432, 436, 448, 452, 482, 494, 526, 556, 558, 565, 573, 605, 645, 698, 812, 824, 828], "scan_csv": [88, 89, 598], "glob": [88, 89, 99, 102, 104], "pattern": [88, 89, 99, 102, 104, 432, 433, 437, 438, 444, 445, 789, 790, 808, 809, 813, 814, 820, 821, 866], "store": [88, 96, 128, 237, 613, 866], "continu": [88, 96, 425, 526, 801, 866], "benchmark": [88, 96], "50000": 89, "batchedcsvread": [89, 535], "batch": [89, 103], "upon": 89, "creation": 89, "gather": 89, "work": [89, 91, 138, 140, 171, 198, 237, 267, 288, 289, 290, 291, 350, 443, 459, 469, 526, 555, 557, 589, 605, 633, 654, 657, 658, 659, 723, 819, 853, 866], "next_batch": 89, "call": [89, 110, 111, 153, 236, 237, 240, 536, 604, 605, 614, 866], "table_uri": [90, 100], "delta_table_opt": [90, 100], "lake": [90, 100, 535], "uri": [90, 98, 100], "root": [90, 100, 368, 378, 384, 395, 429, 460, 525, 526, 804, 866], "For": [90, 91, 100, 128, 140, 151, 152, 184, 210, 237, 283, 286, 383, 400, 425, 487, 496, 497, 526, 557, 562, 584, 599, 605, 613, 771, 801, 849, 866], "filesystem": [90, 100], "absolut": [90, 100, 106, 107, 244, 526, 609, 866], "rel": [90, 100, 106, 107, 220, 322, 338, 339, 340, 526, 695, 713, 714, 715, 866], "But": [90, 100], "gc": [90, 100], "azur": [90, 100], "thu": [90, 99, 100, 128, 237, 513, 613, 866], "latest": [90, 100, 351, 383, 526], "backend": [90, 98, 100], "deltalak": [90, 100], "cloud": [90, 100, 101], "configur": [90, 100], "authent": [90, 100], "here": [90, 98, 100, 109, 110, 111, 439, 815], "keyword": [90, 96, 100, 164, 165, 174, 237, 572, 605, 866], "while": [90, 91, 100, 110, 111, 158, 197, 237, 570, 605], "sinc": [90, 100, 240, 309, 678], "table_path": [90, 100], "fail": [90, 100, 198, 237, 283, 454, 589, 605, 614, 830, 866], "aw": [90, 100], "see": [90, 91, 98, 100, 106, 107, 110, 111, 151, 164, 165, 237, 289, 290, 291, 328, 346, 355, 369, 377, 425, 510, 526, 657, 658, 659, 701, 747, 801, 866, 873], "bucket": [90, 100, 325, 330, 698, 703], "aws_access_key_id": [90, 100], "the_aws_access_key_id": [90, 100], "aws_secret_access_kei": [90, 100], "the_aws_secret_access_kei": [90, 100], "googl": [90, 100], "service_account": [90, 100], "service_account_json_absolute_path": [90, 100], "az": [90, 100], "adl": [90, 100], "abf": [90, 100], "azure_storage_account_nam": [90, 100], "azure_storage_account_kei": [90, 100], "without_fil": [90, 100], "load": [90, 98, 100, 535, 558, 565, 605], "track": [90, 100, 117, 237], "sheet_id": 91, "sheet_nam": 91, "xlsx2csv_option": 91, "read_csv_opt": 91, "excel": [91, 535], "xlsx": 91, "sheet": 91, "xlsx2csv": [91, 105], "read_csv": [91, 99], "skip_empty_lin": 91, "my": [91, 100, 101], "datasheet": 91, "excel_fil": 91, "As": [91, 511], "correct": [91, 339, 340, 369, 410, 425, 526, 566, 605, 714, 715, 747, 781, 801, 866], "look": [91, 283], "document": [91, 98, 439, 454, 815, 830], "fix": [91, 109, 110, 334, 405, 406, 407, 408, 409, 411, 412, 413, 526, 707], "whole": [91, 427, 428, 437, 526, 813], "twice": 91, "actual": [91, 110, 111, 796, 866], "With": 91, "1000": [91, 126, 237, 314, 457, 686], "spreadsheet": [91, 166, 237], "xl": 91, "xlsm": 91, "xlsb": 91, "odf": 91, "od": 91, "odt": 91, "from_panda": [91, 98], "memory_map": [92, 96, 102], "v2": [92, 102], "valid": [92, 96, 111, 126, 237, 300, 427, 432, 433, 437, 438, 439, 526, 667, 712, 725, 808, 809, 813, 814, 815, 820, 821, 866], "greatli": [92, 102], "repeat": [92, 102, 399, 401, 526], "o": [92, 102, 300, 349, 468, 526, 667, 852, 866], "page": [92, 102, 237, 526, 535, 605, 866], "give": [92, 96, 102, 103, 104, 158, 237, 309, 369, 401, 526, 535, 570, 605, 678, 747, 866], "read_ndjson": 94, "parallelstrategi": [96, 104], "auto": [96, 104, 197, 237], "directori": 96, "partit": [96, 98, 101, 163, 237], "awar": [96, 331, 454, 704, 830], "stabl": 96, "increas": [96, 300, 526, 667, 866], "row_group": [96, 104], "direct": [96, 98, 104, 200, 237], "read_tabl": 96, "connection_uri": 98, "partition_on": 98, "partition_rang": 98, "partition_num": 98, "protocol": 98, "postgr": [98, 392, 526], "mysql": 98, "sqlite": 98, "redshift": 98, "through": [98, 866], "clickhous": 98, "databas": 98, "altern": 98, "solut": 98, "engin": [98, 117, 210, 237, 250, 526, 599], "raw": 98, "connectorx": [98, 105], "postgresql": 98, "server": 98, "transfer": 98, "detail": [98, 106, 107, 873], "partition_col": 98, "explicitli": [98, 109, 110], "with_column_nam": 99, "push": [99, 101, 102, 103, 104], "down": [99, 101, 102, 103, 104, 350, 526, 723, 866], "therebi": [99, 102, 103, 104], "potenti": [99, 102, 103, 104], "overhead": [99, 102, 103, 104], "updat": 99, "just": [99, 158, 237, 570, 605], "befor": [99, 128, 139, 152, 199, 237, 298, 299, 300, 393, 404, 405, 406, 407, 408, 409, 411, 412, 413, 457, 461, 526, 556, 559, 562, 590, 605, 613, 665, 666, 667, 764, 775, 776, 777, 778, 779, 780, 782, 783, 784, 833, 838, 866], "realloc": [99, 102, 103, 128, 237, 613, 866], "my_long_fil": 99, "doesn": [99, 337, 526, 711, 857, 866], "thing": [99, 475, 495], "less": [99, 152, 237, 441, 446, 451, 457, 562, 605, 817, 822, 827, 833], "limit": [99, 130, 237, 285, 289, 290, 291, 346, 351, 526, 551, 558, 605, 657, 658, 659, 720, 866], "breezah": 99, "languag": [99, 139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 695, 698, 703], "terribl": 99, "mydf": 99, "write_csv": [99, 237], "lambda": [99, 117, 124, 133, 165, 210, 237, 250, 283, 338, 339, 340, 377, 378, 404, 489, 516, 526, 546, 566, 572, 599, 605, 614, 649, 713, 714, 715, 866], "raw_filesystem": 100, "adjust": [100, 338, 339, 340, 425, 526, 713, 714, 715, 801, 866], "subtreefilesystem": 100, "reli": 100, "mention": 100, "pleas": 100, "ensur": [100, 110, 111, 113, 174, 237, 472, 526, 566, 605, 849, 855, 866], "gcsf": 100, "pyfilesystem": 100, "fsspechandl": 100, "gcsfilesystem": 100, "id": [100, 210, 444, 445, 470, 472, 526, 599, 854, 866], "token": 100, "pa_f": 100, "adlf": 100, "azureblobfilesystem": 100, "account_nam": 100, "account_kei": 100, "allow_pyarrow_filt": 101, "lead": [101, 237, 417, 442, 447, 453, 457, 463, 472, 503, 506, 513, 526, 566, 599, 605, 791, 818, 829, 833, 866], "comparison": 101, "dset": 101, "folder": 101, "out": [101, 105, 140, 237, 269, 358, 361, 526, 557, 605, 635], "1970": 101, "stdout": 105, "14": [105, 117, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 237, 355, 526, 698], "platform": 105, "linux": 105, "microsoft": 105, "standard": [105, 185, 237, 312, 339, 411, 425, 430, 439, 514, 526, 585, 605, 681, 714, 801, 805, 815, 866], "wsl2": 105, "x86_64": 105, "glibc2": 105, "main": 105, "jul": [105, 454, 830], "56": [105, 465, 526], "gcc": 105, "20210110": 105, "23": [105, 139, 140, 237, 240, 310, 325, 491, 556, 557, 605, 679], "check_dtyp": [106, 107], "check_exact": [106, 107], "check_column_nam": 106, "rtol": [106, 107], "1e": [106, 107], "atol": [106, 107], "nans_compare_equ": [106, 107], "assertionerror": [106, 107], "compar": [106, 107, 134, 198, 237, 589, 605, 788, 866], "exactli": [106, 107, 110, 111, 450, 451, 796, 826, 827, 866], "toler": [106, 107, 152, 237, 562, 605], "inexact": [106, 107], "assert": [106, 107, 109, 110, 111, 140, 237, 535, 557, 605, 725, 866], "check_nam": 107, "s1": [107, 133, 237, 858, 866], "searchstrategi": [108, 110, 111], "null_prob": [108, 110, 111], "percentag": [108, 110, 111, 393, 526, 764, 866], "chanc": [108, 110, 111], "hypothesi": [108, 109, 110, 111, 873], "sampled_from": 108, "unique_small_int": 108, "ccy": 108, "gbp": 108, "eur": [108, 121, 137, 237], "jpy": 108, "min_col": [109, 110], "max_col": [109, 110], "suitabl": 109, "standalon": [109, 110], "itself": [109, 564, 605], "explicit": [109, 478, 510], "omit": [109, 110, 111, 161, 237], "random": [109, 110, 111, 141, 176, 237, 352, 398, 415, 421, 526, 726, 769, 786, 797, 866], "mincol": 109, "exact": [109, 110, 111, 182, 237, 454, 830], "control": 109, "especi": 109, "punctuat": 109, "test_special_char_colname_init": 109, "z": [109, 110, 126, 147, 149, 151, 158, 237, 264, 287, 352, 401, 526, 561, 570, 583, 605, 653, 720, 866], "test_unique_xyz": 109, "assert_someth": 109, "min_siz": [110, 111], "max_siz": [110, 111], "include_col": 110, "allow_infin": [110, 111], "allowed_dtyp": [110, 111], "excluded_dtyp": [110, 111], "describ": [110, 137, 237, 598, 866], "desir": 110, "param": [110, 111, 174, 237], "n_chunk": [110, 111, 237, 866], "randomis": 110, "individu": [110, 140, 237, 250, 438, 526, 557, 605, 655, 814, 866], "append": [110, 128, 151, 152, 237, 399, 526, 561, 562, 605, 866], "onto": 110, "independ": [110, 111], "either": [110, 140, 153, 156, 174, 186, 237, 557, 564, 605], "basi": 110, "pct": 110, "take": [110, 133, 165, 188, 237, 322, 331, 464, 493, 495, 526, 588, 605, 695, 704, 841, 858, 866], "preced": 110, "disallow": [110, 111], "exclud": [110, 111, 356, 482, 513, 526], "deploi": [110, 111], "characterist": [110, 111], "develop": [110, 111], "directli": [110, 111, 338, 339, 340, 526, 713, 714, 715, 866], "concret": [110, 111], "test_repr": [110, 111], "isinst": [110, 111, 237], "repr": [110, 111], "known": [110, 599], "colnam": [110, 125, 237, 378, 526, 547, 605], "df_strategi": 110, "15836": 110, "1755e": 110, "38": 110, "575050513": 110, "constructor": 111, "op": [111, 401, 526], "max_data_s": 111, "distinct": [111, 163, 237, 284, 398, 490, 491, 492, 526, 650, 769, 866], "54666": 111, "35": 111, "6414": 111, "63290": 111, "pool": 112, "return_dtyp": [117, 237, 250, 377, 477, 502, 526, 614, 866], "inference_s": [117, 237], "256": [117, 237, 764, 866], "user": [117, 165, 210, 237, 250, 417, 477, 526, 572, 599, 605, 614, 791, 866], "udf": [117, 165, 210, 237, 250, 477, 526, 572, 599, 605, 614, 866], "logic": [117, 210, 237, 250, 467, 526, 554, 561, 575, 597, 599, 605, 851, 866], "almost": [117, 210, 237, 250, 526, 599], "_significantly_": [117, 210, 237, 250, 526, 599], "intens": [117, 210, 237, 250, 526, 599], "becaus": [117, 126, 139, 153, 200, 210, 237, 250, 267, 526, 556, 599, 605, 614, 633, 712, 866], "forc": [117, 152, 210, 237, 250, 526, 561, 562, 599, 605], "materi": [117, 210, 237, 250, 526, 573, 599, 605], "parallelis": [117, 210, 237, 250, 526, 599], "optimis": [117, 210, 237, 250, 526, 599, 789, 790, 866], "wherev": [117, 210, 237, 250, 526, 599], "strongli": [117, 210, 237, 250, 526, 599], "prefer": [117, 128, 210, 237, 250, 404, 526, 599, 605, 613, 775, 866], "achiev": [117, 210, 237, 250, 526, 599], "best": [117, 210, 237, 250, 526, 599], "tri": [117, 237], "arbitrarili": [117, 237], "rearrang": [117, 237], "want": [117, 128, 161, 237, 289, 290, 291, 347, 377, 405, 406, 407, 408, 409, 411, 412, 413, 487, 496, 526, 541, 558, 565, 605, 613, 657, 658, 659, 849, 866], "preserv": [117, 237], "syntax": [117, 161, 184, 237, 582, 584, 605, 866], "15": [117, 139, 140, 145, 237, 300, 325, 330, 526, 556, 557, 605, 667, 698, 703, 866], "better": [117, 210, 237, 250, 472, 526, 599, 789, 790, 866], "scalar": [117, 150, 237, 416, 477, 526, 746, 787, 866], "ident": [118, 119, 237, 539, 540, 605, 656, 660, 866], "cheap": [118, 119, 237, 539, 540, 605, 613, 656, 660, 866], "deepcopi": [118, 119, 237, 539, 540, 605, 656, 660, 866], "13": [118, 119, 129, 130, 136, 140, 145, 153, 160, 206, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 237, 240, 404, 406, 483, 518, 526, 539, 540, 550, 551, 557, 564, 594, 605, 614, 698, 703, 705, 866], "clear": [119, 237, 540, 605, 660, 866], "properti": [120, 125, 143, 177, 179, 204, 237, 535, 542, 547, 578, 592, 605, 710, 722, 728, 759, 792, 844, 866], "appl": [120, 144, 151, 170, 172, 190, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 237, 395, 403, 436, 452, 460, 526, 561, 576, 605, 812, 828], "banana": [120, 190, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 237, 395, 403, 460, 526], "summari": [121, 237, 668, 866], "glimps": [121, 142, 237], "usd": [121, 137, 237], "2020": [121, 137, 140, 237, 308, 311, 314, 316, 318, 321, 327, 335, 557, 605, 675, 677, 680, 686, 688, 691, 694, 700, 708], "2021": [121, 137, 139, 201, 237, 454, 501, 556, 605, 681, 731, 830, 866], "null_count": [121, 124, 237, 300, 526, 667, 668, 866], "266667": [121, 237], "666667": [121, 156, 202, 216, 237, 338, 526, 591, 605], "std": [121, 237, 404, 526, 605, 668, 782, 866], "101514": [121, 237], "707107": [121, 237, 339, 526, 714, 866], "57735": [121, 237], "median": [121, 166, 237, 407, 526, 595, 605, 778, 866], "snippet": [124, 237, 546, 605], "fold": [124, 237, 383, 481, 487, 488, 510, 516, 546, 605], "acc": [124, 237, 487, 488, 496, 510, 546, 605], "is_nul": [124, 237, 526, 546, 605, 866], "height": [124, 237], "sizeunit": [126, 237, 712, 866], "total": [126, 237, 712, 866], "heap": [126, 237, 712, 866], "its": [126, 199, 237, 325, 330, 590, 605, 698, 703, 712, 866], "bitmap": [126, 237, 712, 866], "therefor": [126, 237, 283, 712, 866], "structarrai": [126, 237, 712, 866], "constant": [126, 140, 237, 557, 605, 712, 866], "unchang": [126, 237, 250, 467, 526, 566, 599, 605, 712, 851, 866], "visibl": [126, 237, 712, 866], "capac": [126, 182, 237, 712, 796, 866], "ffi": [126, 237, 712, 866], "kb": [126, 237, 712, 866], "mb": [126, 237, 712, 866], "gb": [126, 237, 712, 866], "tb": [126, 237, 712, 866], "scale": [126, 237, 712, 866], "1_000_000": [126, 237, 712, 866], "25888898": [126, 237], "689577102661133": [126, 237], "long": [127, 158, 200, 237, 548, 570, 605], "largelist": [127, 237], "letter": [127, 213, 223, 237, 341, 494, 526, 548, 600, 601, 605], "locat": [128, 172, 195, 199, 237, 590, 605, 613, 790, 840, 866], "faster": [128, 200, 237, 404, 443, 470, 526, 605, 613, 614, 775, 819, 866], "onlin": [128, 237, 613, 866], "rerun": [128, 237, 613, 866], "them": [128, 139, 140, 152, 201, 237, 271, 389, 390, 483, 526, 556, 557, 562, 605, 613, 637, 760, 761, 866], "latter": [128, 237, 613, 866], "20": [128, 144, 145, 165, 167, 171, 172, 237, 257, 258, 259, 261, 301, 325, 330, 352, 355, 501, 526, 572, 605, 703], "40": [128, 165, 237, 325, 330, 352, 526, 572, 605, 681, 703], "60": [128, 237, 326, 327, 454, 696, 699, 700, 830], "fill_valu": [129, 181, 200, 237, 345, 419, 526, 550, 581, 605, 719, 794, 866], "Not": [129, 237, 362, 364, 526, 550, 605], "To": [129, 237, 303, 304, 346, 503, 506, 516, 526, 550, 605], "fillnullstrategi": [130, 237, 346, 526, 551, 605, 720, 866], "matches_supertyp": [130, 237, 551, 605], "forward": [130, 152, 237, 346, 351, 526, 551, 562, 605, 720, 866], "consecut": [130, 237, 285, 346, 351, 431, 526, 551, 605, 720, 807, 866], "supertyp": [130, 237, 249, 526, 551, 605], "fill_nan": [130, 237, 526, 605, 866], "OR": [131, 237, 476, 552, 605], "reduct": [133, 237], "effect": [133, 237, 596, 605], "supercast": [133, 237], "similar": [133, 152, 237, 392, 526, 562, 605], "parent": [133, 237], "rule": [133, 237, 328, 701], "arithmet": [133, 237], "zip_with": [133, 237, 866], "foo11": [133, 237], "bar22": [133, 237], "null_equ": [134, 237, 788, 866], "retriev": [135, 237, 262, 263, 458, 628, 629, 834], "preview": [137, 237], "wide": [137, 158, 200, 237, 570, 605], "nice": [137, 237], "few": [137, 237], "head": [137, 154, 187, 237, 249, 372, 526, 565, 605, 749, 866], "tail": [137, 142, 208, 237, 249, 425, 526, 605, 801, 866], "maintain_ord": [138, 163, 166, 198, 201, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 237, 245, 250, 463, 469, 485, 526, 541, 544, 549, 555, 573, 582, 589, 605, 853, 866], "consist": [138, 237, 555, 605], "agg": [138, 139, 140, 237, 245, 250, 347, 427, 463, 474, 485, 526, 541, 544, 549, 555, 556, 557, 573, 582, 605], "loop": [138, 237], "sub_df": [138, 237], "index_column": [139, 140, 237, 556, 557, 605], "truncat": [139, 237, 556, 573, 605], "include_boundari": [139, 237, 556, 605], "start_bi": [139, 237, 556, 605], "startbi": [139, 237, 556, 605], "dynamicgroupbi": [139, 237], "normal": [139, 237, 337, 369, 425, 526, 556, 605, 711, 747, 801, 866], "groupbi": [139, 140, 161, 237, 240, 245, 250, 267, 300, 347, 392, 427, 428, 463, 474, 477, 485, 526, 541, 544, 549, 556, 557, 573, 582, 605, 633, 667, 866], "member": [139, 237, 556, 605, 737, 866], "seen": [139, 237, 285, 351, 526, 556, 605], "roll": [139, 140, 237, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 483, 526, 556, 557, 605, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 866], "slot": [139, 237, 266, 300, 301, 526, 556, 605, 632, 667, 669, 866], "1n": [139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 695, 698, 703], "nanosecond": [139, 140, 152, 201, 237, 322, 325, 326, 330, 405, 406, 407, 408, 409, 411, 412, 413, 492, 526, 556, 557, 562, 605, 695, 698, 699, 703], "1u": [139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 695, 698, 703], "microsecond": [139, 140, 152, 201, 237, 322, 325, 326, 330, 405, 406, 407, 408, 409, 411, 412, 413, 491, 492, 526, 556, 557, 562, 573, 605, 695, 698, 703], "1m": [139, 140, 152, 201, 237, 314, 316, 321, 322, 325, 327, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 686, 688, 694, 695, 698, 700, 703], "millisecond": [139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 492, 526, 556, 557, 562, 605, 695, 698, 703], "1h": [139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 679, 695, 698, 703], "1w": [139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 695, 698, 703], "week": [139, 140, 152, 201, 237, 322, 325, 330, 333, 405, 406, 407, 408, 409, 411, 412, 413, 492, 526, 556, 557, 562, 605, 695, 698, 703, 706], "month": [139, 140, 152, 201, 237, 307, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 490, 491, 526, 556, 557, 562, 605, 676, 695, 698, 703], "1y": [139, 140, 152, 201, 237, 322, 325, 330, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 695, 698, 703, 709], "year": [139, 140, 152, 201, 237, 312, 322, 323, 325, 330, 332, 405, 406, 407, 408, 409, 411, 412, 413, 490, 491, 526, 556, 557, 562, 605, 681, 695, 696, 698, 703, 705], "1i": [139, 140, 152, 201, 237, 322, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 557, 562, 605, 695], "Or": [139, 140, 152, 201, 237, 392, 519, 526, 556, 557, 562, 605], "10i": [139, 140, 237, 556, 557, 605], "often": [139, 140, 237, 401, 526, 556, 557, 605], "ascend": [139, 140, 237, 479, 556, 557, 605], "dynam": [139, 237, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 605], "matter": [139, 140, 237, 556, 557, 605], "neg": [139, 180, 181, 183, 237, 278, 279, 418, 419, 426, 448, 526, 556, 580, 581, 583, 596, 605, 644, 645, 793, 794, 802, 824, 866], "_lower_bound": [139, 237, 556, 605], "_upper_bound": [139, 237, 556, 605], "impact": [139, 237, 556, 605], "harder": [139, 237, 556, 605], "datapoint": [139, 237, 556, 605], "mondai": [139, 237, 333, 556, 605, 706], "date_rang": [139, 201, 237, 305, 307, 308, 309, 310, 311, 314, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 556, 605, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709], "30m": [139, 237, 325, 330, 556, 605, 698, 703], "time_min": [139, 237, 556, 605], "time_max": [139, 237, 556, 605], "boundari": [139, 237, 289, 290, 291, 526, 556, 605, 657, 658, 659, 866], "ad": [139, 197, 205, 237, 249, 487, 488, 526, 556, 593, 605], "time_count": [139, 237, 556, 605], "_lower_boundari": [139, 237, 556, 605], "_upper_boundari": [139, 237, 556, 605], "lower_bound": [139, 237, 526, 556, 605], "upper_bound": [139, 237, 283, 526, 556, 605], "time_agg_list": [139, 237, 556, 605], "idx": [139, 237, 283, 556, 605, 649, 790, 866], "arang": [139, 200, 210, 237, 556, 599, 605], "2i": [139, 237, 556, 605], "3i": [139, 237, 556, 605], "a_agg_list": [139, 237, 556, 605], "rollinggroupbi": [140, 237], "dynamic_groupbi": [140, 237, 557, 605], "groupby_dynam": [140, 237, 557, 605], "45": [140, 237, 325, 330, 433, 438, 557, 605, 698, 703, 809, 814], "48": [140, 237, 557, 605], "18": [140, 237, 325, 330, 334, 355, 368, 526, 557, 573, 605, 707], "19": [140, 152, 237, 325, 557, 562, 605, 698, 703], "43": [140, 237, 557, 605], "strptime": [140, 237, 328, 557, 605, 701], "2d": [140, 193, 237, 557, 605, 676], "sum_a": [140, 237, 557, 605], "min_a": [140, 237, 557, 605], "max_a": [140, 237, 557, 605], "to_list": [140, 237, 283, 557, 605, 649, 866], "seed": [141, 176, 237, 352, 415, 421, 526, 726, 786, 797, 866], "seed_1": [141, 237, 352, 526, 726, 866], "seed_2": [141, 237, 352, 526, 726, 866], "seed_3": [141, 237, 352, 526, 726, 866], "hash": [141, 237, 526, 866], "u64": [141, 237, 352, 400, 526, 573, 605, 726, 866], "10783150408545073287": [141, 237], "1438741209321515184": [141, 237], "10047419486152048166": [141, 237], "2047317070637311557": [141, 237], "grown": [144, 237], "baz": [145, 146, 166, 199, 220, 237, 449, 451, 560, 590, 605, 827], "intermedi": [146, 237, 560, 605, 729, 866], "linear": [146, 168, 221, 237, 264, 355, 381, 397, 409, 483, 484, 509, 526, 560, 574, 605, 630, 729, 768, 780, 866], "mask": [147, 149, 237, 265, 357, 359, 367, 526, 631, 721, 732, 735, 744, 765, 766, 789, 808, 858, 866], "equival": [150, 161, 237, 443, 746, 819, 831, 832, 866], "left_on": [151, 152, 237, 561, 562, 605], "right_on": [151, 152, 237, 561, 562, 605], "joinstrategi": [151, 237, 561, 605], "suffix": [151, 152, 208, 237, 362, 364, 365, 366, 403, 436, 526, 561, 562, 595, 605, 812], "_right": [151, 152, 237, 561, 562, 605], "outer": [151, 237, 561, 605], "semi": [151, 237, 561, 605], "anti": [151, 237, 561, 605, 789, 790, 866], "cross": [151, 237, 561, 605], "join_asof": [151, 237, 561, 605], "stringcach": [151, 237, 535], "other_df": [151, 237, 561, 605], "by_left": [152, 237, 562, 605], "by_right": [152, 237, 562, 605], "asofjoinstrategi": [152, 237, 562, 605], "allow_parallel": [152, 237, 561, 562, 605], "force_parallel": [152, 237, 561, 562, 605], "asof": [152, 237, 562, 605], "rather": [152, 237, 457, 562, 605, 833], "asof_join": [152, 237], "search": [152, 237, 562, 605], "last": [152, 166, 184, 187, 198, 223, 237, 259, 261, 269, 282, 300, 307, 323, 332, 451, 462, 517, 526, 562, 584, 587, 589, 601, 605, 623, 626, 635, 648, 667, 676, 696, 705, 827, 839, 866], "greater": [152, 237, 425, 451, 526, 562, 605, 801, 827, 866], "numer": [152, 237, 289, 290, 291, 401, 420, 526, 535, 562, 605, 657, 658, 659, 743, 788, 795, 866], "distanc": [152, 237, 562, 605], "plan": [152, 153, 237, 538, 543, 544, 554, 561, 562, 575, 582, 597, 605], "gdp": [152, 237, 562, 605], "2016": [152, 237, 562, 605], "2017": [152, 237, 562, 605], "2018": [152, 237, 562, 605], "2019": [152, 237, 562, 605], "record": [152, 237, 562, 605], "jan": [152, 237, 562, 605], "1st": [152, 237, 562, 605], "4164": [152, 237, 562, 605], "4411": [152, 237, 562, 605], "4566": [152, 237, 562, 605], "4696": [152, 237, 562, 605], "popul": [152, 237, 562, 605], "12th": [152, 237, 562, 605], "82": [152, 237, 562, 605], "66": [152, 237, 562, 605, 780, 866], "83": [152, 237, 562, 605], "52": [152, 206, 237, 414, 526, 562, 594, 605], "request": [153, 237], "small": [153, 237, 325, 330, 427, 428, 526, 549, 605], "describe_plan": [153, 237, 605], "unoptim": [153, 237, 544, 605], "describe_optimized_plan": [153, 237, 605], "show_graph": [153, 237, 605], "un": [153, 237], "graphviz": [153, 237, 582, 605], "advis": [153, 237], "thei": [153, 237, 341, 404, 526, 605, 775, 866], "axi": [155, 156, 158, 159, 186, 237, 570, 605], "null_strategi": [156, 186, 237], "nullstrategi": [156, 186, 237], "propag": [156, 186, 237, 389, 390, 526, 760, 761, 866], "spam": [156, 237], "id_var": [158, 237, 570, 605], "value_var": [158, 237, 570, 605], "variable_nam": [158, 237, 570, 605], "value_nam": [158, 237, 570, 605], "unpivot": [158, 237, 570, 605], "leav": [158, 237, 570, 605], "identifi": [158, 237, 570, 605], "massag": [158, 237, 570, 605], "measur": [158, 237, 570, 605], "One": [161, 166, 237, 866], "what": [161, 237, 849, 857, 866], "struct": [161, 196, 199, 237, 283, 450, 451, 472, 487, 488, 489, 526, 590, 605, 649, 826, 827], "pack": [161, 237], "expr_unique_subset": [161, 237], "df_nuniqu": [161, 237], "df_agg_nuniqu": [161, 237], "simpl": [161, 237], "as_dict": [163, 237], "predict": [163, 166, 169, 201, 237], "k": [163, 237, 287, 369, 468, 526, 653, 747, 852, 866], "l": [163, 237, 349, 526], "pearson": [164, 237, 369, 425, 508, 526, 747, 801, 866], "correl": [164, 237, 508, 513], "coeffici": [164, 237, 425, 526, 801, 866], "corrcoef": [164, 237], "func": [165, 237, 572, 605, 614, 866], "offer": [165, 237, 572, 605], "wai": [165, 237, 572, 605], "recommend": [165, 237], "fulli": [165, 237], "advantag": [165, 237], "cast_str_to_int": [165, 237, 572, 605], "col_nam": [165, 237, 572, 605], "tdf": [165, 237, 572, 605], "aggregate_fn": [166, 237], "pivotagg": [166, 237], "sort_column": [166, 237], "well": [166, 237], "predefin": [166, 237], "transpos": [166, 220, 237], "discoveri": [166, 237], "interpol": [168, 221, 237, 346, 381, 397, 409, 509, 526, 574, 605, 768, 780, 866], "rollinginterpolationmethod": [168, 221, 237, 397, 409, 509, 526, 574, 605, 768, 780, 866], "midpoint": [168, 221, 237, 397, 409, 509, 526, 574, 605, 768, 780, 866], "subsequ": [169, 237], "pair": [170, 237, 576, 605], "old": [170, 237, 576, 605], "new_col": [171, 237], "val": [173, 237, 287, 467, 526, 577, 605, 653], "by_pred": [174, 237], "accord": [174, 237, 681], "mutual": [174, 237], "exclus": [174, 237], "addition": [174, 237], "clariti": [174, 237], "suppli": [174, 237], "anyth": [174, 237], "toomanyrowsreturn": [174, 237, 535], "norowsreturn": [174, 237, 535], "inherit": [174, 237], "rowsexcept": [174, 237, 535], "frac": [176, 237, 338, 339, 340, 415, 425, 468, 526, 713, 714, 715, 786, 801, 852, 866], "with_replac": [176, 237, 415, 526, 786, 866], "shuffl": [176, 210, 237, 415, 526, 599, 786, 866], "modul": [176, 237, 415, 421, 525, 526, 786, 866], "whenthen": [178, 237, 579, 605], "whenthenthen": [178, 237, 579, 605], "shift_and_fil": [180, 237, 526, 605, 866], "shift": [181, 237, 266, 301, 393, 419, 483, 526, 581, 605, 632, 669, 764, 794, 866], "shrink": [182, 237, 420, 526, 795, 796, 866], "fit": [182, 200, 237, 420, 526, 795, 796, 866], "hold": [182, 237, 482], "nulls_last": [184, 237, 259, 261, 427, 526, 584, 605, 623, 626, 866], "ddof": [185, 202, 237, 430, 473, 508, 513, 514, 518, 526, 585, 591, 605, 805, 856, 866], "deviat": [185, 237, 339, 411, 430, 514, 526, 585, 605, 714, 805, 866], "degre": [185, 202, 237, 430, 473, 508, 513, 526, 805, 856, 866], "freedom": [185, 202, 237, 430, 473, 508, 513, 526, 805, 856, 866], "816497": [185, 237], "21": [186, 237], "16a": [186, 237], "27b": [186, 237], "38c": [186, 237], "nth": [188, 237, 451, 464, 526, 588, 605, 827, 841, 866], "mostli": [189, 237, 347, 526], "categoricaltyp": [189, 237], "large_str": [189, 237], "as_seri": [190, 237], "fruit": [190, 237, 395, 403, 436, 452, 460, 526, 812, 828], "car": [190, 237, 395, 403, 460, 526], "beetl": [190, 237, 395, 403, 460, 526], "audi": [190, 237, 395, 403, 460, 526], "28": [190, 237, 334, 707], "300": [190, 237, 776, 777, 779, 866], "hot": [192, 237], "re": [193, 237, 500], "ll": [193, 237, 849, 866], "numpy_arrai": [193, 237], "date_as_object": [194, 237], "sent": [194, 237, 849, 866], "datetime64": [194, 237], "pandas_df": [194, 237], "three": [196, 237, 416, 515, 526], "four": [196, 237, 515], "five": [196, 237], "num": [196, 237, 356, 359, 457, 526], "include_head": [197, 237], "header_nam": [197, 237], "column_nam": [197, 237], "iter": [197, 237, 300, 526, 667, 866], "veri": [197, 237, 540, 605, 660, 866], "perhap": [197, 237], "column_2": [197, 237], "name_gener": [197, 237, 283, 649], "base_nam": [197, 237], "my_column_": [197, 237], "my_column_0": [197, 237], "my_column_1": [197, 237], "my_column_2": [197, 237], "uniquekeepstrategi": [198, 237, 589, 605], "conjunct": [198, 237], "decompos": [199, 237, 590, 605], "t_a": [199, 237, 590, 605], "t_b": [199, 237, 590, 605], "t_c": [199, 237, 590, 605], "t_d": [199, 237, 590, 605], "womp": [199, 237, 590, 605], "t_": [199, 237, 590, 605], "t_struct": [199, 237, 590, 605], "step": [200, 237, 478], "unstackdirect": [200, 237], "form": [200, 237, 393, 526, 764, 866], "much": [200, 237, 300, 526, 667, 866], "pivot": [200, 237], "phase": [200, 237], "subject": [200, 237], "ascii_uppercas": [200, 237], "col1": [200, 237], "col2": [200, 237], "h": [200, 237, 349, 420, 526], "col1_0": [200, 237], "col1_1": [200, 237], "col1_2": [200, 237], "col2_0": [200, 237], "col2_1": [200, 237], "col2_2": [200, 237], "time_column": [201, 237], "frequenc": [201, 237], "forward_fil": [201, 237, 526], "06": [201, 237, 324, 336, 698, 706], "varianc": [202, 237, 340, 369, 413, 473, 518, 526, 591, 605, 715, 747, 784, 856, 866], "grow": [203, 237], "b_squar": [205, 237, 593, 605], "36": [205, 237, 593, 605], "named_expr": [206, 237, 594, 605], "is_not": [206, 237, 526, 594, 605], "opt": [206, 237, 594, 605], "with_columns_kwarg": [206, 237, 594, 605], "row_nr": [207, 237, 596, 605, 790, 866], "complet": [208, 849, 866], "idiomat": 208, "_sum": 208, "_tail_sum": 208, "bar_sum": 208, "bar_tail_sum": 208, "sub": [210, 436, 452, 812, 828], "triangl": [210, 599], "group_df": [210, 599], "nr": [213, 223, 600, 601], "maxim": [215, 227, 257, 526, 621, 866], "833333": 216, "minim": [218, 230, 258, 263, 420, 526, 622, 629, 755, 795, 866], "pivot_column": 220, "values_column": 220, "pivotop": 220, "larg": [220, 427, 428, 526], "overview": [237, 526, 535, 605, 866], "public": [237, 526, 535, 605, 866], "columnstyp": 237, "variou": [237, 526, 605, 866], "behavior": [237, 250, 477, 503, 506, 526], "mydatafram": 237, "notic": [237, 866], "initi": [237, 487, 496], "df4": 237, "drop_in_plac": 237, "drop_nul": [237, 303, 526, 605, 866], "estimated_s": [237, 866], "explod": [237, 349, 526, 605, 866], "find_idx_by_nam": 237, "frame_equ": [237, 325, 330], "get_column": [237, 516], "groupby_rol": [237, 405, 406, 407, 408, 409, 411, 412, 413, 526, 556, 605], "hash_row": 237, "hstack": 237, "insert_at_idx": 237, "is_dupl": [237, 526, 866], "is_empti": [237, 866], "is_uniqu": [237, 526, 866], "melt": [237, 605], "n_uniqu": [237, 526, 598, 866], "partition_bi": 237, "pearson_corr": 237, "pipe": [237, 605], "quantil": [237, 409, 526, 605, 780, 866], "replace_at_idx": 237, "shrink_to_fit": [237, 866], "take_everi": [237, 526, 605, 866], "to_arrow": [237, 866], "to_dict": 237, "to_numpi": [237, 377, 526, 866], "to_panda": [237, 866], "to_struct": [237, 458, 459], "unnest": [237, 450, 451, 605, 826, 827], "unstack": 237, "upsampl": 237, "var": [237, 526, 605, 866], "write_avro": 237, "write_ipc": 237, "write_json": [237, 575, 605], "write_parquet": 237, "favor": 240, "futur": 240, "94": [245, 526], "confus": [247, 362, 364, 526], "tt": [247, 526], "tf": [247, 248, 526], "ff": [247, 248, 526], "upcast": [249, 526], "assum": [250, 526, 566, 599, 605], "a_times_2": [250, 526], "invers": [251, 252, 253, 254, 255, 256, 526, 615, 616, 617, 618, 619, 620, 866], "cosin": [251, 252, 292, 293, 377, 526, 615, 616, 661, 662, 866], "570796": [251, 253, 526, 615, 617, 866], "hyperbol": [252, 254, 256, 293, 424, 466, 526, 616, 618, 620, 662, 800, 843, 866], "sine": [253, 254, 377, 423, 424, 526, 617, 618, 799, 800, 866], "881374": [254, 526, 618, 866], "tangent": [255, 256, 465, 466, 526, 619, 620, 842, 843, 866], "785398": [255, 526, 619, 866], "would": [259, 261, 269, 382, 398, 479, 526, 623, 626, 635, 769, 849, 866], "arg_sort": [261, 526, 626, 866], "sublist": [262, 263, 265, 266, 268, 269, 270, 271, 272, 279, 282, 628, 629, 631, 632, 634, 635, 636, 637, 638, 645, 648, 737, 866], "membership": [265, 631], "null_behavior": [266, 301, 526, 632, 669, 866], "nullbehavior": [266, 301, 526, 632, 669, 866], "th": [266, 301, 425, 526, 632, 669, 801, 866], "against": [267, 633, 872], "blindli": [267, 633], "worth": [267, 633], "enough": [267, 425, 526, 633, 801, 866], "concat_list": [267, 493, 633], "rank": [267, 493, 513, 526, 633, 866], "taken": [279, 448, 463, 526, 645, 824], "n_field_strategi": [283, 649], "tostructstrategi": [283, 649], "first_non_nul": [283, 649], "max_width": [283, 649], "field_0": [283, 649], "field_1": [283, 649], "field_n": [283, 649], "know": [283, 443, 819, 849, 857, 866], "caller": [283, 566, 599, 605], "incorrectli": 283, "downstream": [283, 417, 526, 791, 866], "advic": 283, "col_name_": [283, 649], "col_name_0": [283, 649], "col_name_1": [283, 649], "col_name_2": [283, 649], "strict": [286, 434, 454, 526, 651, 788, 810, 830, 866], "throw": [286, 439, 526, 651, 815, 866], "due": [286, 526, 651, 866], "overflow": [286, 298, 299, 461, 526, 651, 665, 666, 838, 866], "categoricalord": [287, 653], "lexic": [287, 653], "min_val": [289, 291, 526, 657, 659, 866], "max_val": [289, 290, 526, 657, 658, 866], "foo_clip": [289, 290, 291, 526], "clip": [290, 291, 526, 658, 659, 866], "543081": [293, 526, 662, 866], "cumul": [295, 296, 297, 298, 299, 487, 488, 489, 526, 663, 664, 665, 666, 866], "a_revers": [295, 296, 297, 298, 299, 378, 403, 460, 526], "uint16": [298, 299, 461, 526, 665, 666, 838, 866], "prevent": [298, 299, 368, 461, 526, 665, 666, 838, 866], "min_period": [300, 338, 339, 340, 404, 405, 406, 407, 408, 409, 411, 412, 413, 526, 667, 713, 714, 715, 775, 776, 777, 778, 779, 780, 782, 783, 784, 866], "slide": [300, 526, 667, 866], "anoth": [300, 305, 331, 428, 526, 595, 605, 614, 667, 674, 704, 788, 866], "realli": [300, 526, 667, 866], "complex": [300, 468, 526, 667, 852, 866], "visit": [300, 526, 667, 866], "44": [302, 526], "drop_nan": [304, 526, 866], "tu": [305, 309, 329, 334, 674, 675, 678, 702, 707], "lose": [305, 674], "2001": [305, 307, 309, 310, 317, 319, 322, 323, 324, 325, 326, 329, 330, 332, 333, 334, 336, 454, 674, 676, 678, 679, 682, 683, 684, 685, 687, 689, 690, 692, 693, 695, 696, 697, 698, 699, 701, 702, 703, 705, 706, 707, 709, 830], "tu_m": [305, 674], "tu_n": [305, 674], "tz": [306, 331, 335, 675, 704, 708], "with_time_zon": [306, 675], "timestamp": [306, 675], "extract": [307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 326, 327, 332, 333, 336, 438, 439, 676, 677, 679, 680, 681, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 699, 700, 705, 706, 709, 814, 815], "weekdai": [307, 323], "day_of_month": [307, 323, 333], "ordinal_dai": [307, 333], "day_of_year": [307, 323, 333], "diff": [308, 311, 314, 316, 318, 321, 327, 526, 677, 680, 686, 688, 691, 694, 700, 866], "days_diff": 308, "epochtimeunit": [309, 678], "unix": [309, 678], "epoch_n": [309, 678], "epoch_": [309, 678], "978307200000000": [309, 329, 678, 702], "978307200": [309, 678], "978393600000000": [309, 329, 678, 702], "978393600": [309, 678], "978480000000000": [309, 329, 678, 702], "978480000": [309, 678], "hours_diff": 311, "iso": [312, 332, 333, 681, 705, 706], "correspond": [312, 398, 526, 681, 769, 866], "microseconds_diff": 314, "1001": [314, 316, 321], "002": [314, 316, 321, 492, 686, 688, 694], "003": [314, 316, 321], "997": [314, 316, 321], "998": [314, 316, 321], "999": [314, 316, 321], "milliseconds_diff": 316, "59": [317, 326, 491, 690, 699], "minutes_diff": 318, "1440": [318, 691], "nanoseconds_diff": 321, "1000000": [321, 457, 694], "leap": [322, 695], "account": [322, 338, 339, 340, 526, 695, 713, 714, 715, 866], "minu": [322, 695], "dictat": [322, 695], "2000": [322, 695], "2005": [322, 695], "date_plus_1i": [322, 695], "1y2mo": [322, 695], "date_min": 322, "1998": [322, 695], "2002": [322, 324, 336, 695, 709], "1999": [322, 695], "2003": [322, 695], "2004": [322, 695], "2006": [322, 695], "ordin": [323, 398, 526, 696, 769, 866], "366": [323, 696], "180": [324, 336], "divid": [325, 330, 338, 339, 340, 369, 526, 698, 703, 713, 714, 715, 747, 866], "half": [325, 338, 339, 340, 526, 698, 713, 714, 715, 866], "seconod": [325, 698], "eg": [325, 330, 454], "225": [325, 330], "to_fram": [325, 330, 454, 458, 459, 789, 790, 826, 827, 830, 866], "10m": [325, 330, 698, 703], "milli": [326, 699], "micro": [326, 699], "compon": [326, 454, 490, 491, 492, 699], "456789": 326, "654321": 326, "111110": 326, "765431": 326, "sec": 326, "11111": 326, "seconds_diff": 327, "fmt": [328, 354, 454, 497, 526, 559, 605, 701, 830], "timestamp_n": [329, 702], "timestamp_m": 329, "978307200000": 329, "978393600000": 329, "978480000000": 329, "naiv": [331, 704], "53": [332, 705], "sundai": [333, 706], "incorrect": [334, 417, 526, 599, 707, 791, 866], "tu_u": [334, 707], "32971": [334, 707], "32974": [334, 707], "32976": [334, 707], "europ": [335, 675, 708], "london": [335, 675, 708], "gmt": [335, 675, 708], "bst": [335, 675, 708], "718281828459045": [337, 374, 526, 711, 750, 866], "formula": [337, 526, 711, 866], "pk": [337, 526, 711, 866], "459148": [337, 526], "754888": [337, 526], "com": [338, 339, 340, 437, 526, 713, 714, 715, 813, 866], "span": [338, 339, 340, 526, 713, 714, 715, 866], "half_lif": [338, 339, 340, 526, 713, 714, 715, 866], "exponenti": [338, 339, 340, 342, 526, 713, 714, 715, 716, 866], "weight": [338, 339, 340, 404, 405, 406, 407, 408, 409, 411, 412, 413, 425, 526, 713, 714, 715, 775, 776, 777, 778, 779, 780, 782, 783, 784, 801, 866], "averag": [338, 398, 526, 713, 769, 866], "decai": [338, 339, 340, 526, 713, 714, 715, 866], "term": [338, 339, 340, 440, 443, 526, 713, 714, 715, 816, 819, 866], "mass": [338, 339, 340, 526, 713, 714, 715, 866], "gamma": [338, 339, 340, 526, 713, 714, 715, 866], "foral": [338, 339, 340, 526, 713, 714, 715, 866], "geq": [338, 339, 340, 526, 713, 714, 715, 866], "theta": [338, 339, 340, 526, 713, 714, 715, 866], "life": [338, 339, 340, 526, 713, 714, 715, 866], "exp": [338, 339, 340, 526, 713, 714, 715, 866], "ln": [338, 339, 340, 526, 713, 714, 715, 866], "smooth": [338, 339, 340, 526, 713, 714, 715, 866], "factor": [338, 339, 340, 467, 526, 713, 714, 715, 851, 866], "leq": [338, 339, 340, 526, 713, 714, 715, 866], "begin": [338, 339, 340, 437, 526, 713, 714, 715, 813, 866], "imbal": [338, 339, 340, 526, 713, 714, 715, 866], "ew": [338, 339, 340, 526, 713, 714, 715, 866], "w_i": [338, 339, 340, 526, 713, 714, 715, 866], "recurs": [338, 339, 340, 526, 713, 714, 715, 866], "y_0": [338, 339, 340, 526, 713, 714, 715, 866], "x_0": [338, 339, 340, 526, 713, 714, 715, 866], "y_t": [338, 339, 340, 526, 713, 714, 715, 866], "y_": [338, 339, 340, 526, 713, 714, 715, 866], "x_t": [338, 339, 340, 526, 713, 714, 715, 866], "observ": [338, 339, 340, 526, 713, 714, 715, 866], "428571": [338, 526], "bia": [339, 340, 369, 410, 425, 526, 714, 715, 747, 781, 801, 866], "unbias": [339, 340, 526, 714, 715, 866], "963624": [339, 526, 714, 866], "928571": [340, 526, 715, 866], "wildcard": [341, 475, 482, 487, 488, 494, 496, 510, 526], "regex": [341, 432, 433, 436, 437, 438, 444, 445, 452, 482, 494, 526, 808, 809, 812, 813, 814, 820, 821, 828], "aa": [341, 494, 526], "ba": [341, 494, 526], "cc": [341, 494, 526], "718282": [342, 526], "389056": [342, 526], "54": [342, 526], "59815": [342, 526], "expand": [343, 349, 401, 526, 717, 866], "group_col": [347, 474, 526], "g1": [347, 392, 474, 526], "g2": [347, 392, 474, 526], "lt": [347, 474, 526], "gte": [347, 474, 526], "r": [349, 433, 437, 438, 444, 526, 809, 813, 814, 820], "word": [349, 526], "9774092659964970114": [352, 526], "13614470193936745724": [352, 526], "1101441246220388612": [352, 526], "11638928888656214026": [352, 526], "13382926553367784577": [352, 526], "cumsum": [354, 526, 559, 605, 866], "interpolationmethod": [355, 526, 729, 866], "regrid": [355, 526], "grid": [355, 526], "df_original_grid": [355, 526], "grid_point": [355, 526], "df_new_grid": [355, 526], "include_bound": [356, 526], "primit": [356, 360, 526, 849, 866], "finit": [358, 513, 526, 734, 866], "optional_memb": [360, 526, 737, 866], "infinit": [361, 526, 738, 866], "_isnan": [362, 526], "b_isnan": [362, 526], "negat": [363, 526], "_is_not_nan": [364, 526], "b_is_not_nan": [364, 526], "_not_nul": [365, 526], "a_not_nul": [365, 526], "b_not_nul": [365, 526], "_isnul": [366, 526], "a_isnul": [366, 526], "b_isnul": [366, 526], "undo": [368, 385, 526], "duplicateerror": [368, 526, 535], "occurr": [368, 526], "333333": [368, 413, 526, 764, 784, 866], "fisher": [369, 425, 526, 747, 801, 866], "fourth": [369, 526, 747, 866], "central": [369, 425, 526, 747, 801, 866], "definit": [369, 526, 747, 866], "subtract": [369, 526, 747, 866], "distribut": [369, 425, 526, 747, 801, 866], "elimin": [369, 526, 747, 866], "come": [369, 526, 536, 604, 747, 866], "bias": [369, 425, 526, 747, 801, 866], "scipi": [369, 425, 526, 747, 801, 866], "stat": [369, 425, 526, 747, 801, 866], "153061": [369, 526], "logarithm": [374, 375, 526, 750, 751, 866], "584963": [374, 526], "30103": [375, 526], "60206": [375, 526], "lowest": [376, 526], "9223372036854775808": [376, 526], "agg_list": [377, 526], "elementwis": [377, 404, 405, 406, 407, 408, 409, 411, 412, 413, 475, 476, 526, 775, 776, 777, 778, 779, 780, 782, 783, 784, 866], "third": [377, 526], "parti": [377, 526], "book": [377, 526], "argmax": [377, 526], "_revers": [378, 403, 460, 526], "b_revers": [378, 403, 460, 526], "computeerror": [382, 535], "keep_nam": [385, 526], "poison": [389, 390, 526, 760, 761, 866], "nanmax": [389, 390, 526, 760, 761, 866], "wherea": [389, 390, 526, 558, 565, 605, 760, 761, 866], "subgroup": [392, 526], "max_by_group": [392, 526], "recent": [393, 526, 764, 866], "percent": [393, 526, 764, 866], "090909": [393, 526], "expon": [394, 526], "power": [394, 526], "reverse_": [395, 526], "reverse_a": [395, 526], "reverse_fruit": [395, 526], "reverse_b": [395, 526], "reverse_car": [395, 526], "rankmethod": [398, 526, 769, 866], "ti": [398, 526, 769, 866], "appropri": [398, 526, 769, 866], "competit": [398, 526, 769, 866], "highest": [398, 471, 513, 526, 769, 866], "immedi": [398, 515, 526, 769, 866], "64bit": [400, 526, 771, 866], "safe": [400, 526, 771, 849, 866], "coerc": [401, 526], "dim": [402, 526, 773, 866], "flat": [402, 526, 773, 866], "fruits_revers": [403, 460, 526], "cars_revers": [403, 460, 526], "window_s": [404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 526, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 866], "rolling_min": [404, 526, 775, 866], "rolling_max": [404, 526, 775, 866], "rolling_mean": [404, 526, 775, 866], "rolling_sum": [404, 526, 775, 866], "multipli": [404, 405, 406, 407, 408, 409, 411, 412, 413, 526, 775, 776, 777, 778, 779, 780, 782, 783, 784, 866], "358899": [404, 526], "041452": [404, 526], "567764": [404, 526], "travers": [405, 406, 408, 411, 412, 413, 526, 776, 777, 779, 782, 783, 784, 866], "vector": [405, 406, 408, 411, 412, 413, 526, 776, 777, 779, 782, 783, 784, 866], "5h": [405, 406, 407, 408, 409, 411, 412, 413, 526], "33": [409, 414, 482, 526, 780, 866], "skew": [410, 526, 781, 866], "527525": [411, 526, 782, 866], "digit": [414, 457, 526, 785, 809, 833, 866], "17": [414, 526, 661, 698, 866], "maintain": [416, 469, 526, 605, 787, 853, 866], "six": [416, 526], "code": [417, 526, 564, 605, 791, 866], "care": [417, 526, 791, 866], "extrema": [420, 526, 795, 866], "112": [420, 526], "129": [420, 526], "i8": [420, 526, 774, 866], "8589934592": [420, 526], "1073741824": [420, 526], "content": [421, 472, 526, 797, 866], "175201": [424, 526, 800, 866], "unimod": [425, 526, 801, 866], "skewtest": [425, 526, 801, 866], "speak": [425, 526, 801, 866], "g_1": [425, 526, 801, 866], "m_3": [425, 526, 801, 866], "m_2": [425, 526, 801, 866], "m_i": [425, 526, 801, 866], "sum_": [425, 526, 801, 866], "texttt": [425, 526, 801, 866], "k_3": [425, 526, 801, 866], "k_2": [425, 526, 801, 866], "sqrt": [425, 526, 801, 866], "343622": [425, 526], "larger": [427, 513, 526], "414214": [429, 526, 804, 866], "substr": [432, 436, 444, 445, 449, 450, 451, 452, 808, 812, 820, 821, 825, 826, 827, 828], "treat": [432, 444, 445, 808, 820, 821], "ends_with": [432, 452, 828], "crab": [432, 808], "dog": [432, 455, 456, 484, 808], "rab": [432, 808], "success": [433, 438, 809, 814], "overlap": [433, 438, 809, 814], "captur": [433, 437, 438, 809, 813, 814], "123": [433, 438, 445, 809, 814, 821, 847, 866], "bla": [433, 438, 809, 814], "asd": [433, 438, 809, 814], "678": [433, 438, 809, 814], "910t": [433, 438, 809, 814], "count_digit": 433, "transferencod": [434, 435, 810, 811], "hex": [434, 435, 810, 811], "base64": [434, 435, 810, 811], "thrown": [434, 810], "unabl": [434, 810], "unhandl": [434, 810], "666f6f": [434, 435, 810, 811], "626172": [434, 435, 810, 811], "mango": [436, 452, 812, 828], "go": [436, 812], "has_suffix": 436, "group_index": [437, 813], "vote": [437, 813], "ballon_dor": [437, 813], "candid": [437, 813], "messi": [437, 813], "ref": [437, 813], "candidat": [437, 813], "jorginho": [437, 813], "ronaldo": [437, 813], "w": [437, 813], "extracted_nr": 438, "910": [438, 814], "json_path": [439, 815], "jsonpath": [439, 815], "regardless": [439, 815], "json_val": [439, 815], "n_char": [440, 816], "caf\u00e9": [440, 443, 816, 819], "345": [440, 443, 816, 819], "\u6771\u4eac": [440, 443, 816, 819], "nchar": [440, 443], "fillchar": [441, 446, 817, 822], "justifi": [441, 446, 817, 822], "pad": [441, 446, 457, 817, 822, 833], "cow": [441, 446, 817, 822], "monkei": [441, 446, 817, 822], "hippopotamu": [441, 446, 817, 822], "whitespac": [442, 447, 453, 818, 823, 829], "trail": [442, 447, 453, 823, 829], "text": [443, 444, 445, 819], "replace_al": [444, 820], "123abc": [444, 820], "abc456": [444, 820], "abcabc": [445, 821], "123a123": [445, 821], "bc": [445, 821], "trim": [447, 453, 818, 823, 829], "subslic": [448, 824], "pear": [448, 824], "papaya": [448, 824], "dragonfruit": [448, 824], "s_slice": 448, "ear": [448, 824], "aya": [448, 824], "uit": [448, 824], "ya": [448, 824], "onf": [448, 824], "inclus": [449, 450, 825, 826], "a_1": [450, 826, 846, 866], "d_4": [450, 826], "rename_field": [450, 451, 826, 827], "first_part": [450, 451, 826, 827], "second_part": [450, 451, 826, 827], "remaind": [451, 827], "prefix": [452, 457, 526, 828, 833], "app": [452, 828], "has_prefix": 452, "polarstemporaltyp": [454, 830], "tz_awar": [454, 830], "strftime": [454, 830], "convers": [454, 535, 830, 848, 849, 866], "anywher": [454, 830], "3f": 454, "sun": [454, 830], "34": [454, 830], "lowercas": [455, 831], "variant": [455, 456], "uppercas": [456, 832], "10000": 457, "100000": 457, "0010": 457, "0001": 457, "00000": 457, "00001": 457, "my_struct": [458, 459, 515], "NOT": [459, 555, 605], "anymor": 459, "panicexcept": [459, 535], "761594": [466, 526, 843, 866], "replic": [467, 526, 851, 866], "vals_phys": [467, 526], "largest": [468, 526, 852, 866], "smallest": [468, 526, 852, 866], "bottom_k": [468, 526], "appear": [470, 526, 854, 866], "value_count": [470, 526, 866], "9223372036854775807": [471, 526], "multithread": [472, 526], "columnwis": [475, 476], "AND": 475, "bitwis": [475, 476], "returns_scalar": 477, "Be": 478, "argsort": [479, 526, 866], "hamburg": 482, "concat": [483, 484, 655, 757, 866], "lag": 483, "mimic": 483, "a_lag_": 483, "a_rol": 483, "plai": 484, "swim": 484, "walk": 484, "full_sent": 484, "covari": 486, "intoexpr": [487, 496], "include_init": 487, "accumul": [487, 488, 496, 510], "fn": [487, 488, 496, 510], "new_valu": [487, 488, 496, 510], "simpli": [487, 496], "cumreduc": 487, "across": [489, 516], "syntact": [489, 494, 495, 498, 509, 512, 516, 804, 866], "sugar": [489, 494, 495, 498, 509, 512, 516, 804, 866], "cumfold": 489, "999999": 491, "add_week": 492, "add_dai": 492, "add_second": 492, "add_millisecond": 492, "add_hour": 492, "add_millisec": 492, "ond": 492, "eval": 493, "arr": [493, 520, 849, 859, 866], "mathemat": 493, "a_b_doubl": 493, "fstring": 497, "placehold": 497, "hello_": 497, "_world": 497, "foo_": 497, "_bar_": 497, "foo_a_bar_1": 497, "foo_b_bar_2": 497, "foo_c_bar_3": 497, "agg_group": [498, 526], "export": 500, "allow_object": 501, "valueexcept": 501, "544705": 508, "mode": [511, 526, 866], "propagate_nan": 513, "spearman": 513, "605551": 514, "605551275463989": 514, "sever": 515, "a_and_b": 515, "isn": 519, "thens": 519, "chain": 519, "sometim": 525, "ab": [526, 866], "arcco": [526, 866], "arccosh": [526, 866], "arcsin": [526, 866], "arcsinh": [526, 866], "arctan": [526, 866], "arctanh": [526, 866], "arg_max": [526, 866], "arg_min": [526, 866], "arg_uniqu": [526, 866], "backward_fil": 526, "clip_max": [526, 866], "clip_min": [526, 866], "co": [526, 866], "cosh": [526, 866], "cumcount": 526, "cummax": [526, 866], "cummin": [526, 866], "cumprod": [526, 866], "cumulative_ev": [526, 866], "entropi": [526, 866], "ewm_mean": [526, 866], "ewm_std": [526, 866], "ewm_var": [526, 866], "extend_const": [526, 866], "flatten": 526, "inspect": [526, 605], "is_between": 526, "is_finit": [526, 866], "is_first": [526, 866], "is_in": [526, 866], "is_infinit": [526, 866], "is_nan": [526, 866], "is_not_nan": [526, 866], "is_not_nul": [526, 866], "kurtosi": [526, 866], "log10": [526, 866], "map_alia": 526, "nan_max": [526, 866], "nan_min": [526, 866], "pct_chang": [526, 866], "pow": 526, "reinterpret": [526, 866], "repeat_bi": 526, "reshap": [526, 866], "rolling_appli": [526, 866], "rolling_median": [526, 866], "rolling_quantil": [526, 866], "rolling_skew": [526, 866], "rolling_std": [526, 866], "rolling_var": [526, 866], "search_sort": [526, 866], "set_sort": [526, 866], "shrink_dtyp": [526, 866], "sin": [526, 866], "sinh": [526, 866], "sort_bi": 526, "tan": [526, 866], "tanh": [526, 866], "to_phys": [526, 866], "top_k": [526, 866], "unique_count": [526, 866], "expos": 535, "registr": 535, "miscellan": 535, "unset": 535, "arrowerror": 535, "invalidoperationerror": 535, "nodataerror": 535, "notfounderror": 535, "schemaerror": 535, "shapeerror": 535, "build_info": 535, "show_vers": 535, "sqlcontext": [535, 872], "hit": [538, 605], "node": [538, 559, 566, 573, 605], "huge": [541, 605], "saver": [541, 605], "500": [549, 605, 685, 687, 693, 699, 776, 777, 779, 866], "purpos": [549, 605], "help": [549, 605], "influenc": [549, 566, 605], "read_json": [554, 597, 605], "lazygroupbi": [555, 556, 557, 605], "typeerror": [555, 605], "subscript": [555, 605], "validate_output_schema": [566, 605], "past": [566, 605], "paramount": [566, 605], "hard": [566, 605], "bug": [566, 599, 605], "invari": [566, 605], "upheld": [566, 605], "prune": [566, 605], "show_plot": [573, 605], "truncate_nod": [573, 605], "figsiz": [573, 582, 605], "gantt": [573, 605], "chart": [573, 605], "matplotlib": [573, 582, 605], "plot": [573, 582, 605], "groupby_partit": [573, 605], "470": [573, 605], "475": [573, 605], "1964": [573, 605], "from_json": [575, 605], "output_path": [582, 605], "raw_output": [582, 605], "figur": [582, 605], "290994": [585, 605], "118034": [585, 605], "433013": [585, 605], "1875": [591, 605], "extern": [595, 605], "df_a": [595, 605], "df_other": [595, 605], "afoo": [595, 605], "cfoo": [595, 605], "train_df": [595, 605], "feature_0": [595, 605], "feature_1": [595, 605], "test_df": [595, 605], "_train": [595, 605], "feature_0_train": [595, 605], "dataframescan": [597, 605], "output_schema": [597, 605], "unique_nam": 598, "againat": 605, "instanti": 605, "profil": 605, "sink_parquet": 605, "data_pagesize_limit": 605, "slightli": 605, "with_context": 605, "sr": [610, 866], "new_aliased_sr": [610, 866], "append_chunk": [613, 866], "super": [613, 866], "skip_nul": [614, 866], "141593": [615, 866], "292432": [616, 866], "549306": [620, 866], "listnamespac": 627, "catnamespac": 652, "12345": [654, 723, 785, 866], "56789": [654, 723, 785, 866], "901234": [654, 723, 785, 866], "pi": [661, 799, 842, 866], "1232e": [661, 866], "quick": [668, 866], "mix": [668, 866], "series_num": [668, 866], "581139": [668, 866], "series_str": [668, 866], "datetimenamespac": 673, "epoch": 675, "1583020800": 675, "1585699200": 675, "1588291200": 675, "nyc": 675, "edt": 675, "1583038800": 675, "1585717200": 675, "1588309200": 675, "500m": [685, 687, 693, 699], "500000": 685, "2m": 690, "500000000": 693, "date_minus_1y_2mon": 695, "165": [698, 703], "series_equ": [698, 703, 866], "timestamp_u": 702, "978307200000000000": 702, "978393600000000000": 702, "978480000000000000": 702, "005": [711, 866], "06293300616044681": [711, 866], "65": [711, 866], "8568409950394724": [711, 866], "4000000": [712, 866], "814697265625": [712, 866], "bitmask": [725, 866], "swiftli": [725, 866], "10734580197236529959": [726, 866], "3022416320763508302": [726, 866], "13756996518000038261": [726, 866], "datelik": [731, 866], "166667": [764, 866], "142857": [764, 866], "512": [764, 866], "peak": [765, 766, 866], "nanstd": [775, 866], "858612": [775, 866], "200": [776, 777, 779, 866], "400": [776, 777, 779, 866], "150": [777, 866], "250": [777, 866], "350": [777, 866], "450": [777, 866], "381802": [781, 866], "dev": [782, 866], "57": [785, 866], "frequent": [789, 790, 866], "mutat": [790, 866], "2246e": [799, 842, 866], "divisor": [805, 856, 866], "stringnamespac": 806, "6331e16": [842, 866], "int64arrai": [845, 866], "a_2": [846, 866], "a_3": [846, 866], "456": [847, 866], "zero_copy_onli": [849, 866], "writabl": [849, 866], "view": [849, 866], "presenc": [849, 866], "immut": [849, 866], "made": [849, 866], "ignore_nul": [857, 866], "seriesview": [857, 866], "arraylik": 866, "nan_to_nul": 866, "dtype_if_empti": 866, "position": 866, "posit": 866, "scenario": 866, "arg_tru": 866, "chunk_length": 866, "get_chunk": 866, "has_valid": 866, "inner_dtyp": 866, "is_boolean": 866, "is_datelik": 866, "is_float": 866, "is_numer": 866, "is_utf8": 866, "new_from_index": 866, "peak_max": 866, "peak_min": 866, "set_at_idx": 866, "readthedoc": 873}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [29, 0, 1, "", "DataType"], [30, 0, 1, "", "Date"], [31, 0, 1, "", "Datetime"], [32, 0, 1, "", "Duration"], [33, 0, 1, "", "Float32"], [34, 0, 1, "", "Float64"], [35, 0, 1, "", "Int16"], [36, 0, 1, "", "Int32"], [37, 0, 1, "", "Int64"], [38, 0, 1, "", "Int8"], [39, 0, 1, "", "List"], [40, 0, 1, "", "Null"], [41, 0, 1, "", "Object"], [872, 0, 1, "", "SQLContext"], [45, 0, 1, "", "StringCache"], [46, 0, 1, "", "Struct"], [47, 0, 1, "", "Time"], [48, 0, 1, "", "UInt16"], [49, 0, 1, "", "UInt32"], [50, 0, 1, "", "UInt64"], [51, 0, 1, "", "UInt8"], [52, 0, 1, "", "Unknown"], [53, 0, 1, "", "Utf8"], [54, 4, 1, "", "align_frames"], [475, 4, 1, "", "all"], [476, 4, 1, "", "any"], [477, 4, 1, "", "apply"], [478, 4, 1, "", "arange"], [59, 4, 1, "", "arg_where"], [479, 4, 1, "", "argsort_by"], [480, 4, 1, "", "avg"], [60, 4, 1, "", "build_info"], [481, 4, 1, "", "coalesce"], [482, 4, 1, "", "col"], [61, 4, 1, "", "collect_all"], [62, 4, 1, "", "concat"], [483, 4, 1, "", "concat_list"], [484, 4, 1, "", "concat_str"], [485, 4, 1, "", "count"], [486, 4, 1, "", "cov"], [487, 4, 1, "", "cumfold"], [488, 4, 1, "", "cumreduce"], [489, 4, 1, "", "cumsum"], [63, 4, 1, "", "cut"], [490, 4, 1, "", "date"], [64, 4, 1, "", "date_range"], [491, 4, 1, "", "datetime"], [492, 4, 1, "", "duration"], [493, 4, 1, "", "element"], [494, 4, 1, "", "exclude"], [495, 4, 1, "", "first"], [496, 4, 1, "", "fold"], [497, 4, 1, "", "format"], [77, 4, 1, "", "from_arrow"], [78, 4, 1, "", "from_dict"], [79, 4, 1, "", "from_dicts"], [80, 4, 1, "", "from_numpy"], [81, 4, 1, "", "from_pandas"], [82, 4, 1, "", "from_records"], [83, 4, 1, "", "get_dummies"], [84, 4, 1, "", "get_idx_type"], [498, 4, 1, "", "groups"], [499, 4, 1, "", "head"], [500, 4, 1, "", "list"], [501, 4, 1, "", "lit"], [502, 4, 1, "", "map"], [503, 4, 1, "", "max"], [504, 4, 1, "", "mean"], [505, 4, 1, "", "median"], [506, 4, 1, "", "min"], [507, 4, 1, "", "n_unique"], [86, 4, 1, "", "ones"], [508, 4, 1, "", "pearson_corr"], [509, 4, 1, "", "quantile"], [87, 4, 1, "", "read_avro"], [88, 4, 1, "", "read_csv"], [89, 4, 1, "", "read_csv_batched"], [90, 4, 1, "", "read_delta"], [91, 4, 1, "", "read_excel"], [92, 4, 1, "", "read_ipc"], [93, 4, 1, "", "read_ipc_schema"], [94, 4, 1, "", "read_json"], [95, 4, 1, "", "read_ndjson"], [96, 4, 1, "", "read_parquet"], [97, 4, 1, "", "read_parquet_schema"], [98, 4, 1, "", "read_sql"], [510, 4, 1, "", "reduce"], [511, 4, 1, "", "repeat"], [99, 4, 1, "", "scan_csv"], [100, 4, 1, "", "scan_delta"], [101, 4, 1, "", "scan_ds"], [102, 4, 1, "", "scan_ipc"], [103, 4, 1, "", "scan_ndjson"], [104, 4, 1, "", "scan_parquet"], [512, 4, 1, "", "select"], [105, 4, 1, "", "show_versions"], [513, 4, 1, "", "spearman_rank_corr"], [514, 4, 1, "", "std"], [515, 4, 1, "", "struct"], [516, 4, 1, "", "sum"], [517, 4, 1, "", "tail"], [112, 4, 1, "", "threadpool_size"], [113, 4, 1, "", "toggle_string_cache"], [518, 4, 1, "", "var"], [519, 4, 1, "", "when"], [114, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_str_lengths"], [10, 1, 1, "", "set_tbl_cell_alignment"], [11, 1, 1, "", "set_tbl_cols"], [12, 1, 1, "", "set_tbl_column_data_type_inline"], [13, 1, 1, "", "set_tbl_dataframe_shape_below"], [14, 1, 1, "", "set_tbl_formatting"], [15, 1, 1, "", "set_tbl_hide_column_data_types"], [16, 1, 1, "", "set_tbl_hide_column_names"], [17, 1, 1, "", "set_tbl_hide_dataframe_shape"], [18, 1, 1, "", "set_tbl_hide_dtype_separator"], [19, 1, 1, "", "set_tbl_rows"], [20, 1, 1, "", "set_tbl_width_chars"], [21, 1, 1, "", "set_verbose"], [22, 1, 1, "", "state"]], "polars.DataFrame": [[117, 1, 1, "", "apply"], [118, 1, 1, "", "cleared"], [119, 1, 1, "", "clone"], [120, 2, 1, "", "columns"], [121, 1, 1, "", "describe"], [122, 1, 1, "", "drop"], [123, 1, 1, "", "drop_in_place"], [124, 1, 1, "", "drop_nulls"], [125, 2, 1, "", "dtypes"], [126, 1, 1, "", "estimated_size"], [127, 1, 1, "", "explode"], [128, 1, 1, "", "extend"], [129, 1, 1, "", "fill_nan"], [130, 1, 1, "", "fill_null"], [131, 1, 1, "", "filter"], [132, 1, 1, "", "find_idx_by_name"], [133, 1, 1, "", "fold"], [134, 1, 1, "", "frame_equal"], [135, 1, 1, "", "get_column"], [136, 1, 1, "", "get_columns"], [137, 1, 1, "", "glimpse"], [138, 1, 1, "", "groupby"], [139, 1, 1, "", "groupby_dynamic"], [140, 1, 1, "", "groupby_rolling"], [141, 1, 1, "", "hash_rows"], [142, 1, 1, "", "head"], [143, 2, 1, "", "height"], [144, 1, 1, "", "hstack"], [145, 1, 1, "", "insert_at_idx"], [146, 1, 1, "", "interpolate"], [147, 1, 1, "", "is_duplicated"], [148, 1, 1, "", "is_empty"], [149, 1, 1, "", "is_unique"], [150, 1, 1, "", "item"], [151, 1, 1, "", "join"], [152, 1, 1, "", "join_asof"], [153, 1, 1, "", "lazy"], [154, 1, 1, "", "limit"], [155, 1, 1, "", "max"], [156, 1, 1, "", "mean"], [157, 1, 1, "", "median"], [158, 1, 1, "", "melt"], [159, 1, 1, "", "min"], [160, 1, 1, "", "n_chunks"], [161, 1, 1, "", "n_unique"], [162, 1, 1, "", "null_count"], [163, 1, 1, "", "partition_by"], [164, 1, 1, "", "pearson_corr"], [165, 1, 1, "", "pipe"], [166, 1, 1, "", "pivot"], [167, 1, 1, "", "product"], [168, 1, 1, "", "quantile"], [169, 1, 1, "", "rechunk"], [170, 1, 1, "", "rename"], [171, 1, 1, "", "replace"], [172, 1, 1, "", "replace_at_idx"], [173, 1, 1, "", "reverse"], [174, 1, 1, "", "row"], [175, 1, 1, "", "rows"], [176, 1, 1, "", "sample"], [177, 2, 1, "", "schema"], [178, 1, 1, "", "select"], [179, 2, 1, "", "shape"], [180, 1, 1, "", "shift"], [181, 1, 1, "", "shift_and_fill"], [182, 1, 1, "", "shrink_to_fit"], [183, 1, 1, "", "slice"], [184, 1, 1, "", "sort"], [185, 1, 1, "", "std"], [186, 1, 1, "", "sum"], [187, 1, 1, "", "tail"], [188, 1, 1, "", "take_every"], [189, 1, 1, "", "to_arrow"], [190, 1, 1, "", "to_dict"], [191, 1, 1, "", "to_dicts"], [192, 1, 1, "", "to_dummies"], [193, 1, 1, "", "to_numpy"], [194, 1, 1, "", "to_pandas"], [195, 1, 1, "", "to_series"], [196, 1, 1, "", "to_struct"], [197, 1, 1, "", "transpose"], [198, 1, 1, "", "unique"], [199, 1, 1, "", "unnest"], [200, 1, 1, "", "unstack"], [201, 1, 1, "", "upsample"], [202, 1, 1, "", "var"], [203, 1, 1, "", "vstack"], [204, 2, 1, "", "width"], [205, 1, 1, "", "with_column"], [206, 1, 1, "", "with_columns"], [207, 1, 1, "", "with_row_count"], [23, 1, 1, "", "write_avro"], [24, 1, 1, "", "write_csv"], [25, 1, 1, "", "write_ipc"], [26, 1, 1, "", "write_json"], [27, 1, 1, "", "write_ndjson"], [28, 1, 1, "", "write_parquet"]], "polars.DataType": [[29, 1, 1, "", "__init__"]], "polars.Date": [[30, 1, 1, "", "__init__"]], "polars.Datetime": [[31, 1, 1, "", "__init__"]], "polars.Duration": [[32, 1, 1, "", "__init__"]], "polars.Expr": [[244, 1, 1, "", "abs"], [245, 1, 1, "", "agg_groups"], [246, 1, 1, "", "alias"], [247, 1, 1, "", "all"], [248, 1, 1, "", "any"], [249, 1, 1, "", "append"], [250, 1, 1, "", "apply"], [251, 1, 1, "", "arccos"], [252, 1, 1, "", "arccosh"], [253, 1, 1, "", "arcsin"], [254, 1, 1, "", "arcsinh"], [255, 1, 1, "", "arctan"], [256, 1, 1, "", "arctanh"], [257, 1, 1, "", "arg_max"], [258, 1, 1, "", "arg_min"], [259, 1, 1, "", "arg_sort"], [260, 1, 1, "", "arg_unique"], [261, 1, 1, "", "argsort"], [285, 1, 1, "", "backward_fill"], [286, 1, 1, "", "cast"], [288, 1, 1, "", "ceil"], [289, 1, 1, "", "clip"], [290, 1, 1, "", "clip_max"], [291, 1, 1, "", "clip_min"], [292, 1, 1, "", "cos"], [293, 1, 1, "", "cosh"], [294, 1, 1, "", "count"], [295, 1, 1, "", "cumcount"], [296, 1, 1, "", "cummax"], [297, 1, 1, "", "cummin"], [298, 1, 1, "", "cumprod"], [299, 1, 1, "", "cumsum"], [300, 1, 1, "", "cumulative_eval"], [301, 1, 1, "", "diff"], [302, 1, 1, "", "dot"], [303, 1, 1, "", "drop_nans"], [304, 1, 1, "", "drop_nulls"], [337, 1, 1, "", "entropy"], [338, 1, 1, "", "ewm_mean"], [339, 1, 1, "", "ewm_std"], [340, 1, 1, "", "ewm_var"], [341, 1, 1, "", "exclude"], [342, 1, 1, "", "exp"], [343, 1, 1, "", "explode"], [344, 1, 1, "", "extend_constant"], [345, 1, 1, "", "fill_nan"], [346, 1, 1, "", "fill_null"], [347, 1, 1, "", "filter"], [348, 1, 1, "", "first"], [349, 1, 1, "", "flatten"], [350, 1, 1, "", "floor"], [351, 1, 1, "", "forward_fill"], [352, 1, 1, "", "hash"], [353, 1, 1, "", "head"], [354, 1, 1, "", "inspect"], [355, 1, 1, "", "interpolate"], [356, 1, 1, "", "is_between"], [357, 1, 1, "", "is_duplicated"], [358, 1, 1, "", "is_finite"], [359, 1, 1, "", "is_first"], [360, 1, 1, "", "is_in"], [361, 1, 1, "", "is_infinite"], [362, 1, 1, "", "is_nan"], [363, 1, 1, "", "is_not"], [364, 1, 1, "", "is_not_nan"], [365, 1, 1, "", "is_not_null"], [366, 1, 1, "", "is_null"], [367, 1, 1, "", "is_unique"], [368, 1, 1, "", "keep_name"], [369, 1, 1, "", "kurtosis"], [370, 1, 1, "", "last"], [371, 1, 1, "", "len"], [372, 1, 1, "", "limit"], [373, 1, 1, "", "list"], [374, 1, 1, "", "log"], [375, 1, 1, "", "log10"], [376, 1, 1, "", "lower_bound"], [377, 1, 1, "", "map"], [378, 1, 1, "", "map_alias"], [379, 1, 1, "", "max"], [380, 1, 1, "", "mean"], [381, 1, 1, "", "median"], [386, 1, 1, "", "min"], [387, 1, 1, "", "mode"], [388, 1, 1, "", "n_unique"], [389, 1, 1, "", "nan_max"], [390, 1, 1, "", "nan_min"], [391, 1, 1, "", "null_count"], [392, 1, 1, "", "over"], [393, 1, 1, "", "pct_change"], [394, 1, 1, "", "pow"], [395, 1, 1, "", "prefix"], [396, 1, 1, "", "product"], [397, 1, 1, "", "quantile"], [398, 1, 1, "", "rank"], [399, 1, 1, "", "rechunk"], [400, 1, 1, "", "reinterpret"], [401, 1, 1, "", "repeat_by"], [402, 1, 1, "", "reshape"], [403, 1, 1, "", "reverse"], [404, 1, 1, "", "rolling_apply"], [405, 1, 1, "", "rolling_max"], [406, 1, 1, "", "rolling_mean"], [407, 1, 1, "", "rolling_median"], [408, 1, 1, "", "rolling_min"], [409, 1, 1, "", "rolling_quantile"], [410, 1, 1, "", "rolling_skew"], [411, 1, 1, "", "rolling_std"], [412, 1, 1, "", "rolling_sum"], [413, 1, 1, "", "rolling_var"], [414, 1, 1, "", "round"], [415, 1, 1, "", "sample"], [416, 1, 1, "", "search_sorted"], [417, 1, 1, "", "set_sorted"], [418, 1, 1, "", "shift"], [419, 1, 1, "", "shift_and_fill"], [420, 1, 1, "", "shrink_dtype"], [421, 1, 1, "", "shuffle"], [422, 1, 1, "", "sign"], [423, 1, 1, "", "sin"], [424, 1, 1, "", "sinh"], [425, 1, 1, "", "skew"], [426, 1, 1, "", "slice"], [427, 1, 1, "", "sort"], [428, 1, 1, "", "sort_by"], [429, 1, 1, "", "sqrt"], [430, 1, 1, "", "std"], [460, 1, 1, "", "suffix"], [461, 1, 1, "", "sum"], [462, 1, 1, "", "tail"], [463, 1, 1, "", "take"], [464, 1, 1, "", "take_every"], [465, 1, 1, "", "tan"], [466, 1, 1, "", "tanh"], [467, 1, 1, "", "to_physical"], [468, 1, 1, "", "top_k"], [469, 1, 1, "", "unique"], [470, 1, 1, "", "unique_counts"], [471, 1, 1, "", "upper_bound"], [472, 1, 1, "", "value_counts"], [473, 1, 1, "", "var"], [474, 1, 1, "", "where"]], "polars.Expr.arr": [[262, 1, 1, "", "arg_max"], [263, 1, 1, "", "arg_min"], [264, 1, 1, "", "concat"], [265, 1, 1, "", "contains"], [266, 1, 1, "", "diff"], [267, 1, 1, "", "eval"], [268, 1, 1, "", "first"], [269, 1, 1, "", "get"], [270, 1, 1, "", "head"], [271, 1, 1, "", "join"], [272, 1, 1, "", "last"], [273, 1, 1, "", "lengths"], [274, 1, 1, "", "max"], [275, 1, 1, "", "mean"], [276, 1, 1, "", "min"], [277, 1, 1, "", "reverse"], [278, 1, 1, "", "shift"], [279, 1, 1, "", "slice"], [280, 1, 1, "", "sort"], [281, 1, 1, "", "sum"], [282, 1, 1, "", "tail"], [283, 1, 1, "", "to_struct"], [284, 1, 1, "", "unique"]], "polars.Expr.cat": [[287, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[305, 1, 1, "", "cast_time_unit"], [306, 1, 1, "", "cast_time_zone"], [307, 1, 1, "", "day"], [308, 1, 1, "", "days"], [309, 1, 1, "", "epoch"], [310, 1, 1, "", "hour"], [311, 1, 1, "", "hours"], [312, 1, 1, "", "iso_year"], [313, 1, 1, "", "microsecond"], [314, 1, 1, "", "microseconds"], [315, 1, 1, "", "millisecond"], [316, 1, 1, "", "milliseconds"], [317, 1, 1, "", "minute"], [318, 1, 1, "", "minutes"], [319, 1, 1, "", "month"], [320, 1, 1, "", "nanosecond"], [321, 1, 1, "", "nanoseconds"], [322, 1, 1, "", "offset_by"], [323, 1, 1, "", "ordinal_day"], [324, 1, 1, "", "quarter"], [325, 1, 1, "", "round"], [326, 1, 1, "", "second"], [327, 1, 1, "", "seconds"], [328, 1, 1, "", "strftime"], [329, 1, 1, "", "timestamp"], [330, 1, 1, "", "truncate"], [331, 1, 1, "", "tz_localize"], [332, 1, 1, "", "week"], [333, 1, 1, "", "weekday"], [334, 1, 1, "", "with_time_unit"], [335, 1, 1, "", "with_time_zone"], [336, 1, 1, "", "year"]], "polars.Expr.meta": [[382, 1, 1, "", "output_name"], [383, 1, 1, "", "pop"], [384, 1, 1, "", "root_names"], [385, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[431, 1, 1, "", "concat"], [432, 1, 1, "", "contains"], [433, 1, 1, "", "count_match"], [434, 1, 1, "", "decode"], [435, 1, 1, "", "encode"], [436, 1, 1, "", "ends_with"], [437, 1, 1, "", "extract"], [438, 1, 1, "", "extract_all"], [439, 1, 1, "", "json_path_match"], [440, 1, 1, "", "lengths"], [441, 1, 1, "", "ljust"], [442, 1, 1, "", "lstrip"], [443, 1, 1, "", "n_chars"], [444, 1, 1, "", "replace"], [445, 1, 1, "", "replace_all"], [446, 1, 1, "", "rjust"], [447, 1, 1, "", "rstrip"], [448, 1, 1, "", "slice"], [449, 1, 1, "", "split"], [450, 1, 1, "", "split_exact"], [451, 1, 1, "", "splitn"], [452, 1, 1, "", "starts_with"], [453, 1, 1, "", "strip"], [454, 1, 1, "", "strptime"], [455, 1, 1, "", "to_lowercase"], [456, 1, 1, "", "to_uppercase"], [457, 1, 1, "", "zfill"]], "polars.Expr.struct": [[458, 1, 1, "", "field"], [459, 1, 1, "", "rename_fields"]], "polars.Float32": [[33, 1, 1, "", "__init__"]], "polars.Float64": [[34, 1, 1, "", "__init__"]], "polars.Int16": [[35, 1, 1, "", "__init__"]], "polars.Int32": [[36, 1, 1, "", "__init__"]], "polars.Int64": [[37, 1, 1, "", "__init__"]], "polars.Int8": [[38, 1, 1, "", "__init__"]], "polars.LazyFrame": [[538, 1, 1, "", "cache"], [539, 1, 1, "", "cleared"], [540, 1, 1, "", "clone"], [541, 1, 1, "", "collect"], [542, 2, 1, "", "columns"], [543, 1, 1, "", "describe_optimized_plan"], [544, 1, 1, "", "describe_plan"], [545, 1, 1, "", "drop"], [546, 1, 1, "", "drop_nulls"], [547, 2, 1, "", "dtypes"], [548, 1, 1, "", "explode"], [549, 1, 1, "", "fetch"], [550, 1, 1, "", "fill_nan"], [551, 1, 1, "", "fill_null"], [552, 1, 1, "", "filter"], [553, 1, 1, "", "first"], [554, 1, 1, "", "from_json"], [555, 1, 1, "", "groupby"], [556, 1, 1, "", "groupby_dynamic"], [557, 1, 1, "", "groupby_rolling"], [558, 1, 1, "", "head"], [559, 1, 1, "", "inspect"], [560, 1, 1, "", "interpolate"], [561, 1, 1, "", "join"], [562, 1, 1, "", "join_asof"], [563, 1, 1, "", "last"], [564, 1, 1, "", "lazy"], [565, 1, 1, "", "limit"], [566, 1, 1, "", "map"], [567, 1, 1, "", "max"], [568, 1, 1, "", "mean"], [569, 1, 1, "", "median"], [570, 1, 1, "", "melt"], [571, 1, 1, "", "min"], [572, 1, 1, "", "pipe"], [573, 1, 1, "", "profile"], [574, 1, 1, "", "quantile"], [575, 1, 1, "", "read_json"], [576, 1, 1, "", "rename"], [577, 1, 1, "", "reverse"], [578, 2, 1, "", "schema"], [579, 1, 1, "", "select"], [580, 1, 1, "", "shift"], [581, 1, 1, "", "shift_and_fill"], [582, 1, 1, "", "show_graph"], [583, 1, 1, "", "slice"], [584, 1, 1, "", "sort"], [585, 1, 1, "", "std"], [586, 1, 1, "", "sum"], [587, 1, 1, "", "tail"], [588, 1, 1, "", "take_every"], [589, 1, 1, "", "unique"], [590, 1, 1, "", "unnest"], [591, 1, 1, "", "var"], [592, 2, 1, "", "width"], [593, 1, 1, "", "with_column"], [594, 1, 1, "", "with_columns"], [595, 1, 1, "", "with_context"], [596, 1, 1, "", "with_row_count"], [597, 1, 1, "", "write_json"]], "polars.List": [[39, 1, 1, "", "__init__"]], "polars.Null": [[40, 1, 1, "", "__init__"]], "polars.Object": [[41, 1, 1, "", "__init__"]], "polars.SQLContext": [[42, 1, 1, "", "execute"], [43, 1, 1, "", "query"], [44, 1, 1, "", "register"]], "polars.Series": [[609, 1, 1, "", "abs"], [610, 1, 1, "", "alias"], [611, 1, 1, "", "all"], [612, 1, 1, "", "any"], [613, 1, 1, "", "append"], [614, 1, 1, "", "apply"], [615, 1, 1, "", "arccos"], [616, 1, 1, "", "arccosh"], [617, 1, 1, "", "arcsin"], [618, 1, 1, "", "arcsinh"], [619, 1, 1, "", "arctan"], [620, 1, 1, "", "arctanh"], [621, 1, 1, "", "arg_max"], [622, 1, 1, "", "arg_min"], [623, 1, 1, "", "arg_sort"], [624, 1, 1, "", "arg_true"], [625, 1, 1, "", "arg_unique"], [626, 1, 1, "", "argsort"], [627, 3, 1, "", "arr"], [651, 1, 1, "", "cast"], [652, 3, 1, "", "cat"], [654, 1, 1, "", "ceil"], [655, 1, 1, "", "chunk_lengths"], [656, 1, 1, "", "cleared"], [657, 1, 1, "", "clip"], [658, 1, 1, "", "clip_max"], [659, 1, 1, "", "clip_min"], [660, 1, 1, "", "clone"], [661, 1, 1, "", "cos"], [662, 1, 1, "", "cosh"], [663, 1, 1, "", "cummax"], [664, 1, 1, "", "cummin"], [665, 1, 1, "", "cumprod"], [666, 1, 1, "", "cumsum"], [667, 1, 1, "", "cumulative_eval"], [668, 1, 1, "", "describe"], [669, 1, 1, "", "diff"], [670, 1, 1, "", "dot"], [671, 1, 1, "", "drop_nans"], [672, 1, 1, "", "drop_nulls"], [673, 3, 1, "", "dt"], [710, 2, 1, "", "dtype"], [711, 1, 1, "", "entropy"], [712, 1, 1, "", "estimated_size"], [713, 1, 1, "", "ewm_mean"], [714, 1, 1, "", "ewm_std"], [715, 1, 1, "", "ewm_var"], [716, 1, 1, "", "exp"], [717, 1, 1, "", "explode"], [718, 1, 1, "", "extend_constant"], [719, 1, 1, "", "fill_nan"], [720, 1, 1, "", "fill_null"], [721, 1, 1, "", "filter"], [722, 2, 1, "", "flags"], [723, 1, 1, "", "floor"], [724, 1, 1, "", "get_chunks"], [725, 1, 1, "", "has_validity"], [726, 1, 1, "", "hash"], [727, 1, 1, "", "head"], [728, 2, 1, "", "inner_dtype"], [729, 1, 1, "", "interpolate"], [730, 1, 1, "", "is_boolean"], [731, 1, 1, "", "is_datelike"], [732, 1, 1, "", "is_duplicated"], [733, 1, 1, "", "is_empty"], [734, 1, 1, "", "is_finite"], [735, 1, 1, "", "is_first"], [736, 1, 1, "", "is_float"], [737, 1, 1, "", "is_in"], [738, 1, 1, "", "is_infinite"], [739, 1, 1, "", "is_nan"], [740, 1, 1, "", "is_not_nan"], [741, 1, 1, "", "is_not_null"], [742, 1, 1, "", "is_null"], [743, 1, 1, "", "is_numeric"], [744, 1, 1, "", "is_unique"], [745, 1, 1, "", "is_utf8"], [746, 1, 1, "", "item"], [747, 1, 1, "", "kurtosis"], [748, 1, 1, "", "len"], [749, 1, 1, "", "limit"], [750, 1, 1, "", "log"], [751, 1, 1, "", "log10"], [752, 1, 1, "", "max"], [753, 1, 1, "", "mean"], [754, 1, 1, "", "median"], [755, 1, 1, "", "min"], [756, 1, 1, "", "mode"], [757, 1, 1, "", "n_chunks"], [758, 1, 1, "", "n_unique"], [759, 2, 1, "", "name"], [760, 1, 1, "", "nan_max"], [761, 1, 1, "", "nan_min"], [762, 1, 1, "", "new_from_index"], [763, 1, 1, "", "null_count"], [764, 1, 1, "", "pct_change"], [765, 1, 1, "", "peak_max"], [766, 1, 1, "", "peak_min"], [767, 1, 1, "", "product"], [768, 1, 1, "", "quantile"], [769, 1, 1, "", "rank"], [770, 1, 1, "", "rechunk"], [771, 1, 1, "", "reinterpret"], [772, 1, 1, "", "rename"], [773, 1, 1, "", "reshape"], [774, 1, 1, "", "reverse"], [775, 1, 1, "", "rolling_apply"], [776, 1, 1, "", "rolling_max"], [777, 1, 1, "", "rolling_mean"], [778, 1, 1, "", "rolling_median"], [779, 1, 1, "", "rolling_min"], [780, 1, 1, "", "rolling_quantile"], [781, 1, 1, "", "rolling_skew"], [782, 1, 1, "", "rolling_std"], [783, 1, 1, "", "rolling_sum"], [784, 1, 1, "", "rolling_var"], [785, 1, 1, "", "round"], [786, 1, 1, "", "sample"], [787, 1, 1, "", "search_sorted"], [788, 1, 1, "", "series_equal"], [789, 1, 1, "", "set"], [790, 1, 1, "", "set_at_idx"], [791, 1, 1, "", "set_sorted"], [792, 2, 1, "", "shape"], [793, 1, 1, "", "shift"], [794, 1, 1, "", "shift_and_fill"], [795, 1, 1, "", "shrink_dtype"], [796, 1, 1, "", "shrink_to_fit"], [797, 1, 1, "", "shuffle"], [798, 1, 1, "", "sign"], [799, 1, 1, "", "sin"], [800, 1, 1, "", "sinh"], [801, 1, 1, "", "skew"], [802, 1, 1, "", "slice"], [803, 1, 1, "", "sort"], [804, 1, 1, "", "sqrt"], [805, 1, 1, "", "std"], [806, 3, 1, "", "str"], [838, 1, 1, "", "sum"], [839, 1, 1, "", "tail"], [840, 1, 1, "", "take"], [841, 1, 1, "", "take_every"], [842, 1, 1, "", "tan"], [843, 1, 1, "", "tanh"], [844, 2, 1, "", "time_unit"], [845, 1, 1, "", "to_arrow"], [846, 1, 1, "", "to_dummies"], [847, 1, 1, "", "to_frame"], [848, 1, 1, "", "to_list"], [849, 1, 1, "", "to_numpy"], [850, 1, 1, "", "to_pandas"], [851, 1, 1, "", "to_physical"], [852, 1, 1, "", "top_k"], [853, 1, 1, "", "unique"], [854, 1, 1, "", "unique_counts"], [855, 1, 1, "", "value_counts"], [856, 1, 1, "", "var"], [857, 1, 1, "", "view"], [858, 1, 1, "", "zip_with"]], "polars.Series.arr": [[628, 1, 1, "", "arg_max"], [629, 1, 1, "", "arg_min"], [630, 1, 1, "", "concat"], [631, 1, 1, "", "contains"], [632, 1, 1, "", "diff"], [633, 1, 1, "", "eval"], [634, 1, 1, "", "first"], [635, 1, 1, "", "get"], [636, 1, 1, "", "head"], [637, 1, 1, "", "join"], [638, 1, 1, "", "last"], [639, 1, 1, "", "lengths"], [640, 1, 1, "", "max"], [641, 1, 1, "", "mean"], [642, 1, 1, "", "min"], [643, 1, 1, "", "reverse"], [644, 1, 1, "", "shift"], [645, 1, 1, "", "slice"], [646, 1, 1, "", "sort"], [647, 1, 1, "", "sum"], [648, 1, 1, "", "tail"], [649, 1, 1, "", "to_struct"], [650, 1, 1, "", "unique"]], "polars.Series.cat": [[653, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[674, 1, 1, "", "cast_time_unit"], [675, 1, 1, "", "cast_time_zone"], [676, 1, 1, "", "day"], [677, 1, 1, "", "days"], [678, 1, 1, "", "epoch"], [679, 1, 1, "", "hour"], [680, 1, 1, "", "hours"], [681, 1, 1, "", "iso_year"], [682, 1, 1, "", "max"], [683, 1, 1, "", "mean"], [684, 1, 1, "", "median"], [685, 1, 1, "", "microsecond"], [686, 1, 1, "", "microseconds"], [687, 1, 1, "", "millisecond"], [688, 1, 1, "", "milliseconds"], [689, 1, 1, "", "min"], [690, 1, 1, "", "minute"], [691, 1, 1, "", "minutes"], [692, 1, 1, "", "month"], [693, 1, 1, "", "nanosecond"], [694, 1, 1, "", "nanoseconds"], [695, 1, 1, "", "offset_by"], [696, 1, 1, "", "ordinal_day"], [697, 1, 1, "", "quarter"], [698, 1, 1, "", "round"], [699, 1, 1, "", "second"], [700, 1, 1, "", "seconds"], [701, 1, 1, "", "strftime"], [702, 1, 1, "", "timestamp"], [703, 1, 1, "", "truncate"], [704, 1, 1, "", "tz_localize"], [705, 1, 1, "", "week"], [706, 1, 1, "", "weekday"], [707, 1, 1, "", "with_time_unit"], [708, 1, 1, "", "with_time_zone"], [709, 1, 1, "", "year"]], "polars.Series.str": [[807, 1, 1, "", "concat"], [808, 1, 1, "", "contains"], [809, 1, 1, "", "count_match"], [810, 1, 1, "", "decode"], [811, 1, 1, "", "encode"], [812, 1, 1, "", "ends_with"], [813, 1, 1, "", "extract"], [814, 1, 1, "", "extract_all"], [815, 1, 1, "", "json_path_match"], [816, 1, 1, "", "lengths"], [817, 1, 1, "", "ljust"], [818, 1, 1, "", "lstrip"], [819, 1, 1, "", "n_chars"], [820, 1, 1, "", "replace"], [821, 1, 1, "", "replace_all"], [822, 1, 1, "", "rjust"], [823, 1, 1, "", "rstrip"], [824, 1, 1, "", "slice"], [825, 1, 1, "", "split"], [826, 1, 1, "", "split_exact"], [827, 1, 1, "", "splitn"], [828, 1, 1, "", "starts_with"], [829, 1, 1, "", "strip"], [830, 1, 1, "", "strptime"], [831, 1, 1, "", "to_lowercase"], [832, 1, 1, "", "to_uppercase"], [833, 1, 1, "", "zfill"]], "polars.Series.struct": [[834, 1, 1, "", "field"], [835, 3, 1, "", "fields"], [836, 1, 1, "", "rename_fields"], [837, 1, 1, "", "to_frame"]], "polars.StringCache": [[45, 1, 1, "", "__init__"]], "polars.Struct": [[46, 1, 1, "", "__init__"]], "polars.Time": [[47, 1, 1, "", "__init__"]], "polars.UInt16": [[48, 1, 1, "", "__init__"]], "polars.UInt32": [[49, 1, 1, "", "__init__"]], "polars.UInt64": [[50, 1, 1, "", "__init__"]], "polars.UInt8": [[51, 1, 1, "", "__init__"]], "polars.Unknown": [[52, 1, 1, "", "__init__"]], "polars.Utf8": [[53, 1, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[65, 5, 1, "", "ArrowError"], [66, 5, 1, "", "ComputeError"], [67, 5, 1, "", "DuplicateError"], [68, 5, 1, "", "InvalidOperationError"], [69, 5, 1, "", "NoDataError"], [70, 5, 1, "", "NoRowsReturned"], [71, 5, 1, "", "NotFoundError"], [72, 5, 1, "", "PanicException"], [73, 5, 1, "", "RowsException"], [74, 5, 1, "", "SchemaError"], [75, 5, 1, "", "ShapeError"], [76, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[85, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[208, 1, 1, "", "agg"], [209, 1, 1, "", "agg_list"], [210, 1, 1, "", "apply"], [211, 1, 1, "", "count"], [212, 1, 1, "", "first"], [213, 1, 1, "", "head"], [214, 1, 1, "", "last"], [215, 1, 1, "", "max"], [216, 1, 1, "", "mean"], [217, 1, 1, "", "median"], [218, 1, 1, "", "min"], [219, 1, 1, "", "n_unique"], [220, 1, 1, "", "pivot"], [221, 1, 1, "", "quantile"], [222, 1, 1, "", "sum"], [223, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[224, 1, 1, "", "count"], [225, 1, 1, "", "first"], [226, 1, 1, "", "last"], [227, 1, 1, "", "max"], [228, 1, 1, "", "mean"], [229, 1, 1, "", "median"], [230, 1, 1, "", "min"], [231, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[598, 1, 1, "", "agg"], [599, 1, 1, "", "apply"], [600, 1, 1, "", "head"], [601, 1, 1, "", "tail"]], "polars.testing": [[106, 4, 1, "", "assert_frame_equal"], [107, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[108, 0, 1, "", "column"], [109, 4, 1, "", "columns"], [110, 4, 1, "", "dataframes"], [111, 4, 1, "", "series"]], "polars.testing.parametric.column": [[108, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 128], "api": [1, 55, 56, 57, 58, 535], "provid": 1, "new": 1, "function": [1, 241, 525, 534], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858], "binari": 2, "boolean": [3, 521, 861], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 115], "load": [5, 115], "restore_default": 6, "save": [7, 115], "set_ascii_t": 8, "set_fmt_str_length": 9, "set_tbl_cell_align": 10, "set_tbl_col": 11, "set_tbl_column_data_type_inlin": 12, "set_tbl_dataframe_shape_below": 13, "set_tbl_format": 14, "set_tbl_hide_column_data_typ": 15, "set_tbl_hide_column_nam": 16, "set_tbl_hide_dataframe_shap": 17, "set_tbl_hide_dtype_separ": 18, "set_tbl_row": 19, "set_tbl_width_char": 20, "set_verbos": 21, "state": [22, 115], "datafram": [23, 24, 25, 26, 27, 28, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237], "write_avro": 23, "write_csv": 24, "write_ipc": 25, "write_json": [26, 597], "write_ndjson": 27, "write_parquet": 28, "datatyp": 29, "date": [30, 241, 490], "datetim": [31, 491], "durat": [32, 492], "float32": 33, "float64": 34, "int16": 35, "int32": 36, "int64": 37, "int8": 38, "list": [39, 373, 500], "null": 40, "object": 41, "sqlcontext": [42, 43, 44], "execut": 42, "queri": 43, "regist": 44, "stringcach": [45, 534], "struct": [46, 458, 459, 515, 531, 834, 835, 836, 837, 870], "time": [47, 241], "uint16": 48, "uint32": 49, "uint64": 50, "uint8": 51, "unknown": 52, "utf8": 53, "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "arg_wher": 59, "build_info": 60, "collect_al": 61, "concat": [62, 264, 431, 630, 807], "cut": 63, "date_rang": 64, "except": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 242], "arrowerror": 65, "computeerror": 66, "duplicateerror": 67, "invalidoperationerror": 68, "nodataerror": 69, "norowsreturn": 70, "notfounderror": 71, "panicexcept": 72, "rowsexcept": 73, "schemaerror": 74, "shapeerror": 75, "toomanyrowsreturn": 76, "from_arrow": 77, "from_dict": [78, 79], "from_numpi": 80, "from_panda": 81, "from_record": 82, "get_dummi": 83, "get_idx_typ": 84, "intern": [85, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 598, 599, 600, 601], "batch": 85, "batchedcsvread": [85, 536], "next_batch": 85, "ones": 86, "read_avro": 87, "read_csv": 88, "read_csv_batch": 89, "read_delta": 90, "read_excel": 91, "read_ipc": 92, "read_ipc_schema": 93, "read_json": [94, 575], "read_ndjson": 95, "read_parquet": 96, "read_parquet_schema": 97, "read_sql": 98, "scan_csv": 99, "scan_delta": 100, "scan_d": 101, "scan_ipc": 102, "scan_ndjson": 103, "scan_parquet": 104, "show_vers": 105, "test": [106, 107, 108, 109, 110, 111, 873], "assert_frame_equ": 106, "assert_series_equ": 107, "parametr": [108, 109, 110, 111], "column": [108, 109, 120, 523, 542], "seri": [111, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 866], "threadpool_s": 112, "toggle_string_cach": 113, "zero": 114, "option": 115, "set": [115, 789], "unset": 115, "current": 115, "aggreg": [116, 243, 537, 608], "appli": [117, 210, 250, 477, 599, 614], "clear": [118, 539, 656], "clone": [119, 540, 660], "describ": [121, 668], "drop": [122, 545], "drop_in_plac": 123, "drop_nul": [124, 304, 546, 672], "dtype": [125, 547, 710], "estimated_s": [126, 712], "explod": [127, 343, 548, 717], "fill_nan": [129, 345, 550, 719], "fill_nul": [130, 346, 551, 720], "filter": [131, 347, 552, 721], "find_idx_by_nam": 132, "fold": [133, 496], "frame_equ": 134, "get_column": [135, 136], "glimps": 137, "groupbi": [138, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 236, 555, 598, 599, 600, 601, 604], "groupby_dynam": [139, 556], "groupby_rol": [140, 557], "hash_row": 141, "head": [142, 213, 270, 353, 499, 558, 600, 636, 727], "height": 143, "hstack": 144, "insert_at_idx": 145, "interpol": [146, 355, 560, 729], "is_dupl": [147, 357, 732], "is_empti": [148, 733], "is_uniqu": [149, 367, 744], "item": [150, 746], "join": [151, 271, 561, 637], "join_asof": [152, 562], "lazi": [153, 534, 564], "limit": [154, 372, 565, 749], "max": [155, 215, 227, 274, 379, 503, 567, 640, 682, 752], "mean": [156, 216, 228, 275, 380, 504, 568, 641, 683, 753], "median": [157, 217, 229, 381, 505, 569, 684, 754], "melt": [158, 570], "min": [159, 218, 230, 276, 386, 506, 571, 642, 689, 755], "n_chunk": [160, 757], "n_uniqu": [161, 219, 388, 507, 758], "null_count": [162, 391, 763], "partition_bi": 163, "pearson_corr": [164, 508], "pipe": [165, 572], "pivot": [166, 220, 224, 225, 226, 227, 228, 229, 230, 231, 240], "product": [167, 396, 767], "quantil": [168, 221, 397, 509, 574, 768], "rechunk": [169, 399, 770], "renam": [170, 576, 772], "replac": [171, 444, 820], "replace_at_idx": 172, "revers": [173, 277, 403, 577, 643, 774], "row": [174, 175], "sampl": [176, 415, 786], "schema": [177, 578], "select": [178, 239, 512, 529, 579, 607, 868], "shape": [179, 792], "shift": [180, 278, 418, 580, 644, 793], "shift_and_fil": [181, 419, 581, 794], "shrink_to_fit": [182, 796], "slice": [183, 279, 426, 448, 583, 645, 802, 824], "sort": [184, 280, 427, 584, 646, 803], "std": [185, 430, 514, 585, 805], "sum": [186, 222, 231, 281, 461, 516, 586, 647, 838], "tail": [187, 223, 282, 462, 517, 587, 601, 648, 839], "take_everi": [188, 464, 588, 841], "to_arrow": [189, 845], "to_dict": [190, 191], "to_dummi": [192, 846], "to_numpi": [193, 849], "to_panda": [194, 850], "to_seri": 195, "to_struct": [196, 283, 649], "transpos": 197, "uniqu": [198, 284, 469, 589, 650, 853], "unnest": [199, 590], "unstack": 200, "upsampl": 201, "var": [202, 473, 518, 591, 856], "vstack": 203, "width": [204, 592], "with_column": [205, 206, 593, 594], "with_row_count": [207, 596], "agg": [208, 598], "agg_list": 209, "count": [211, 224, 294, 485], "first": [212, 225, 268, 348, 495, 553, 634], "last": [214, 226, 272, 370, 563, 638], "pivotop": [224, 225, 226, 227, 228, 229, 230, 231], "attribut": [232, 602, 860], "comput": [233, 524, 863], "descript": [234, 603, 864], "export": [235, 865], "miscellan": [238, 528, 534, 606, 867], "manipul": [239, 529, 607, 868], "data": 241, "type": 241, "numer": 241, "nest": 241, "other": 241, "expr": [244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474], "ab": [244, 609], "agg_group": 245, "alia": [246, 610], "all": [247, 475, 611], "ani": [248, 476, 612], "append": [249, 613], "arcco": [251, 615], "arccosh": [252, 616], "arcsin": [253, 617], "arcsinh": [254, 618], "arctan": [255, 619], "arctanh": [256, 620], "arg_max": [257, 262, 621, 628], "arg_min": [258, 263, 622, 629], "arg_sort": [259, 623], "arg_uniqu": [260, 625], "argsort": [261, 626], "arr": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650], "contain": [265, 432, 631, 808], "diff": [266, 301, 632, 669], "eval": [267, 633], "get": [269, 635], "length": [273, 440, 639, 816], "backward_fil": 285, "cast": [286, 651], "cat": [287, 652, 653], "set_ord": [287, 653], "ceil": [288, 654], "clip": [289, 657], "clip_max": [290, 658], "clip_min": [291, 659], "co": [292, 661], "cosh": [293, 662], "cumcount": 295, "cummax": [296, 663], "cummin": [297, 664], "cumprod": [298, 665], "cumsum": [299, 489, 666], "cumulative_ev": [300, 667], "dot": [302, 670], "drop_nan": [303, 671], "dt": [305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709], "cast_time_unit": [305, 674], "cast_time_zon": [306, 675], "dai": [307, 308, 676, 677], "epoch": [309, 678], "hour": [310, 311, 679, 680], "iso_year": [312, 681], "microsecond": [313, 314, 685, 686], "millisecond": [315, 316, 687, 688], "minut": [317, 318, 690, 691], "month": [319, 692], "nanosecond": [320, 321, 693, 694], "offset_bi": [322, 695], "ordinal_dai": [323, 696], "quarter": [324, 697], "round": [325, 414, 698, 785], "second": [326, 327, 699, 700], "strftime": [328, 701], "timestamp": [329, 702], "truncat": [330, 703], "tz_local": [331, 704], "week": [332, 705], "weekdai": [333, 706], "with_time_unit": [334, 707], "with_time_zon": [335, 708], "year": [336, 709], "entropi": [337, 711], "ewm_mean": [338, 713], "ewm_std": [339, 714], "ewm_var": [340, 715], "exclud": [341, 494], "exp": [342, 716], "extend_const": [344, 718], "flatten": 349, "floor": [350, 723], "forward_fil": 351, "hash": [352, 726], "inspect": [354, 559], "is_between": 356, "is_finit": [358, 734], "is_first": [359, 735], "is_in": [360, 737], "is_infinit": [361, 738], "is_nan": [362, 739], "is_not": 363, "is_not_nan": [364, 740], "is_not_nul": [365, 741], "is_nul": [366, 742], "keep_nam": 368, "kurtosi": [369, 747], "len": [371, 748], "log": [374, 750], "log10": [375, 751], "lower_bound": 376, "map": [377, 502, 566], "map_alia": 378, "meta": [382, 383, 384, 385, 527], "output_nam": 382, "pop": 383, "root_nam": 384, "undo_alias": 385, "mode": [387, 756], "nan_max": [389, 760], "nan_min": [390, 761], "over": 392, "pct_chang": [393, 764], "pow": 394, "prefix": 395, "rank": [398, 769], "reinterpret": [400, 771], "repeat_bi": 401, "reshap": [402, 773], "rolling_appli": [404, 775], "rolling_max": [405, 776], "rolling_mean": [406, 777], "rolling_median": [407, 778], "rolling_min": [408, 779], "rolling_quantil": [409, 780], "rolling_skew": [410, 781], "rolling_std": [411, 782], "rolling_sum": [412, 783], "rolling_var": [413, 784], "search_sort": [416, 787], "set_sort": [417, 791], "shrink_dtyp": [420, 795], "shuffl": [421, 797], "sign": [422, 798], "sin": [423, 799], "sinh": [424, 800], "skew": [425, 801], "sort_bi": 428, "sqrt": [429, 804], "str": [431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833], "count_match": [433, 809], "decod": [434, 810], "encod": [435, 811], "ends_with": [436, 812], "extract": [437, 813], "extract_al": [438, 814], "json_path_match": [439, 815], "ljust": [441, 817], "lstrip": [442, 818], "n_char": [443, 819], "replace_al": [445, 821], "rjust": [446, 822], "rstrip": [447, 823], "split": [449, 825], "split_exact": [450, 826], "splitn": [451, 827], "starts_with": [452, 828], "strip": [453, 829], "strptime": [454, 830], "to_lowercas": [455, 831], "to_uppercas": [456, 832], "zfill": [457, 833], "field": [458, 834, 835], "rename_field": [459, 836], "suffix": 460, "take": [463, 840], "tan": [465, 842], "tanh": [466, 843], "to_phys": [467, 851], "top_k": [468, 852], "unique_count": [470, 854], "upper_bound": 471, "value_count": [472, 855], "where": 474, "arang": 478, "argsort_bi": 479, "avg": 480, "coalesc": 481, "col": 482, "concat_list": 483, "concat_str": 484, "cov": 486, "cumfold": 487, "cumreduc": 488, "element": 493, "format": 497, "group": 498, "lit": 501, "reduc": 510, "repeat": 511, "spearman_rank_corr": 513, "when": 519, "arrai": [520, 859], "categori": [522, 862], "name": [523, 759], "express": 526, "string": [530, 869], "tempor": [532, 871], "window": 533, "convers": 534, "eager": 534, "parallel": 534, "refer": 535, "input": 536, "output": 536, "csv": 536, "feather": 536, "ipc": 536, "parquet": 536, "sql": [536, 872], "json": 536, "avro": 536, "excel": 536, "delta": 536, "lake": 536, "dataset": 536, "lazyfram": [538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605], "cach": 538, "collect": 541, "describe_optimized_plan": 543, "describe_plan": 544, "fetch": 549, "from_json": 554, "profil": 573, "show_graph": 582, "with_context": 595, "lazygroupbi": [598, 599, 600, 601], "read": 606, "write": 606, "logic": 606, "plan": 606, "arg_tru": 624, "chunk_length": 655, "flag": 722, "get_chunk": 724, "has_valid": 725, "inner_dtyp": 728, "is_boolean": 730, "is_datelik": 731, "is_float": 736, "is_numer": 743, "is_utf8": 745, "new_from_index": 762, "peak_max": 765, "peak_min": 766, "series_equ": 788, "set_at_idx": 790, "to_fram": [837, 847], "time_unit": 844, "to_list": 848, "view": 857, "zip_with": 858, "method": 872, "assert": 873, "properti": 873, "base": 873, "strategi": 873, "helper": 873, "util": 874}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.NoDataError": [[69, "polars-exceptions-nodataerror"]], "polars.read_csv_batched": [[89, "polars-read-csv-batched"]], "polars.read_parquet_schema": [[97, "polars-read-parquet-schema"]], "polars.scan_delta": [[100, "polars-scan-delta"]], "Aggregation": [[116, "aggregation"], [608, "aggregation"], [537, "aggregation"], [243, "aggregation"]], "polars.from_dict": [[78, "polars-from-dict"]], "polars.DataFrame.filter": [[131, "polars-dataframe-filter"]], "polars.get_idx_type": [[84, "polars-get-idx-type"]], "polars.exceptions.ShapeError": [[75, "polars-exceptions-shapeerror"]], "polars.testing.assert_series_equal": [[107, "polars-testing-assert-series-equal"]], "polars.DataFrame.columns": [[120, "polars-dataframe-columns"]], "polars.exceptions.ComputeError": [[66, "polars-exceptions-computeerror"]], "polars.scan_parquet": [[104, "polars-scan-parquet"]], "polars.exceptions.RowsException": [[73, "polars-exceptions-rowsexception"]], "polars.threadpool_size": [[112, "polars-threadpool-size"]], "polars.DataFrame.drop_in_place": [[123, "polars-dataframe-drop-in-place"]], "polars.exceptions.NoRowsReturned": [[70, "polars-exceptions-norowsreturned"]], "polars.read_excel": [[91, "polars-read-excel"]], "polars.read_json": [[94, "polars-read-json"]], "polars.from_records": [[82, "polars-from-records"]], "polars.zeros": [[114, "polars-zeros"]], "polars.DataFrame.describe": [[121, "polars-dataframe-describe"]], "polars.from_dicts": [[79, "polars-from-dicts"]], "polars.testing.parametric.column": [[108, "polars-testing-parametric-column"]], "polars.exceptions.TooManyRowsReturned": [[76, "polars-exceptions-toomanyrowsreturned"]], "polars.read_csv": [[88, "polars-read-csv"]], "polars.testing.assert_frame_equal": [[106, "polars-testing-assert-frame-equal"]], "polars.scan_csv": [[99, "polars-scan-csv"]], "polars.from_numpy": [[80, "polars-from-numpy"]], "polars.DataFrame.drop_nulls": [[124, "polars-dataframe-drop-nulls"]], "polars.read_delta": [[90, "polars-read-delta"]], "polars.DataFrame.explode": [[127, "polars-dataframe-explode"]], "polars.from_arrow": [[77, "polars-from-arrow"]], "polars.from_pandas": [[81, "polars-from-pandas"]], "polars.exceptions.DuplicateError": [[67, "polars-exceptions-duplicateerror"]], "polars.exceptions.NotFoundError": [[71, "polars-exceptions-notfounderror"]], "polars.read_ndjson": [[95, "polars-read-ndjson"]], "polars.ones": [[86, "polars-ones"]], "polars.exceptions.SchemaError": [[74, "polars-exceptions-schemaerror"]], "polars.scan_ndjson": [[103, "polars-scan-ndjson"]], "polars.DataFrame.extend": [[128, "polars-dataframe-extend"]], "polars.scan_ds": [[101, "polars-scan-ds"]], "polars.DataFrame.fill_null": [[130, "polars-dataframe-fill-null"]], "polars.read_ipc_schema": [[93, "polars-read-ipc-schema"]], "polars.get_dummies": [[83, "polars-get-dummies"]], "polars.scan_ipc": [[102, "polars-scan-ipc"]], "polars.testing.parametric.dataframes": [[110, "polars-testing-parametric-dataframes"]], "polars.exceptions.InvalidOperationError": [[68, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.fill_nan": [[129, "polars-dataframe-fill-nan"]], "polars.testing.parametric.columns": [[109, "polars-testing-parametric-columns"]], "polars.DataFrame.dtypes": [[125, "polars-dataframe-dtypes"]], "polars.read_parquet": [[96, "polars-read-parquet"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[85, "polars-internals-batched-batchedcsvreader-next-batches"]], "Config": [[115, "config"]], "Config options (set/unset)": [[115, "config-options-set-unset"]], "Config load, save, and current state": [[115, "config-load-save-and-current-state"]], "polars.read_ipc": [[92, "polars-read-ipc"]], "polars.DataFrame.cleared": [[118, "polars-dataframe-cleared"]], "polars.DataFrame.drop": [[122, "polars-dataframe-drop"]], "polars.exceptions.PanicException": [[72, "polars-exceptions-panicexception"]], "polars.DataFrame.estimated_size": [[126, "polars-dataframe-estimated-size"]], "polars.read_sql": [[98, "polars-read-sql"]], "polars.DataFrame.apply": [[117, "polars-dataframe-apply"]], "polars.read_avro": [[87, "polars-read-avro"]], "polars.DataFrame.clone": [[119, "polars-dataframe-clone"]], "polars.toggle_string_cache": [[113, "polars-toggle-string-cache"]], "polars.show_versions": [[105, "polars-show-versions"]], "polars.testing.parametric.series": [[111, "polars-testing-parametric-series"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Struct": [[46, "polars-struct"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Int8": [[38, "polars-int8"]], "polars.Null": [[40, "polars-null"]], "polars.Float32": [[33, "polars-float32"]], "polars.DataFrame.write_avro": [[23, "polars-dataframe-write-avro"]], "polars.exceptions.ArrowError": [[65, "polars-exceptions-arrowerror"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.Duration": [[32, "polars-duration"]], "polars.date_range": [[64, "polars-date-range"]], "polars.Config.set_tbl_hide_dataframe_shape": [[17, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.SQLContext.query": [[43, "polars-sqlcontext-query"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_verbose": [[21, "polars-config-set-verbose"]], "polars.SQLContext.execute": [[42, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_dataframe_shape_below": [[13, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Date": [[30, "polars-date"]], "polars.DataFrame.write_parquet": [[28, "polars-dataframe-write-parquet"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.collect_all": [[61, "polars-collect-all"]], "polars.DataFrame.write_json": [[26, "polars-dataframe-write-json"]], "polars.Config.set_tbl_hide_column_data_types": [[15, "polars-config-set-tbl-hide-column-data-types"]], "polars.Int16": [[35, "polars-int16"]], "polars.Int32": [[36, "polars-int32"]], "polars.Config.set_tbl_cols": [[11, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_rows": [[19, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_csv": [[24, "polars-dataframe-write-csv"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.DataFrame.write_ipc": [[25, "polars-dataframe-write-ipc"]], "polars.Float64": [[34, "polars-float64"]], "polars.List": [[39, "polars-list"]], "polars.arg_where": [[59, "polars-arg-where"]], "polars.Unknown": [[52, "polars-unknown"]], "polars.Config.set_fmt_str_lengths": [[9, "polars-config-set-fmt-str-lengths"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.Utf8": [[53, "polars-utf8"]], "polars.Config.set_tbl_width_chars": [[20, "polars-config-set-tbl-width-chars"]], "polars.Config.state": [[22, "polars-config-state"]], "polars.Config.set_tbl_formatting": [[14, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_hide_dtype_separator": [[18, "polars-config-set-tbl-hide-dtype-separator"]], "polars.concat": [[62, "polars-concat"]], "polars.UInt16": [[48, "polars-uint16"]], "polars.build_info": [[60, "polars-build-info"]], "polars.cut": [[63, "polars-cut"]], "polars.Int64": [[37, "polars-int64"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.UInt64": [[50, "polars-uint64"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.DataType": [[29, "polars-datatype"]], "polars.Time": [[47, "polars-time"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_ndjson": [[27, "polars-dataframe-write-ndjson"]], "polars.UInt8": [[51, "polars-uint8"]], "polars.Config.set_tbl_hide_column_names": [[16, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_cell_alignment": [[10, "polars-config-set-tbl-cell-alignment"]], "polars.Object": [[41, "polars-object"]], "polars.StringCache": [[45, "polars-stringcache"]], "polars.Config.set_tbl_column_data_type_inline": [[12, "polars-config-set-tbl-column-data-type-inline"]], "polars.SQLContext.register": [[44, "polars-sqlcontext-register"]], "polars.Datetime": [[31, "polars-datetime"]], "polars.UInt32": [[49, "polars-uint32"]], "polars.Series.to_list": [[848, "polars-series-to-list"]], "polars.Series.take": [[840, "polars-series-take"]], "polars.Series.str.starts_with": [[828, "polars-series-str-starts-with"]], "polars.Series.str.slice": [[824, "polars-series-str-slice"]], "polars.Series.to_arrow": [[845, "polars-series-to-arrow"]], "polars.Series.str.ends_with": [[812, "polars-series-str-ends-with"]], "polars.Series.str.replace_all": [[821, "polars-series-str-replace-all"]], "polars.Series.var": [[856, "polars-series-var"]], "polars.Series.tan": [[842, "polars-series-tan"]], "polars.Series.struct.rename_fields": [[836, "polars-series-struct-rename-fields"]], "polars.Series.tail": [[839, "polars-series-tail"]], "polars.Series.to_numpy": [[849, "polars-series-to-numpy"]], "polars.Series.struct.fields": [[835, "polars-series-struct-fields"]], "polars.Series.str": [[806, "polars-series-str"]], "polars.Series.to_pandas": [[850, "polars-series-to-pandas"]], "polars.Series.top_k": [[852, "polars-series-top-k"]], "polars.Series.shrink_to_fit": [[796, "polars-series-shrink-to-fit"]], "polars.Series.shrink_dtype": [[795, "polars-series-shrink-dtype"]], "polars.Series.str.rstrip": [[823, "polars-series-str-rstrip"]], "polars.Series.str.strip": [[829, "polars-series-str-strip"]], "polars.Series.str.ljust": [[817, "polars-series-str-ljust"]], "polars.Series.str.concat": [[807, "polars-series-str-concat"]], "polars.Series.str.contains": [[808, "polars-series-str-contains"]], "polars.Series.to_dummies": [[846, "polars-series-to-dummies"]], "polars.Series.sinh": [[800, "polars-series-sinh"]], "polars.Series.slice": [[802, "polars-series-slice"]], "polars.Series.sum": [[838, "polars-series-sum"]], "polars.Series.sign": [[798, "polars-series-sign"]], "polars.Series.struct.to_frame": [[837, "polars-series-struct-to-frame"]], "polars.Series.str.to_uppercase": [[832, "polars-series-str-to-uppercase"]], "polars.Series.tanh": [[843, "polars-series-tanh"]], "polars.Series.unique_counts": [[854, "polars-series-unique-counts"]], "polars.Series.unique": [[853, "polars-series-unique"]], "polars.Series.skew": [[801, "polars-series-skew"]], "polars.Series.str.extract_all": [[814, "polars-series-str-extract-all"]], "polars.Series.shift": [[793, "polars-series-shift"]], "polars.Series.str.lstrip": [[818, "polars-series-str-lstrip"]], "polars.Series.str.n_chars": [[819, "polars-series-str-n-chars"]], "polars.Series.str.split": [[825, "polars-series-str-split"]], "polars.Series.time_unit": [[844, "polars-series-time-unit"]], "polars.Series.str.count_match": [[809, "polars-series-str-count-match"]], "polars.Series.str.strptime": [[830, "polars-series-str-strptime"]], "polars.Series.str.splitn": [[827, "polars-series-str-splitn"]], "polars.Series.sort": [[803, "polars-series-sort"]], "polars.Series.str.to_lowercase": [[831, "polars-series-str-to-lowercase"]], "polars.Series.str.split_exact": [[826, "polars-series-str-split-exact"]], "polars.Series.std": [[805, "polars-series-std"]], "polars.Series.view": [[857, "polars-series-view"]], "polars.Series.str.json_path_match": [[815, "polars-series-str-json-path-match"]], "polars.Series.sin": [[799, "polars-series-sin"]], "polars.Series.value_counts": [[855, "polars-series-value-counts"]], "polars.Series.to_physical": [[851, "polars-series-to-physical"]], "polars.Series.str.extract": [[813, "polars-series-str-extract"]], "polars.Series.str.lengths": [[816, "polars-series-str-lengths"]], "polars.Series.str.rjust": [[822, "polars-series-str-rjust"]], "polars.Series.shift_and_fill": [[794, "polars-series-shift-and-fill"]], "polars.Series.str.decode": [[810, "polars-series-str-decode"]], "polars.Series.str.encode": [[811, "polars-series-str-encode"]], "polars.Series.shape": [[792, "polars-series-shape"]], "polars.Series.str.zfill": [[833, "polars-series-str-zfill"]], "polars.Series.sqrt": [[804, "polars-series-sqrt"]], "polars.Series.struct.field": [[834, "polars-series-struct-field"]], "polars.Series.str.replace": [[820, "polars-series-str-replace"]], "polars.Series.to_frame": [[847, "polars-series-to-frame"]], "polars.Series.take_every": [[841, "polars-series-take-every"]], "polars.Series.shuffle": [[797, "polars-series-shuffle"]], "polars.Series.is_numeric": [[743, "polars-series-is-numeric"]], "polars.Series.nan_max": [[760, "polars-series-nan-max"]], "polars.Series.rechunk": [[770, "polars-series-rechunk"]], "polars.Series.limit": [[749, "polars-series-limit"]], "polars.Series.rolling_sum": [[783, "polars-series-rolling-sum"]], "polars.Series.is_unique": [[744, "polars-series-is-unique"]], "polars.Series.peak_max": [[765, "polars-series-peak-max"]], "polars.Series.is_float": [[736, "polars-series-is-float"]], "polars.Series.rolling_max": [[776, "polars-series-rolling-max"]], "polars.Series.reshape": [[773, "polars-series-reshape"]], "polars.Series.name": [[759, "polars-series-name"]], "polars.Series.peak_min": [[766, "polars-series-peak-min"]], "polars.Series.rank": [[769, "polars-series-rank"]], "polars.Series.kurtosis": [[747, "polars-series-kurtosis"]], "polars.Series.max": [[752, "polars-series-max"]], "polars.Series.is_not_nan": [[740, "polars-series-is-not-nan"]], "polars.Series.new_from_index": [[762, "polars-series-new-from-index"]], "polars.Series.rolling_skew": [[781, "polars-series-rolling-skew"]], "polars.Series.min": [[755, "polars-series-min"]], "polars.Series.head": [[727, "polars-series-head"]], "polars.Series.is_first": [[735, "polars-series-is-first"]], "polars.Series.rolling_mean": [[777, "polars-series-rolling-mean"]], "polars.Series.rolling_min": [[779, "polars-series-rolling-min"]], "polars.Series.mode": [[756, "polars-series-mode"]], "polars.Series.rolling_quantile": [[780, "polars-series-rolling-quantile"]], "polars.Series.set_at_idx": [[790, "polars-series-set-at-idx"]], "polars.Series.null_count": [[763, "polars-series-null-count"]], "polars.Series.reverse": [[774, "polars-series-reverse"]], "polars.Series.rolling_median": [[778, "polars-series-rolling-median"]], "polars.Series.rolling_apply": [[775, "polars-series-rolling-apply"]], "polars.Series.set_sorted": [[791, "polars-series-set-sorted"]], "polars.Series.interpolate": [[729, "polars-series-interpolate"]], "polars.Series.nan_min": [[761, "polars-series-nan-min"]], "polars.Series.search_sorted": [[787, "polars-series-search-sorted"]], "polars.Series.len": [[748, "polars-series-len"]], "polars.Series.mean": [[753, "polars-series-mean"]], "polars.Series.rolling_std": [[782, "polars-series-rolling-std"]], "polars.Series.round": [[785, "polars-series-round"]], "polars.Series.log10": [[751, "polars-series-log10"]], "polars.Series.inner_dtype": [[728, "polars-series-inner-dtype"]], "polars.Series.hash": [[726, "polars-series-hash"]], "polars.Series.n_chunks": [[757, "polars-series-n-chunks"]], "polars.Series.set": [[789, "polars-series-set"]], "polars.Series.series_equal": [[788, "polars-series-series-equal"]], "polars.Series.pct_change": [[764, "polars-series-pct-change"]], "polars.Series.is_datelike": [[731, "polars-series-is-datelike"]], "polars.Series.is_nan": [[739, "polars-series-is-nan"]], "polars.Series.is_finite": [[734, "polars-series-is-finite"]], "polars.Series.log": [[750, "polars-series-log"]], "polars.Series.item": [[746, "polars-series-item"]], "polars.Series.n_unique": [[758, "polars-series-n-unique"]], "polars.Series.is_infinite": [[738, "polars-series-is-infinite"]], "polars.Series.rolling_var": [[784, "polars-series-rolling-var"]], "polars.Series.reinterpret": [[771, "polars-series-reinterpret"]], "polars.Series.sample": [[786, "polars-series-sample"]], "polars.Series.is_in": [[737, "polars-series-is-in"]], "polars.Series.is_boolean": [[730, "polars-series-is-boolean"]], "polars.Series.is_duplicated": [[732, "polars-series-is-duplicated"]], "polars.Series.is_utf8": [[745, "polars-series-is-utf8"]], "polars.Series.is_null": [[742, "polars-series-is-null"]], "polars.Series.median": [[754, "polars-series-median"]], "polars.Series.product": [[767, "polars-series-product"]], "polars.Series.is_empty": [[733, "polars-series-is-empty"]], "polars.Series.quantile": [[768, "polars-series-quantile"]], "polars.Series.rename": [[772, "polars-series-rename"]], "polars.Series.is_not_null": [[741, "polars-series-is-not-null"]], "polars.Series.get_chunks": [[724, "polars-series-get-chunks"]], "polars.Series.dt.days": [[677, "polars-series-dt-days"]], "polars.Series.dt.day": [[676, "polars-series-dt-day"]], "polars.Series.drop_nulls": [[672, "polars-series-drop-nulls"]], "polars.Series.dt.hours": [[680, "polars-series-dt-hours"]], "polars.Series.dot": [[670, "polars-series-dot"]], "polars.Series.cos": [[661, "polars-series-cos"]], "polars.Series.dt.tz_localize": [[704, "polars-series-dt-tz-localize"]], "polars.Series.explode": [[717, "polars-series-explode"]], "polars.Series.flags": [[722, "polars-series-flags"]], "polars.Series.estimated_size": [[712, "polars-series-estimated-size"]], "polars.Series.cummax": [[663, "polars-series-cummax"]], "polars.Series.dt.quarter": [[697, "polars-series-dt-quarter"]], "polars.Series.dt.seconds": [[700, "polars-series-dt-seconds"]], "polars.Series.dt.with_time_zone": [[708, "polars-series-dt-with-time-zone"]], "polars.Series.fill_null": [[720, "polars-series-fill-null"]], "polars.Series.dt.strftime": [[701, "polars-series-dt-strftime"]], "polars.Series.floor": [[723, "polars-series-floor"]], "polars.Series.dt": [[673, "polars-series-dt"]], "polars.Series.dt.epoch": [[678, "polars-series-dt-epoch"]], "polars.Series.dt.mean": [[683, "polars-series-dt-mean"]], "polars.Series.dt.nanoseconds": [[694, "polars-series-dt-nanoseconds"]], "polars.Series.describe": [[668, "polars-series-describe"]], "polars.Series.has_validity": [[725, "polars-series-has-validity"]], "polars.Series.dt.nanosecond": [[693, "polars-series-dt-nanosecond"]], "polars.Series.dt.cast_time_zone": [[675, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.iso_year": [[681, "polars-series-dt-iso-year"]], "polars.Series.dt.second": [[699, "polars-series-dt-second"]], "polars.Series.ewm_mean": [[713, "polars-series-ewm-mean"]], "polars.Series.dt.microseconds": [[686, "polars-series-dt-microseconds"]], "polars.Series.diff": [[669, "polars-series-diff"]], "polars.Series.dt.round": [[698, "polars-series-dt-round"]], "polars.Series.dtype": [[710, "polars-series-dtype"]], "polars.Series.dt.truncate": [[703, "polars-series-dt-truncate"]], "polars.Series.ewm_std": [[714, "polars-series-ewm-std"]], "polars.Series.dt.ordinal_day": [[696, "polars-series-dt-ordinal-day"]], "polars.Series.dt.microsecond": [[685, "polars-series-dt-microsecond"]], "polars.Series.dt.weekday": [[706, "polars-series-dt-weekday"]], "polars.Series.clone": [[660, "polars-series-clone"]], "polars.Series.dt.month": [[692, "polars-series-dt-month"]], "polars.Series.fill_nan": [[719, "polars-series-fill-nan"]], "polars.Series.dt.year": [[709, "polars-series-dt-year"]], "polars.Series.dt.cast_time_unit": [[674, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.with_time_unit": [[707, "polars-series-dt-with-time-unit"]], "polars.Series.dt.minute": [[690, "polars-series-dt-minute"]], "polars.Series.dt.timestamp": [[702, "polars-series-dt-timestamp"]], "polars.Series.dt.week": [[705, "polars-series-dt-week"]], "polars.Series.drop_nans": [[671, "polars-series-drop-nans"]], "polars.Series.filter": [[721, "polars-series-filter"]], "polars.Series.dt.median": [[684, "polars-series-dt-median"]], "polars.Series.cumprod": [[665, "polars-series-cumprod"]], "polars.Series.cumsum": [[666, "polars-series-cumsum"]], "polars.Series.dt.hour": [[679, "polars-series-dt-hour"]], "polars.Series.dt.minutes": [[691, "polars-series-dt-minutes"]], "polars.Series.dt.offset_by": [[695, "polars-series-dt-offset-by"]], "polars.Series.dt.min": [[689, "polars-series-dt-min"]], "polars.Series.dt.max": [[682, "polars-series-dt-max"]], "polars.Series.ewm_var": [[715, "polars-series-ewm-var"]], "polars.Series.exp": [[716, "polars-series-exp"]], "polars.Series.dt.millisecond": [[687, "polars-series-dt-millisecond"]], "polars.Series.cosh": [[662, "polars-series-cosh"]], "polars.Series.entropy": [[711, "polars-series-entropy"]], "polars.Series.cumulative_eval": [[667, "polars-series-cumulative-eval"]], "polars.Series.extend_constant": [[718, "polars-series-extend-constant"]], "polars.Series.dt.milliseconds": [[688, "polars-series-dt-milliseconds"]], "polars.Series.cummin": [[664, "polars-series-cummin"]], "SQL": [[872, "sql"], [536, "sql"]], "Methods": [[872, "methods"]], "Export": [[865, "export"], [235, "export"]], "Testing": [[873, "testing"]], "Asserts": [[873, "asserts"]], "Property-based testing": [[873, "property-based-testing"]], "Strategies": [[873, "strategies"]], "Strategy helpers": [[873, "strategy-helpers"]], "polars.Series.zip_with": [[858, "polars-series-zip-with"]], "Attributes": [[860, "attributes"], [602, "attributes"], [232, "attributes"]], "Boolean": [[861, "boolean"], [521, "boolean"]], "Series": [[866, "series"]], "Temporal": [[871, "temporal"], [532, "temporal"]], "Utils": [[874, "utils"]], "Strings": [[869, "strings"], [530, "strings"]], "Struct": [[870, "struct"], [531, "struct"]], "Categories": [[862, "categories"], [522, "categories"]], "Miscellaneous": [[867, "miscellaneous"], [606, "miscellaneous"], [534, "miscellaneous"], [528, "miscellaneous"], [238, "miscellaneous"]], "Computation": [[863, "computation"], [524, "computation"], [233, "computation"]], "Array": [[859, "array"], [520, "array"]], "Manipulation/selection": [[868, "manipulation-selection"], [607, "manipulation-selection"], [529, "manipulation-selection"], [239, "manipulation-selection"]], "Descriptive": [[864, "descriptive"], [603, "descriptive"], [234, "descriptive"]], "polars.Series.cat": [[652, "polars-series-cat"]], "GroupBy": [[604, "groupby"], [236, "groupby"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[599, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arg_sort": [[623, "polars-series-arg-sort"]], "polars.Series.arccosh": [[616, "polars-series-arccosh"]], "polars.LazyFrame.with_columns": [[594, "polars-lazyframe-with-columns"]], "polars.Series.abs": [[609, "polars-series-abs"]], "polars.Series.arccos": [[615, "polars-series-arccos"]], "polars.Series.arr.to_struct": [[649, "polars-series-arr-to-struct"]], "polars.Series.clip": [[657, "polars-series-clip"]], "polars.Series.arr.get": [[635, "polars-series-arr-get"]], "polars.Series.arr.diff": [[632, "polars-series-arr-diff"]], "polars.Series.arr": [[627, "polars-series-arr"]], "polars.Series.arr.arg_min": [[629, "polars-series-arr-arg-min"]], "polars.Series.arr.lengths": [[639, "polars-series-arr-lengths"]], "LazyFrame": [[605, "lazyframe"]], "polars.Series.arr.concat": [[630, "polars-series-arr-concat"]], "polars.Series.cleared": [[656, "polars-series-cleared"]], "polars.Series.clip_max": [[658, "polars-series-clip-max"]], "polars.Series.append": [[613, "polars-series-append"]], "polars.Series.arr.first": [[634, "polars-series-arr-first"]], "polars.Series.arr.slice": [[645, "polars-series-arr-slice"]], "polars.Series.arr.sort": [[646, "polars-series-arr-sort"]], "polars.Series.any": [[612, "polars-series-any"]], "Read/write logical plan": [[606, "read-write-logical-plan"]], "polars.Series.apply": [[614, "polars-series-apply"]], "polars.LazyFrame.with_row_count": [[596, "polars-lazyframe-with-row-count"]], "polars.Series.arr.head": [[636, "polars-series-arr-head"]], "polars.Series.ceil": [[654, "polars-series-ceil"]], "polars.Series.cat.set_ordering": [[653, "polars-series-cat-set-ordering"]], "polars.LazyFrame.write_json": [[597, "polars-lazyframe-write-json"]], "polars.Series.alias": [[610, "polars-series-alias"]], "polars.Series.arr.arg_max": [[628, "polars-series-arr-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[601, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.all": [[611, "polars-series-all"]], "polars.Series.arr.join": [[637, "polars-series-arr-join"]], "polars.Series.arg_max": [[621, "polars-series-arg-max"]], "polars.Series.arr.mean": [[641, "polars-series-arr-mean"]], "polars.Series.arcsinh": [[618, "polars-series-arcsinh"]], "polars.Series.arr.eval": [[633, "polars-series-arr-eval"]], "polars.LazyFrame.with_context": [[595, "polars-lazyframe-with-context"]], "polars.Series.arg_true": [[624, "polars-series-arg-true"]], "polars.Series.arctanh": [[620, "polars-series-arctanh"]], "polars.Series.argsort": [[626, "polars-series-argsort"]], "polars.Series.arg_min": [[622, "polars-series-arg-min"]], "polars.Series.arr.max": [[640, "polars-series-arr-max"]], "polars.Series.arr.reverse": [[643, "polars-series-arr-reverse"]], "polars.Series.arr.tail": [[648, "polars-series-arr-tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[600, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.chunk_lengths": [[655, "polars-series-chunk-lengths"]], "polars.Series.clip_min": [[659, "polars-series-clip-min"]], "polars.Series.arg_unique": [[625, "polars-series-arg-unique"]], "polars.Series.arcsin": [[617, "polars-series-arcsin"]], "polars.Series.arr.last": [[638, "polars-series-arr-last"]], "polars.Series.arr.shift": [[644, "polars-series-arr-shift"]], "polars.Series.arr.sum": [[647, "polars-series-arr-sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[598, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arr.min": [[642, "polars-series-arr-min"]], "polars.Series.cast": [[651, "polars-series-cast"]], "polars.Series.arctan": [[619, "polars-series-arctan"]], "polars.Series.arr.contains": [[631, "polars-series-arr-contains"]], "polars.Series.arr.unique": [[650, "polars-series-arr-unique"]], "API reference": [[535, "api-reference"]], "polars.LazyFrame.rename": [[576, "polars-lazyframe-rename"]], "polars.LazyFrame.show_graph": [[582, "polars-lazyframe-show-graph"]], "polars.LazyFrame.with_column": [[593, "polars-lazyframe-with-column"]], "polars.LazyFrame.fill_nan": [[550, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.var": [[591, "polars-lazyframe-var"]], "polars.LazyFrame.min": [[571, "polars-lazyframe-min"]], "polars.LazyFrame.tail": [[587, "polars-lazyframe-tail"]], "polars.LazyFrame.fetch": [[549, "polars-lazyframe-fetch"]], "polars.LazyFrame.median": [[569, "polars-lazyframe-median"]], "polars.LazyFrame.first": [[553, "polars-lazyframe-first"]], "polars.LazyFrame.lazy": [[564, "polars-lazyframe-lazy"]], "Input/output": [[536, "input-output"]], "CSV": [[536, "csv"]], "Feather/ IPC": [[536, "feather-ipc"]], "Parquet": [[536, "parquet"]], "JSON": [[536, "json"]], "AVRO": [[536, "avro"]], "Excel": [[536, "excel"]], "Delta Lake": [[536, "delta-lake"]], "Datasets": [[536, "datasets"]], "BatchedCsvReader": [[536, "batchedcsvreader"]], "polars.LazyFrame.shift_and_fill": [[581, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.dtypes": [[547, "polars-lazyframe-dtypes"]], "Functions": [[534, "functions"], [525, "functions"], [241, "functions"]], "Conversion": [[534, "conversion"]], "Eager/Lazy functions": [[534, "eager-lazy-functions"]], "Parallelization": [[534, "parallelization"]], "StringCache": [[534, "stringcache"]], "polars.LazyFrame.melt": [[570, "polars-lazyframe-melt"]], "polars.LazyFrame.read_json": [[575, "polars-lazyframe-read-json"]], "polars.LazyFrame.unique": [[589, "polars-lazyframe-unique"]], "polars.LazyFrame.interpolate": [[560, "polars-lazyframe-interpolate"]], "polars.LazyFrame.inspect": [[559, "polars-lazyframe-inspect"]], "polars.LazyFrame.describe_plan": [[544, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.fill_null": [[551, "polars-lazyframe-fill-null"]], "polars.LazyFrame.take_every": [[588, "polars-lazyframe-take-every"]], "polars.LazyFrame.quantile": [[574, "polars-lazyframe-quantile"]], "polars.LazyFrame.groupby_rolling": [[557, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.join": [[561, "polars-lazyframe-join"]], "polars.LazyFrame.shift": [[580, "polars-lazyframe-shift"]], "polars.LazyFrame.filter": [[552, "polars-lazyframe-filter"]], "polars.LazyFrame.cleared": [[539, "polars-lazyframe-cleared"]], "polars.LazyFrame.sort": [[584, "polars-lazyframe-sort"]], "polars.LazyFrame.limit": [[565, "polars-lazyframe-limit"]], "polars.LazyFrame.describe_optimized_plan": [[543, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.unnest": [[590, "polars-lazyframe-unnest"]], "polars.LazyFrame.cache": [[538, "polars-lazyframe-cache"]], "polars.LazyFrame.clone": [[540, "polars-lazyframe-clone"]], "polars.LazyFrame.drop_nulls": [[546, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.explode": [[548, "polars-lazyframe-explode"]], "polars.LazyFrame.profile": [[573, "polars-lazyframe-profile"]], "polars.LazyFrame.select": [[579, "polars-lazyframe-select"]], "polars.LazyFrame.sum": [[586, "polars-lazyframe-sum"]], "polars.LazyFrame.from_json": [[554, "polars-lazyframe-from-json"]], "polars.LazyFrame.groupby": [[555, "polars-lazyframe-groupby"]], "polars.LazyFrame.last": [[563, "polars-lazyframe-last"]], "polars.LazyFrame.max": [[567, "polars-lazyframe-max"]], "polars.LazyFrame.columns": [[542, "polars-lazyframe-columns"]], "polars.LazyFrame.head": [[558, "polars-lazyframe-head"]], "polars.LazyFrame.width": [[592, "polars-lazyframe-width"]], "polars.LazyFrame.pipe": [[572, "polars-lazyframe-pipe"]], "polars.LazyFrame.slice": [[583, "polars-lazyframe-slice"]], "polars.LazyFrame.map": [[566, "polars-lazyframe-map"]], "polars.LazyFrame.collect": [[541, "polars-lazyframe-collect"]], "polars.LazyFrame.reverse": [[577, "polars-lazyframe-reverse"]], "polars.LazyFrame.drop": [[545, "polars-lazyframe-drop"]], "polars.LazyFrame.mean": [[568, "polars-lazyframe-mean"]], "polars.LazyFrame.schema": [[578, "polars-lazyframe-schema"]], "polars.LazyFrame.groupby_dynamic": [[556, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.join_asof": [[562, "polars-lazyframe-join-asof"]], "Window": [[533, "window"]], "polars.LazyFrame.std": [[585, "polars-lazyframe-std"]], "polars.Expr.quantile": [[397, "polars-expr-quantile"]], "polars.Expr.repeat_by": [[401, "polars-expr-repeat-by"]], "polars.Expr.shrink_dtype": [[420, "polars-expr-shrink-dtype"]], "polars.Expr.suffix": [[460, "polars-expr-suffix"]], "polars.Expr.std": [[430, "polars-expr-std"]], "polars.Expr.str.json_path_match": [[439, "polars-expr-str-json-path-match"]], "polars.Expr.round": [[414, "polars-expr-round"]], "polars.Expr.str.splitn": [[451, "polars-expr-str-splitn"]], "polars.Expr.sort_by": [[428, "polars-expr-sort-by"]], "polars.Expr.shuffle": [[421, "polars-expr-shuffle"]], "polars.Expr.sign": [[422, "polars-expr-sign"]], "polars.Expr.sample": [[415, "polars-expr-sample"]], "polars.Expr.sqrt": [[429, "polars-expr-sqrt"]], "polars.Expr.sinh": [[424, "polars-expr-sinh"]], "polars.Expr.struct.rename_fields": [[459, "polars-expr-struct-rename-fields"]], "polars.Expr.sum": [[461, "polars-expr-sum"]], "polars.Expr.str.n_chars": [[443, "polars-expr-str-n-chars"]], "polars.Expr.str.strip": [[453, "polars-expr-str-strip"]], "polars.Expr.shift": [[418, "polars-expr-shift"]], "polars.Expr.str.to_lowercase": [[455, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_sum": [[412, "polars-expr-rolling-sum"]], "polars.Expr.search_sorted": [[416, "polars-expr-search-sorted"]], "polars.Expr.rechunk": [[399, "polars-expr-rechunk"]], "polars.Expr.str.starts_with": [[452, "polars-expr-str-starts-with"]], "polars.Expr.reinterpret": [[400, "polars-expr-reinterpret"]], "polars.Expr.str.ljust": [[441, "polars-expr-str-ljust"]], "polars.Expr.rolling_var": [[413, "polars-expr-rolling-var"]], "polars.Expr.sin": [[423, "polars-expr-sin"]], "polars.Expr.str.replace": [[444, "polars-expr-str-replace"]], "polars.Expr.str.ends_with": [[436, "polars-expr-str-ends-with"]], "polars.Expr.str.strptime": [[454, "polars-expr-str-strptime"]], "polars.Expr.sort": [[427, "polars-expr-sort"]], "polars.Expr.rolling_quantile": [[409, "polars-expr-rolling-quantile"]], "polars.Expr.slice": [[426, "polars-expr-slice"]], "polars.Expr.str.slice": [[448, "polars-expr-str-slice"]], "polars.Expr.str.rstrip": [[447, "polars-expr-str-rstrip"]], "polars.Expr.shift_and_fill": [[419, "polars-expr-shift-and-fill"]], "polars.Expr.str.rjust": [[446, "polars-expr-str-rjust"]], "polars.Expr.str.lengths": [[440, "polars-expr-str-lengths"]], "polars.Expr.str.split_exact": [[450, "polars-expr-str-split-exact"]], "polars.Expr.str.replace_all": [[445, "polars-expr-str-replace-all"]], "polars.Expr.str.extract_all": [[438, "polars-expr-str-extract-all"]], "polars.Expr.str.decode": [[434, "polars-expr-str-decode"]], "polars.Expr.struct.field": [[458, "polars-expr-struct-field"]], "polars.Expr.reshape": [[402, "polars-expr-reshape"]], "polars.Expr.product": [[396, "polars-expr-product"]], "polars.Expr.str.lstrip": [[442, "polars-expr-str-lstrip"]], "polars.Expr.str.extract": [[437, "polars-expr-str-extract"]], "polars.Expr.str.zfill": [[457, "polars-expr-str-zfill"]], "polars.Expr.rolling_std": [[411, "polars-expr-rolling-std"]], "polars.Expr.rolling_max": [[405, "polars-expr-rolling-max"]], "polars.Expr.rolling_apply": [[404, "polars-expr-rolling-apply"]], "polars.Expr.str.concat": [[431, "polars-expr-str-concat"]], "polars.Expr.str.to_uppercase": [[456, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_min": [[408, "polars-expr-rolling-min"]], "polars.Expr.reverse": [[403, "polars-expr-reverse"]], "polars.Expr.str.contains": [[432, "polars-expr-str-contains"]], "polars.Expr.str.count_match": [[433, "polars-expr-str-count-match"]], "polars.Expr.rolling_mean": [[406, "polars-expr-rolling-mean"]], "polars.Expr.skew": [[425, "polars-expr-skew"]], "polars.Expr.str.split": [[449, "polars-expr-str-split"]], "polars.Expr.rank": [[398, "polars-expr-rank"]], "polars.Expr.set_sorted": [[417, "polars-expr-set-sorted"]], "polars.Expr.rolling_median": [[407, "polars-expr-rolling-median"]], "polars.Expr.rolling_skew": [[410, "polars-expr-rolling-skew"]], "polars.Expr.str.encode": [[435, "polars-expr-str-encode"]], "polars.Expr.inspect": [[354, "polars-expr-inspect"]], "polars.Expr.lower_bound": [[376, "polars-expr-lower-bound"]], "polars.Expr.map": [[377, "polars-expr-map"]], "polars.Expr.last": [[370, "polars-expr-last"]], "polars.Expr.meta.output_name": [[382, "polars-expr-meta-output-name"]], "polars.Expr.nan_min": [[390, "polars-expr-nan-min"]], "polars.Expr.len": [[371, "polars-expr-len"]], "polars.Expr.ewm_var": [[340, "polars-expr-ewm-var"]], "polars.Expr.explode": [[343, "polars-expr-explode"]], "polars.Expr.meta.undo_aliases": [[385, "polars-expr-meta-undo-aliases"]], "polars.Expr.n_unique": [[388, "polars-expr-n-unique"]], "polars.Expr.is_not_nan": [[364, "polars-expr-is-not-nan"]], "polars.Expr.meta.root_names": [[384, "polars-expr-meta-root-names"]], "polars.Expr.is_first": [[359, "polars-expr-is-first"]], "polars.Expr.nan_max": [[389, "polars-expr-nan-max"]], "polars.Expr.is_finite": [[358, "polars-expr-is-finite"]], "polars.Expr.null_count": [[391, "polars-expr-null-count"]], "polars.Expr.mode": [[387, "polars-expr-mode"]], "polars.Expr.keep_name": [[368, "polars-expr-keep-name"]], "polars.Expr.flatten": [[349, "polars-expr-flatten"]], "polars.Expr.mean": [[380, "polars-expr-mean"]], "polars.Expr.extend_constant": [[344, "polars-expr-extend-constant"]], "polars.Expr.meta.pop": [[383, "polars-expr-meta-pop"]], "polars.Expr.log10": [[375, "polars-expr-log10"]], "polars.Expr.entropy": [[337, "polars-expr-entropy"]], "polars.Expr.is_duplicated": [[357, "polars-expr-is-duplicated"]], "polars.Expr.map_alias": [[378, "polars-expr-map-alias"]], "polars.Expr.kurtosis": [[369, "polars-expr-kurtosis"]], "polars.Expr.filter": [[347, "polars-expr-filter"]], "polars.Expr.dt.week": [[332, "polars-expr-dt-week"]], "polars.Expr.dt.year": [[336, "polars-expr-dt-year"]], "polars.Expr.head": [[353, "polars-expr-head"]], "polars.Expr.max": [[379, "polars-expr-max"]], "polars.Expr.over": [[392, "polars-expr-over"]], "polars.Expr.pct_change": [[393, "polars-expr-pct-change"]], "polars.Expr.median": [[381, "polars-expr-median"]], "polars.Expr.dt.weekday": [[333, "polars-expr-dt-weekday"]], "polars.Expr.list": [[373, "polars-expr-list"]], "polars.Expr.fill_nan": [[345, "polars-expr-fill-nan"]], "polars.Expr.exclude": [[341, "polars-expr-exclude"]], "polars.Expr.floor": [[350, "polars-expr-floor"]], "polars.Expr.hash": [[352, "polars-expr-hash"]], "polars.Expr.interpolate": [[355, "polars-expr-interpolate"]], "polars.Expr.prefix": [[395, "polars-expr-prefix"]], "polars.Expr.ewm_std": [[339, "polars-expr-ewm-std"]], "polars.Expr.log": [[374, "polars-expr-log"]], "polars.Expr.is_unique": [[367, "polars-expr-is-unique"]], "polars.Expr.is_between": [[356, "polars-expr-is-between"]], "polars.Expr.dt.with_time_zone": [[335, "polars-expr-dt-with-time-zone"]], "polars.Expr.dt.with_time_unit": [[334, "polars-expr-dt-with-time-unit"]], "polars.Expr.ewm_mean": [[338, "polars-expr-ewm-mean"]], "polars.Expr.exp": [[342, "polars-expr-exp"]], "polars.Expr.dt.truncate": [[330, "polars-expr-dt-truncate"]], "polars.Expr.first": [[348, "polars-expr-first"]], "polars.Expr.limit": [[372, "polars-expr-limit"]], "polars.Expr.is_not_null": [[365, "polars-expr-is-not-null"]], "polars.Expr.is_infinite": [[361, "polars-expr-is-infinite"]], "polars.Expr.is_not": [[363, "polars-expr-is-not"]], "polars.Expr.is_nan": [[362, "polars-expr-is-nan"]], "polars.Expr.forward_fill": [[351, "polars-expr-forward-fill"]], "polars.Expr.dt.tz_localize": [[331, "polars-expr-dt-tz-localize"]], "polars.Expr.fill_null": [[346, "polars-expr-fill-null"]], "polars.Expr.pow": [[394, "polars-expr-pow"]], "polars.Expr.min": [[386, "polars-expr-min"]], "polars.Expr.is_in": [[360, "polars-expr-is-in"]], "polars.Expr.is_null": [[366, "polars-expr-is-null"]], "polars.Expr.dt.nanosecond": [[320, "polars-expr-dt-nanosecond"]], "polars.Expr.diff": [[301, "polars-expr-diff"]], "polars.Expr.cumprod": [[298, "polars-expr-cumprod"]], "polars.Expr.dt.minute": [[317, "polars-expr-dt-minute"]], "polars.Expr.cos": [[292, "polars-expr-cos"]], "polars.Expr.dt.cast_time_zone": [[306, "polars-expr-dt-cast-time-zone"]], "polars.Expr.arr.sum": [[281, "polars-expr-arr-sum"]], "polars.Expr.arr.diff": [[266, "polars-expr-arr-diff"]], "polars.Expr.arr.slice": [[279, "polars-expr-arr-slice"]], "polars.Expr.cast": [[286, "polars-expr-cast"]], "polars.Expr.cumcount": [[295, "polars-expr-cumcount"]], "polars.Expr.arr.shift": [[278, "polars-expr-arr-shift"]], "polars.Expr.dt.days": [[308, "polars-expr-dt-days"]], "polars.Expr.dt.milliseconds": [[316, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.microsecond": [[313, "polars-expr-dt-microsecond"]], "polars.Expr.dt.ordinal_day": [[323, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.strftime": [[328, "polars-expr-dt-strftime"]], "polars.Expr.dt.iso_year": [[312, "polars-expr-dt-iso-year"]], "polars.Expr.cosh": [[293, "polars-expr-cosh"]], "polars.Expr.arr.contains": [[265, "polars-expr-arr-contains"]], "polars.Expr.dt.millisecond": [[315, "polars-expr-dt-millisecond"]], "polars.Expr.arr.eval": [[267, "polars-expr-arr-eval"]], "polars.Expr.dt.timestamp": [[329, "polars-expr-dt-timestamp"]], "polars.Expr.arr.min": [[276, "polars-expr-arr-min"]], "polars.Expr.arr.sort": [[280, "polars-expr-arr-sort"]], "polars.Expr.backward_fill": [[285, "polars-expr-backward-fill"]], "polars.Expr.dt.month": [[319, "polars-expr-dt-month"]], "polars.Expr.dt.nanoseconds": [[321, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.offset_by": [[322, "polars-expr-dt-offset-by"]], "polars.Expr.arr.max": [[274, "polars-expr-arr-max"]], "polars.Expr.arr.unique": [[284, "polars-expr-arr-unique"]], "polars.Expr.arr.mean": [[275, "polars-expr-arr-mean"]], "polars.Expr.dt.day": [[307, "polars-expr-dt-day"]], "polars.Expr.clip_min": [[291, "polars-expr-clip-min"]], "polars.Expr.count": [[294, "polars-expr-count"]], "polars.Expr.arr.join": [[271, "polars-expr-arr-join"]], "polars.Expr.arr.to_struct": [[283, "polars-expr-arr-to-struct"]], "polars.Expr.dt.minutes": [[318, "polars-expr-dt-minutes"]], "polars.Expr.cumulative_eval": [[300, "polars-expr-cumulative-eval"]], "polars.Expr.dt.second": [[326, "polars-expr-dt-second"]], "polars.Expr.arr.tail": [[282, "polars-expr-arr-tail"]], "polars.Expr.arr.lengths": [[273, "polars-expr-arr-lengths"]], "polars.Expr.ceil": [[288, "polars-expr-ceil"]], "polars.Expr.dt.hour": [[310, "polars-expr-dt-hour"]], "polars.Expr.dt.seconds": [[327, "polars-expr-dt-seconds"]], "polars.Expr.arr.head": [[270, "polars-expr-arr-head"]], "polars.Expr.dt.epoch": [[309, "polars-expr-dt-epoch"]], "polars.Expr.cummin": [[297, "polars-expr-cummin"]], "polars.Expr.dt.cast_time_unit": [[305, "polars-expr-dt-cast-time-unit"]], "polars.Expr.drop_nans": [[303, "polars-expr-drop-nans"]], "polars.Expr.arr.reverse": [[277, "polars-expr-arr-reverse"]], "polars.Expr.clip": [[289, "polars-expr-clip"]], "polars.Expr.drop_nulls": [[304, "polars-expr-drop-nulls"]], "polars.Expr.dt.microseconds": [[314, "polars-expr-dt-microseconds"]], "polars.Expr.arr.concat": [[264, "polars-expr-arr-concat"]], "polars.Expr.cumsum": [[299, "polars-expr-cumsum"]], "polars.Expr.cummax": [[296, "polars-expr-cummax"]], "polars.Expr.dt.quarter": [[324, "polars-expr-dt-quarter"]], "polars.Expr.arr.get": [[269, "polars-expr-arr-get"]], "polars.Expr.dt.round": [[325, "polars-expr-dt-round"]], "polars.Expr.dot": [[302, "polars-expr-dot"]], "polars.Expr.arr.last": [[272, "polars-expr-arr-last"]], "polars.Expr.clip_max": [[290, "polars-expr-clip-max"]], "polars.Expr.arr.first": [[268, "polars-expr-arr-first"]], "polars.Expr.dt.hours": [[311, "polars-expr-dt-hours"]], "polars.Expr.cat.set_ordering": [[287, "polars-expr-cat-set-ordering"]], "polars.any": [[476, "polars-any"]], "polars.avg": [[480, "polars-avg"]], "polars.all": [[475, "polars-all"]], "polars.Expr.tail": [[462, "polars-expr-tail"]], "polars.n_unique": [[507, "polars-n-unique"]], "polars.sum": [[516, "polars-sum"]], "polars.min": [[506, "polars-min"]], "polars.Expr.take_every": [[464, "polars-expr-take-every"]], "polars.Expr.to_physical": [[467, "polars-expr-to-physical"]], "polars.cumsum": [[489, "polars-cumsum"]], "polars.cov": [[486, "polars-cov"]], "polars.Expr.where": [[474, "polars-expr-where"]], "polars.max": [[503, "polars-max"]], "polars.select": [[512, "polars-select"]], "polars.Expr.take": [[463, "polars-expr-take"]], "polars.count": [[485, "polars-count"]], "polars.list": [[500, "polars-list"]], "polars.map": [[502, "polars-map"]], "polars.Expr.unique_counts": [[470, "polars-expr-unique-counts"]], "polars.element": [[493, "polars-element"]], "polars.argsort_by": [[479, "polars-argsort-by"]], "polars.pearson_corr": [[508, "polars-pearson-corr"]], "polars.format": [[497, "polars-format"]], "polars.repeat": [[511, "polars-repeat"]], "polars.spearman_rank_corr": [[513, "polars-spearman-rank-corr"]], "Expressions": [[526, "expressions"]], "polars.head": [[499, "polars-head"]], "polars.groups": [[498, "polars-groups"]], "polars.datetime": [[491, "polars-datetime"]], "polars.quantile": [[509, "polars-quantile"]], "polars.coalesce": [[481, "polars-coalesce"]], "polars.duration": [[492, "polars-duration"]], "polars.Expr.tanh": [[466, "polars-expr-tanh"]], "polars.Expr.unique": [[469, "polars-expr-unique"]], "polars.tail": [[517, "polars-tail"]], "polars.exclude": [[494, "polars-exclude"]], "Columns / names": [[523, "columns-names"]], "polars.Expr.upper_bound": [[471, "polars-expr-upper-bound"]], "Meta": [[527, "meta"]], "polars.reduce": [[510, "polars-reduce"]], "polars.concat_list": [[483, "polars-concat-list"]], "polars.concat_str": [[484, "polars-concat-str"]], "polars.cumfold": [[487, "polars-cumfold"]], "polars.date": [[490, "polars-date"]], "polars.cumreduce": [[488, "polars-cumreduce"]], "polars.Expr.top_k": [[468, "polars-expr-top-k"]], "polars.col": [[482, "polars-col"]], "polars.mean": [[504, "polars-mean"]], "polars.std": [[514, "polars-std"]], "polars.var": [[518, "polars-var"]], "polars.median": [[505, "polars-median"]], "polars.Expr.tan": [[465, "polars-expr-tan"]], "polars.first": [[495, "polars-first"]], "polars.Expr.value_counts": [[472, "polars-expr-value-counts"]], "polars.apply": [[477, "polars-apply"]], "polars.arange": [[478, "polars-arange"]], "polars.Expr.var": [[473, "polars-expr-var"]], "polars.struct": [[515, "polars-struct"]], "polars.lit": [[501, "polars-lit"]], "polars.fold": [[496, "polars-fold"]], "polars.when": [[519, "polars-when"]], "polars.DataFrame.median": [[157, "polars-dataframe-median"]], "polars.DataFrame.is_unique": [[149, "polars-dataframe-is-unique"]], "polars.DataFrame.shape": [[179, "polars-dataframe-shape"]], "polars.DataFrame.slice": [[183, "polars-dataframe-slice"]], "polars.DataFrame.replace_at_idx": [[172, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.product": [[167, "polars-dataframe-product"]], "polars.DataFrame.select": [[178, "polars-dataframe-select"]], "polars.DataFrame.sort": [[184, "polars-dataframe-sort"]], "polars.DataFrame.rechunk": [[169, "polars-dataframe-rechunk"]], "polars.DataFrame.hash_rows": [[141, "polars-dataframe-hash-rows"]], "polars.DataFrame.lazy": [[153, "polars-dataframe-lazy"]], "polars.DataFrame.interpolate": [[146, "polars-dataframe-interpolate"]], "polars.DataFrame.to_pandas": [[194, "polars-dataframe-to-pandas"]], "polars.DataFrame.shrink_to_fit": [[182, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.glimpse": [[137, "polars-dataframe-glimpse"]], "polars.DataFrame.height": [[143, "polars-dataframe-height"]], "polars.DataFrame.sample": [[176, "polars-dataframe-sample"]], "polars.DataFrame.groupby_dynamic": [[139, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.to_series": [[195, "polars-dataframe-to-series"]], "polars.DataFrame.shift": [[180, "polars-dataframe-shift"]], "polars.DataFrame.reverse": [[173, "polars-dataframe-reverse"]], "polars.DataFrame.max": [[155, "polars-dataframe-max"]], "polars.DataFrame.is_duplicated": [[147, "polars-dataframe-is-duplicated"]], "polars.DataFrame.pearson_corr": [[164, "polars-dataframe-pearson-corr"]], "polars.DataFrame.pipe": [[165, "polars-dataframe-pipe"]], "polars.DataFrame.is_empty": [[148, "polars-dataframe-is-empty"]], "polars.DataFrame.pivot": [[166, "polars-dataframe-pivot"]], "polars.DataFrame.replace": [[171, "polars-dataframe-replace"]], "polars.DataFrame.row": [[174, "polars-dataframe-row"]], "polars.DataFrame.mean": [[156, "polars-dataframe-mean"]], "polars.DataFrame.join": [[151, "polars-dataframe-join"]], "polars.DataFrame.min": [[159, "polars-dataframe-min"]], "polars.DataFrame.join_asof": [[152, "polars-dataframe-join-asof"]], "polars.DataFrame.to_dummies": [[192, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_numpy": [[193, "polars-dataframe-to-numpy"]], "polars.DataFrame.fold": [[133, "polars-dataframe-fold"]], "polars.DataFrame.get_columns": [[136, "polars-dataframe-get-columns"]], "polars.DataFrame.frame_equal": [[134, "polars-dataframe-frame-equal"]], "polars.DataFrame.rows": [[175, "polars-dataframe-rows"]], "polars.DataFrame.tail": [[187, "polars-dataframe-tail"]], "polars.DataFrame.melt": [[158, "polars-dataframe-melt"]], "polars.DataFrame.transpose": [[197, "polars-dataframe-transpose"]], "polars.DataFrame.to_struct": [[196, "polars-dataframe-to-struct"]], "polars.DataFrame.null_count": [[162, "polars-dataframe-null-count"]], "polars.DataFrame.n_chunks": [[160, "polars-dataframe-n-chunks"]], "polars.DataFrame.take_every": [[188, "polars-dataframe-take-every"]], "polars.DataFrame.get_column": [[135, "polars-dataframe-get-column"]], "polars.DataFrame.sum": [[186, "polars-dataframe-sum"]], "polars.DataFrame.groupby": [[138, "polars-dataframe-groupby"]], "polars.DataFrame.to_arrow": [[189, "polars-dataframe-to-arrow"]], "polars.DataFrame.rename": [[170, "polars-dataframe-rename"]], "polars.DataFrame.schema": [[177, "polars-dataframe-schema"]], "polars.DataFrame.to_dicts": [[191, "polars-dataframe-to-dicts"]], "polars.DataFrame.quantile": [[168, "polars-dataframe-quantile"]], "polars.DataFrame.find_idx_by_name": [[132, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.limit": [[154, "polars-dataframe-limit"]], "polars.DataFrame.to_dict": [[190, "polars-dataframe-to-dict"]], "polars.DataFrame.std": [[185, "polars-dataframe-std"]], "polars.DataFrame.partition_by": [[163, "polars-dataframe-partition-by"]], "polars.DataFrame.item": [[150, "polars-dataframe-item"]], "polars.DataFrame.groupby_rolling": [[140, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hstack": [[144, "polars-dataframe-hstack"]], "polars.DataFrame.insert_at_idx": [[145, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.n_unique": [[161, "polars-dataframe-n-unique"]], "polars.DataFrame.shift_and_fill": [[181, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.head": [[142, "polars-dataframe-head"]], "polars.DataFrame.unique": [[198, "polars-dataframe-unique"]], "polars.internals.dataframe.groupby.GroupBy.count": [[211, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.dataframe.pivot.PivotOps.min": [[230, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.internals.dataframe.groupby.GroupBy.first": [[212, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[219, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.pivot.PivotOps.max": [[227, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.pivot.PivotOps.count": [[224, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[216, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[220, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.groupby.GroupBy.max": [[215, "polars-internals-dataframe-groupby-groupby-max"]], "polars.DataFrame.with_column": [[205, "polars-dataframe-with-column"]], "polars.DataFrame.unstack": [[200, "polars-dataframe-unstack"]], "polars.Expr.arccos": [[251, "polars-expr-arccos"]], "polars.Expr.arr.arg_max": [[262, "polars-expr-arr-arg-max"]], "polars.DataFrame.with_row_count": [[207, "polars-dataframe-with-row-count"]], "polars.Expr.all": [[247, "polars-expr-all"]], "polars.Expr.arctan": [[255, "polars-expr-arctan"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[209, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.Expr.arg_sort": [[259, "polars-expr-arg-sort"]], "polars.Expr.append": [[249, "polars-expr-append"]], "polars.DataFrame.unnest": [[199, "polars-dataframe-unnest"]], "polars.internals.dataframe.groupby.GroupBy.min": [[218, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.arcsinh": [[254, "polars-expr-arcsinh"]], "polars.Expr.arg_unique": [[260, "polars-expr-arg-unique"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[228, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.Expr.arcsin": [[253, "polars-expr-arcsin"]], "Pivot": [[240, "pivot"]], "polars.internals.dataframe.pivot.PivotOps.first": [[225, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.pivot.PivotOps.median": [[229, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.DataFrame.upsample": [[201, "polars-dataframe-upsample"]], "polars.DataFrame.with_columns": [[206, "polars-dataframe-with-columns"]], "DataFrame": [[237, "dataframe"]], "polars.Expr.arctanh": [[256, "polars-expr-arctanh"]], "Exceptions": [[242, "exceptions"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[208, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.last": [[214, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.alias": [[246, "polars-expr-alias"]], "polars.DataFrame.vstack": [[203, "polars-dataframe-vstack"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[231, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[210, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.DataFrame.var": [[202, "polars-dataframe-var"]], "polars.internals.dataframe.pivot.PivotOps.last": [[226, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.DataFrame.width": [[204, "polars-dataframe-width"]], "polars.Expr.agg_groups": [[245, "polars-expr-agg-groups"]], "Data types": [[241, "data-types"]], "Numeric": [[241, "numeric"]], "Date / Time": [[241, "date-time"]], "Nested": [[241, "nested"]], "Other": [[241, "other"]], "polars.Expr.arr.arg_min": [[263, "polars-expr-arr-arg-min"]], "polars.Expr.any": [[248, "polars-expr-any"]], "polars.internals.dataframe.groupby.GroupBy.median": [[217, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[223, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.apply": [[250, "polars-expr-apply"]], "polars.Expr.arg_min": [[258, "polars-expr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.head": [[213, "polars-internals-dataframe-groupby-groupby-head"]], "polars.Expr.argsort": [[261, "polars-expr-argsort"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[221, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[222, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.arccosh": [[252, "polars-expr-arccosh"]], "polars.Expr.abs": [[244, "polars-expr-abs"]], "polars.Expr.arg_max": [[257, "polars-expr-arg-max"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[9, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[10, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[11, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[12, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[13, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[14, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[19, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[20, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[21, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[22, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[23, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[24, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[25, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[26, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[27, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[28, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[29, "polars.DataType"]], "__init__() (polars.datatype method)": [[29, "polars.DataType.__init__"]], "date (class in polars)": [[30, "polars.Date"]], "__init__() (polars.date method)": [[30, "polars.Date.__init__"]], "datetime (class in polars)": [[31, "polars.Datetime"]], "__init__() (polars.datetime method)": [[31, "polars.Datetime.__init__"]], "duration (class in polars)": [[32, "polars.Duration"]], "__init__() (polars.duration method)": [[32, "polars.Duration.__init__"]], "float32 (class in polars)": [[33, "polars.Float32"]], "__init__() (polars.float32 method)": [[33, "polars.Float32.__init__"]], "float64 (class in polars)": [[34, "polars.Float64"]], "__init__() (polars.float64 method)": [[34, "polars.Float64.__init__"]], "int16 (class in polars)": [[35, "polars.Int16"]], "__init__() (polars.int16 method)": [[35, "polars.Int16.__init__"]], "int32 (class in polars)": [[36, "polars.Int32"]], "__init__() (polars.int32 method)": [[36, "polars.Int32.__init__"]], "int64 (class in polars)": [[37, "polars.Int64"]], "__init__() (polars.int64 method)": [[37, "polars.Int64.__init__"]], "int8 (class in polars)": [[38, "polars.Int8"]], "__init__() (polars.int8 method)": [[38, "polars.Int8.__init__"]], "list (class in polars)": [[39, "polars.List"]], "__init__() (polars.list method)": [[39, "polars.List.__init__"]], "null (class in polars)": [[40, "polars.Null"]], "__init__() (polars.null method)": [[40, "polars.Null.__init__"]], "object (class in polars)": [[41, "polars.Object"]], "__init__() (polars.object method)": [[41, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[42, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[43, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[44, "polars.SQLContext.register"]], "stringcache (class in polars)": [[45, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[45, "polars.StringCache.__init__"]], "struct (class in polars)": [[46, "polars.Struct"]], "__init__() (polars.struct method)": [[46, "polars.Struct.__init__"]], "time (class in polars)": [[47, "polars.Time"]], "__init__() (polars.time method)": [[47, "polars.Time.__init__"]], "uint16 (class in polars)": [[48, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[48, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[49, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[49, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[50, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[50, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[51, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[51, "polars.UInt8.__init__"]], "unknown (class in polars)": [[52, "polars.Unknown"]], "__init__() (polars.unknown method)": [[52, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[53, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[53, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[59, "polars.arg_where"]], "build_info() (in module polars)": [[60, "polars.build_info"]], "collect_all() (in module polars)": [[61, "polars.collect_all"]], "concat() (in module polars)": [[62, "polars.concat"]], "cut() (in module polars)": [[63, "polars.cut"]], "date_range() (in module polars)": [[64, "polars.date_range"]], "arrowerror": [[65, "polars.exceptions.ArrowError"]], "computeerror": [[66, "polars.exceptions.ComputeError"]], "duplicateerror": [[67, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[68, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[69, "polars.exceptions.NoDataError"]], "norowsreturned": [[70, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[71, "polars.exceptions.NotFoundError"]], "panicexception": [[72, "polars.exceptions.PanicException"]], "rowsexception": [[73, "polars.exceptions.RowsException"]], "schemaerror": [[74, "polars.exceptions.SchemaError"]], "shapeerror": [[75, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[76, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[77, "polars.from_arrow"]], "from_dict() (in module polars)": [[78, "polars.from_dict"]], "from_dicts() (in module polars)": [[79, "polars.from_dicts"]], "from_numpy() (in module polars)": [[80, "polars.from_numpy"]], "from_pandas() (in module polars)": [[81, "polars.from_pandas"]], "from_records() (in module polars)": [[82, "polars.from_records"]], "get_dummies() (in module polars)": [[83, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[84, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[85, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[86, "polars.ones"]], "read_avro() (in module polars)": [[87, "polars.read_avro"]], "read_csv() (in module polars)": [[88, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[89, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[90, "polars.read_delta"]], "read_excel() (in module polars)": [[91, "polars.read_excel"]], "read_ipc() (in module polars)": [[92, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[93, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[94, "polars.read_json"]], "read_ndjson() (in module polars)": [[95, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[96, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[97, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[98, "polars.read_sql"]], "scan_csv() (in module polars)": [[99, "polars.scan_csv"]], "scan_delta() (in module polars)": [[100, "polars.scan_delta"]], "scan_ds() (in module polars)": [[101, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[102, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[103, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[104, "polars.scan_parquet"]], "show_versions() (in module polars)": [[105, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[106, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[107, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[108, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[108, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[109, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[110, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[112, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[113, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[114, "polars.zeros"]], "apply() (polars.dataframe method)": [[117, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[118, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[119, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[120, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[121, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[122, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[123, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[124, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[125, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[126, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[127, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[128, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[129, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[130, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[131, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[132, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[133, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[134, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[135, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[136, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[137, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[138, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[139, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[140, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[141, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[142, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[143, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[144, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[145, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[146, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[147, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[148, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[149, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[150, "polars.DataFrame.item"]], "join() (polars.dataframe method)": [[151, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[152, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[153, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[154, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[155, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[156, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[157, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[158, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[159, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[160, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[161, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[162, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[163, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[164, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[165, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[166, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[167, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[168, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[169, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[170, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[171, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[172, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[173, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[174, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[175, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[176, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[177, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[178, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[179, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[180, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[181, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[182, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[183, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[184, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[185, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[186, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[187, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[188, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[189, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[190, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[191, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[192, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[193, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[194, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[195, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[196, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[197, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[198, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[199, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[200, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[201, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[202, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[203, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[204, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[205, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[206, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[207, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[208, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[209, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[224, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[225, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[226, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[227, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[228, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[229, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[230, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[231, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[244, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[245, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[246, "polars.Expr.alias"]], "all() (polars.expr method)": [[247, "polars.Expr.all"]], "any() (polars.expr method)": [[248, "polars.Expr.any"]], "append() (polars.expr method)": [[249, "polars.Expr.append"]], "apply() (polars.expr method)": [[250, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[251, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[252, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[253, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[254, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[255, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[256, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[257, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[258, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[259, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[260, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[261, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[262, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[263, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[264, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[265, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[266, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[267, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[268, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[269, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[270, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[271, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[272, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[273, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[274, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[275, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[276, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[277, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[278, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[279, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[280, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[281, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[282, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[283, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[284, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[285, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[286, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[287, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[288, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[289, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[290, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[291, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[292, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[293, "polars.Expr.cosh"]], "count() (polars.expr method)": [[294, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[295, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[296, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[297, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[298, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[299, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[300, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[301, "polars.Expr.diff"]], "dot() (polars.expr method)": [[302, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[303, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[304, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[305, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[306, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[307, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[308, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[309, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[310, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[311, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[312, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[313, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[314, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[315, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[316, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[317, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[318, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[319, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[320, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[321, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[322, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[323, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[324, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[325, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[326, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[328, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[329, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[330, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[331, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[332, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[333, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[334, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[335, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[336, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[337, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[338, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[339, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[340, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[341, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[342, "polars.Expr.exp"]], "explode() (polars.expr method)": [[343, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[344, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[345, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[346, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[347, "polars.Expr.filter"]], "first() (polars.expr method)": [[348, "polars.Expr.first"]], "flatten() (polars.expr method)": [[349, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[350, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[351, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[352, "polars.Expr.hash"]], "head() (polars.expr method)": [[353, "polars.Expr.head"]], "inspect() (polars.expr method)": [[354, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[355, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[356, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[357, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[358, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[359, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[360, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[361, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[362, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[363, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[364, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[365, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[366, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[367, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[368, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[369, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[370, "polars.Expr.last"]], "len() (polars.expr method)": [[371, "polars.Expr.len"]], "limit() (polars.expr method)": [[372, "polars.Expr.limit"]], "list() (polars.expr method)": [[373, "polars.Expr.list"]], "log() (polars.expr method)": [[374, "polars.Expr.log"]], "log10() (polars.expr method)": [[375, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[376, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[377, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[378, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[379, "polars.Expr.max"]], "mean() (polars.expr method)": [[380, "polars.Expr.mean"]], "median() (polars.expr method)": [[381, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[382, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[383, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[384, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[385, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[386, "polars.Expr.min"]], "mode() (polars.expr method)": [[387, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[388, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[389, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[390, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[391, "polars.Expr.null_count"]], "over() (polars.expr method)": [[392, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[393, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[394, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[395, "polars.Expr.prefix"]], "product() (polars.expr method)": [[396, "polars.Expr.product"]], "quantile() (polars.expr method)": [[397, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[398, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[399, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[400, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[401, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[402, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[403, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[404, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[405, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[406, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[407, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[408, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[409, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[410, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[411, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[412, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[413, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[414, "polars.Expr.round"]], "sample() (polars.expr method)": [[415, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[416, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[417, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[418, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[419, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[420, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[421, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[422, "polars.Expr.sign"]], "sin() (polars.expr method)": [[423, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[424, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[425, "polars.Expr.skew"]], "slice() (polars.expr method)": [[426, "polars.Expr.slice"]], "sort() (polars.expr method)": [[427, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[428, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[429, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[430, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[431, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[432, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[433, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[434, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[435, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[436, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[437, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[438, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[439, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[440, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[441, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[442, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[443, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[444, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[445, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[446, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[447, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[448, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[449, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[450, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[451, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[452, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[453, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[454, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[455, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[456, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[457, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[458, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[459, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[460, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[461, "polars.Expr.sum"]], "tail() (polars.expr method)": [[462, "polars.Expr.tail"]], "take() (polars.expr method)": [[463, "polars.Expr.take"]], "take_every() (polars.expr method)": [[464, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[465, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[466, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[467, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[468, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[469, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[470, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[471, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[472, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[473, "polars.Expr.var"]], "where() (polars.expr method)": [[474, "polars.Expr.where"]], "all() (in module polars)": [[475, "polars.all"]], "any() (in module polars)": [[476, "polars.any"]], "apply() (in module polars)": [[477, "polars.apply"]], "arange() (in module polars)": [[478, "polars.arange"]], "argsort_by() (in module polars)": [[479, "polars.argsort_by"]], "avg() (in module polars)": [[480, "polars.avg"]], "coalesce() (in module polars)": [[481, "polars.coalesce"]], "col() (in module polars)": [[482, "polars.col"]], "concat_list() (in module polars)": [[483, "polars.concat_list"]], "concat_str() (in module polars)": [[484, "polars.concat_str"]], "count() (in module polars)": [[485, "polars.count"]], "cov() (in module polars)": [[486, "polars.cov"]], "cumfold() (in module polars)": [[487, "polars.cumfold"]], "cumreduce() (in module polars)": [[488, "polars.cumreduce"]], "cumsum() (in module polars)": [[489, "polars.cumsum"]], "date() (in module polars)": [[490, "polars.date"]], "datetime() (in module polars)": [[491, "polars.datetime"]], "duration() (in module polars)": [[492, "polars.duration"]], "element() (in module polars)": [[493, "polars.element"]], "exclude() (in module polars)": [[494, "polars.exclude"]], "first() (in module polars)": [[495, "polars.first"]], "fold() (in module polars)": [[496, "polars.fold"]], "format() (in module polars)": [[497, "polars.format"]], "groups() (in module polars)": [[498, "polars.groups"]], "head() (in module polars)": [[499, "polars.head"]], "list() (in module polars)": [[500, "polars.list"]], "lit() (in module polars)": [[501, "polars.lit"]], "map() (in module polars)": [[502, "polars.map"]], "max() (in module polars)": [[503, "polars.max"]], "mean() (in module polars)": [[504, "polars.mean"]], "median() (in module polars)": [[505, "polars.median"]], "min() (in module polars)": [[506, "polars.min"]], "n_unique() (in module polars)": [[507, "polars.n_unique"]], "pearson_corr() (in module polars)": [[508, "polars.pearson_corr"]], "quantile() (in module polars)": [[509, "polars.quantile"]], "reduce() (in module polars)": [[510, "polars.reduce"]], "repeat() (in module polars)": [[511, "polars.repeat"]], "select() (in module polars)": [[512, "polars.select"]], "spearman_rank_corr() (in module polars)": [[513, "polars.spearman_rank_corr"]], "std() (in module polars)": [[514, "polars.std"]], "struct() (in module polars)": [[515, "polars.struct"]], "sum() (in module polars)": [[516, "polars.sum"]], "tail() (in module polars)": [[517, "polars.tail"]], "var() (in module polars)": [[518, "polars.var"]], "when() (in module polars)": [[519, "polars.when"]], "cache() (polars.lazyframe method)": [[538, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[539, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[540, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[541, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[542, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[543, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[544, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[545, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[546, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[547, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[548, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[549, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[550, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[551, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[552, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[553, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[554, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[555, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[556, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[557, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[558, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[559, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[560, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[561, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[562, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[563, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[564, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[565, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[566, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[567, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[568, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[569, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[570, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[571, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[572, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[573, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[574, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[575, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[576, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[577, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[578, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[579, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[580, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[581, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[582, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[583, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[584, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[585, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[586, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[587, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[588, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[589, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[590, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[591, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[592, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[593, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[594, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[595, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[596, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[597, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[598, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[599, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[600, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[601, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[609, "polars.Series.abs"]], "alias() (polars.series method)": [[610, "polars.Series.alias"]], "all() (polars.series method)": [[611, "polars.Series.all"]], "any() (polars.series method)": [[612, "polars.Series.any"]], "append() (polars.series method)": [[613, "polars.Series.append"]], "apply() (polars.series method)": [[614, "polars.Series.apply"]], "arccos() (polars.series method)": [[615, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[616, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[617, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[618, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[619, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[620, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[621, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[622, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[623, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[624, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[625, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[626, "polars.Series.argsort"]], "arr (polars.series attribute)": [[627, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[628, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[629, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[630, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[631, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[632, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[633, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[634, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[635, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[636, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[637, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[638, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[639, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[640, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[641, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[642, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[643, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[644, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[645, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[646, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[647, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[648, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[649, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[650, "polars.Series.arr.unique"]], "cast() (polars.series method)": [[651, "polars.Series.cast"]], "cat (polars.series attribute)": [[652, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[653, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[654, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[655, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[656, "polars.Series.cleared"]], "clip() (polars.series method)": [[657, "polars.Series.clip"]], "clip_max() (polars.series method)": [[658, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[659, "polars.Series.clip_min"]], "clone() (polars.series method)": [[660, "polars.Series.clone"]], "cos() (polars.series method)": [[661, "polars.Series.cos"]], "cosh() (polars.series method)": [[662, "polars.Series.cosh"]], "cummax() (polars.series method)": [[663, "polars.Series.cummax"]], "cummin() (polars.series method)": [[664, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[665, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[666, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[667, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[668, "polars.Series.describe"]], "diff() (polars.series method)": [[669, "polars.Series.diff"]], "dot() (polars.series method)": [[670, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[671, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[672, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[673, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[674, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[675, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[676, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[677, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[678, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[679, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[680, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[681, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[682, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[683, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[684, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[685, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[686, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[687, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[688, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[689, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[690, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[691, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[692, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[693, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[694, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[695, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[696, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[697, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[698, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[699, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[700, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[701, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[702, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[703, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[704, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[705, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[706, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[707, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[708, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[709, "polars.Series.dt.year"]], "dtype (polars.series property)": [[710, "polars.Series.dtype"]], "entropy() (polars.series method)": [[711, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[712, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[713, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[714, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[715, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[716, "polars.Series.exp"]], "explode() (polars.series method)": [[717, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[718, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[719, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[720, "polars.Series.fill_null"]], "filter() (polars.series method)": [[721, "polars.Series.filter"]], "flags (polars.series property)": [[722, "polars.Series.flags"]], "floor() (polars.series method)": [[723, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[724, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[725, "polars.Series.has_validity"]], "hash() (polars.series method)": [[726, "polars.Series.hash"]], "head() (polars.series method)": [[727, "polars.Series.head"]], "inner_dtype (polars.series property)": [[728, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[729, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[730, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[731, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[732, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[733, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[734, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[735, "polars.Series.is_first"]], "is_float() (polars.series method)": [[736, "polars.Series.is_float"]], "is_in() (polars.series method)": [[737, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[738, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[739, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[740, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[741, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[742, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[743, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[744, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[745, "polars.Series.is_utf8"]], "item() (polars.series method)": [[746, "polars.Series.item"]], "kurtosis() (polars.series method)": [[747, "polars.Series.kurtosis"]], "len() (polars.series method)": [[748, "polars.Series.len"]], "limit() (polars.series method)": [[749, "polars.Series.limit"]], "log() (polars.series method)": [[750, "polars.Series.log"]], "log10() (polars.series method)": [[751, "polars.Series.log10"]], "max() (polars.series method)": [[752, "polars.Series.max"]], "mean() (polars.series method)": [[753, "polars.Series.mean"]], "median() (polars.series method)": [[754, "polars.Series.median"]], "min() (polars.series method)": [[755, "polars.Series.min"]], "mode() (polars.series method)": [[756, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[757, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[758, "polars.Series.n_unique"]], "name (polars.series property)": [[759, "polars.Series.name"]], "nan_max() (polars.series method)": [[760, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[761, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[762, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[763, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[764, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[765, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[766, "polars.Series.peak_min"]], "product() (polars.series method)": [[767, "polars.Series.product"]], "quantile() (polars.series method)": [[768, "polars.Series.quantile"]], "rank() (polars.series method)": [[769, "polars.Series.rank"]], "rechunk() (polars.series method)": [[770, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[771, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[772, "polars.Series.rename"]], "reshape() (polars.series method)": [[773, "polars.Series.reshape"]], "reverse() (polars.series method)": [[774, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[775, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[776, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[777, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[778, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[779, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[780, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[781, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[782, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[783, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[784, "polars.Series.rolling_var"]], "round() (polars.series method)": [[785, "polars.Series.round"]], "sample() (polars.series method)": [[786, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[787, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[788, "polars.Series.series_equal"]], "set() (polars.series method)": [[789, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[790, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[791, "polars.Series.set_sorted"]], "shape (polars.series property)": [[792, "polars.Series.shape"]], "shift() (polars.series method)": [[793, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[794, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[795, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[796, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[797, "polars.Series.shuffle"]], "sign() (polars.series method)": [[798, "polars.Series.sign"]], "sin() (polars.series method)": [[799, "polars.Series.sin"]], "sinh() (polars.series method)": [[800, "polars.Series.sinh"]], "skew() (polars.series method)": [[801, "polars.Series.skew"]], "slice() (polars.series method)": [[802, "polars.Series.slice"]], "sort() (polars.series method)": [[803, "polars.Series.sort"]], "sqrt() (polars.series method)": [[804, "polars.Series.sqrt"]], "std() (polars.series method)": [[805, "polars.Series.std"]], "str (polars.series attribute)": [[806, "polars.Series.str"]], "concat() (polars.series.str method)": [[807, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[808, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[809, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[810, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[811, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[812, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[813, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[814, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[815, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[816, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[817, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[818, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[819, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[820, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[821, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[822, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[823, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[824, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[825, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[826, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[827, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[828, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[829, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[830, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[831, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[832, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[833, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[834, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[835, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[836, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[837, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[838, "polars.Series.sum"]], "tail() (polars.series method)": [[839, "polars.Series.tail"]], "take() (polars.series method)": [[840, "polars.Series.take"]], "take_every() (polars.series method)": [[841, "polars.Series.take_every"]], "tan() (polars.series method)": [[842, "polars.Series.tan"]], "tanh() (polars.series method)": [[843, "polars.Series.tanh"]], "time_unit (polars.series property)": [[844, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[845, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[846, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[847, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[848, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[849, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[850, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[851, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[852, "polars.Series.top_k"]], "unique() (polars.series method)": [[853, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[854, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[855, "polars.Series.value_counts"]], "var() (polars.series method)": [[856, "polars.Series.var"]], "view() (polars.series method)": [[857, "polars.Series.view"]], "zip_with() (polars.series method)": [[858, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[872, "polars.SQLContext"]]}})